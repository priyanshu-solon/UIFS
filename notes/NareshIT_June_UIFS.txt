02/06
=====

Array Purpose
Array Configuration
Meta Character & Constructor
 [ ]  , Array()
Array Elements & Properties

Reading Array Elements:

1. toString()        returns all array elements separated with "," delimiter.


2. join()            returns all array elements separated with custom delimiter.


Syntax:
    var values = ["A", "B", "C"];
    values.toString();                //    A,B,C
    values.join(' > ' );                //    A > B > C

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     document.write(menu.join( " / "));
</script>


3. forEach()        returns all array elements using synchronous technique.
                It is an iterator with value and index.

Syntax:
    data.forEach(function(value, index){
   
        // use value & index

    })

4. map()            It returns all array elements using async technique.
                It uses unblocking technique.

Syntax:
    data.map(function(value, index){
   
        // use value & index

    })

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     menu.map(function(value, index){
          document.write(`<li> [${index}]${value}</li>`);
     })
</script>



5. You can use explicit iterators
   
    a) for..in        It reads and returns every property
    b) for..of        It reads and returns every value


Syntax:
    for(var property in data)
    {
    }

    for(var value of data)
    {
    }

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     for(var property in menu){
          document.write(`[${property}] ${menu[property]}<br>`);
     }
</script>

6. You can read and return conditional data using
    a) find()
    b) filter()

    - find() returns the first occurrence value that matches given condition.
    - filter() returns all values that match the given condition.

Syntax:
     data.find(function(value){

        returns  condition;    

    })

    data.filter(function(value){

        returns condition;
   
    })

Ex:
<script>
     var sales = [45000, 70000, 24500, 67000, 25000];

     var result = sales.filter(function(value){
          return value >= 60000;
     });

     document.write(result);
</script>

Adding elements into array:

1. push()            Adds new element(s) as last item(s).

2. unshift()        Adds new element(s) as first item(s).

3  splice()        Adds new element(s) at specified position.

Syntax:
    data.push("item1", "item2");
    data.unshift("item1", "item2");
    data.splice(startIndex, deleteCount,  Item1, Item2,..);

Note: Delete count for slice must be zero, while adding elements without removing
      existing elements.

Ex:
<script>
     var categories = ["Kids","Women"];

     categories.splice(1, 1 ,"Men", "Mobiles");
     categories.map(function(category, i){
          document.write(`[${i}] : ${category}<br>`);
     })
     
</script>

Removing elements from array:

1. pop()        It removes and returns the last item.

2. shift()        It removes and returns the first item.

3. splice()    It removes specific item(s) from given index.

4. slice()        It extracts items between specified index without removing.

Syntax:
    data.pop()
    data.shift()
    data.splice(startIndex,deleteCount)
    data.slice(startIndex, endIndex)


Sorting Array elements

1. sort()        It arranges elements in ascending order.

2. reverse()    It arranges elements in reverse order.

Syntax:
    data.sort().reverse()

Note: Array sorts in a string format, it requires explicit methods to convert into number
     and sort.


Array de-structure:
- It is the process of separating array elements into individual reference.
- De-structure can be defined by using spread operator "..."

Syntax:
    var list1 = [ "A", "B"];
    var list2 = [ "C", "D"];
 
    var list3 = [ list1, list2] ;        // 2 elements
    var list3 = [ ...list1, list2];        // 3 elements     [A, B, [C, D]];
    var list3 = [ ...list1, ...list2];    // 4 elements      [A,B,C,D]

Dynamically adding elements into page:

1. Create html element by using  the document method   "createElement()".

    Syntax:
        document.createElement("p, h2, div, span, img, ...");

2. Configure a reference for dynamically created element.

    Syntax:
   
        var ref = document.creatElement("img");

3. Configure the properties for element
       
    Syntax:
            ref.property = value;

4. Append element into page, you can append to body and any container in body.

    Syntax:
        document.querySelector("body").appendChild(ref);
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function UploadClick(){
               var img = document.createElement("img");
               img.width = "200";
               img.height = "200";
               img.src = "../public/images/women-fashion.jpg";
               document.querySelector("div").appendChild(img);
          }
     </script>
</head>
<body>
     <button onclick="UploadClick()">Upload Photo</button>
     <br><br>
     <div>
     
     </div>
</body>
</html>

3/06
====

Ex: Presenting array elements

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kids Fashion", "Women Fashion"];
        function bodyload(){
            categories.map(function(category){
                  var li = document.createElement("li");
                  li.textContent = category;
                  document.querySelector("ol").appendChild(li);

                  var option = document.createElement("option");
                  option.text  = category;
                  option.value =  category;
                  document.querySelector("select").appendChild(option);

                  var navItem = document.createElement("span");
                  navItem.innerHTML = `<a href='${category}.html'> ${category} </a>`;
                  navItem.style.marginRight = "30px";

                  document.querySelector("nav").appendChild(navItem);

                  var ulLi = document.createElement("li");
                  ulLi.innerHTML = `<input type="checkbox"> <label>${category}</label>`;
                  document.querySelector("ul").appendChild(ulLi);

            })
        }
    </script>
</head>
<body onload="bodyload()">
    <ol>

    </ol>
    <select>

    </select>
    <nav>
        <h2>Amazon</h2>
    </nav>
    <ul>

    </ul>
</body>
</html>

Ex: Array Manipulations

1. src/scripts/array.js


var movies = [
    "MISSION : IMPOSIBLE",
    "FINAL DESTINATION"
];

function LoadMovies(){
    document.getElementById("lstMovies").innerHTML = "";
    movies.map(function(movie){
         var option = document.createElement("option");
         option.text  = movie;
         option.value = movie;
         document.getElementById("lstMovies").appendChild(option);
    })
    document.getElementById("lblCount").innerHTML =  `Total Count of Movies : ${movies.length}`;
}

function AddClick(){
    var movieName = document.getElementById("txtMovie").value;
    if(movies.indexOf(movieName.toUpperCase())===-1) {
         movies.push(movieName.toUpperCase());
        alert(`${movieName} Added to list`);
        LoadMovies();
        document.getElementById("txtMovie").value  = "";
    } else {
        alert(`${movieName} Exists`);
    }
}

function SortAsc(){
    movies.sort();
    LoadMovies();
}
function SortDsc(){
    movies.sort();
    movies.reverse();
    LoadMovies();
}
function DeleteClick(){
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);
    var choice = confirm(`Delete ${selectedMovieName}\nAre you sure want to delete?`);
    if(choice===true){
        movies.splice(selectedMovieIndex, 1);
        LoadMovies();
    }
}
function ClearAll(){
    movies.length = 0;
    LoadMovies();
}
function EditClick(){
    var movieName = document.getElementById("lstMovies").value;
    document.getElementById("txtEditMovie").value = movieName;
}
function SaveClick(){
    var newMovieName = document.getElementById("txtEditMovie").value;
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);

    movies[selectedMovieIndex] = newMovieName;
    LoadMovies();
}

2. array-manipulation.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script src="../src/scripts/array.js"></script>
</head>
<body class="container-fluid" onload="LoadMovies()">
    <h2 class="bi bi-ticket text-center text-danger"> Book My Show - Admin Dashboard</h2>
    <div class="w-25 mt-4">
        <h2>Manage Movies</h2>
        <div class="my-2 input-group">
            <input class="form-control" id="txtMovie" type="text" placeholder="New Movie"> <button onclick="AddClick()" class="btn btn-primary">Add Movie</button>
        </div>
        <div class="mt-4">
            <div class="my-2">
                <button onclick="SortAsc()" class="btn btn-success bi bi-sort-alpha-down"></button>
                <button onclick="SortDsc()" class="btn btn-success bi bi-sort-alpha-up mx-3"></button>
            </div>
            <select size="3" id="lstMovies" class="form-select"></select>
            <div class="mt-2">
                <span id="lblCount" class="fw-bold"></span>
            </div>
            <div class="mt-4">
                <button onclick="EditClick()" data-bs-target="#edit" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill"> Edit </button>
                <div class="modal fade" id="edit">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3>Edit Movie</h3>
                            </div>
                            <div class="modal-body">
                                <input type="text" class="form-control" id="txtEditMovie">
                            </div>
                            <div class="modal-footer">
                                <button onclick="SaveClick()" data-bs-dismiss="modal" class="btn btn-success">Save</button>
                                <button data-bs-dismiss="modal" class="btn btn-danger mx-2">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                <button onclick="DeleteClick()" class="btn btn-danger mx-3 bi bi-trash-fill"> Delete </button>
                <button onclick="ClearAll()" class="btn btn-outline-danger bi bi-trash"> Clear </button>
            </div>
        </div>
    </div>
</body>
</html>


Ex: Tasks

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>
        var tasks = [];
        function LoadTasks(){
            tasks.map(function(task){
                 
                 var div = document.createElement("div");
                 div.className = "alert alert-dismissible alert-success";
                 div.innerHTML = `<div class="d-flex justify-content-between"> <span>${task}</span> <button class="bi bi-trash btn btn-danger"></button> </div>`;
                 document.getElementById("tasksContainer").appendChild(div);
            });
        }
        function AddClick(){
            var task = document.getElementById("txtTask").value;
            tasks.push(task);
            LoadTasks();
            document.getElementById("txtTask").value = "";
        }
    </script>
</head>
<body class="container-fluid" onload="LoadTasks()">
    <div class="w-50">
        <h3>Add Task</h3>
        <div class="input-group">
            <input type="text" id="txtTask" class="form-control" placeholder="New Task">
            <button class="btn btn-primary" onclick="AddClick()">Add</button>
        </div>
        <div class="mt-4" id="tasksContainer">

        </div>
    </div>
</body>
</html>

                              Object Type

4/06
====

Object Type

- Object in computer programming is used to keep all relative data and logic together.
- It enables easy reusability, extensibility and separation.
- "Alan kay" introduced the concept of object in early 1960's.
- JavaScript object is a key and value collection enclosed in a block { }.

        {
          key: value,
          key: value
        }

- Key is always string type and value can be any type.

Syntax:
    var obj = {
              id : 1,
              name: "TV",
              cities: [ "Delhi", "Hyd" ],
              stock: true,
              rating: { rate: 3.5, count: 500 },
                  total : function() { }
            }

- You can access the values inside object using "this" keyword and outside object using object name.

        obj.id
        obj.total()

Ex:
<script>
    var product = {
        Name : "Samsung TV",
        Price : 45000,
        Qty : 1,
        Total: function(){
            return this.Qty * this.Price;
        },
        Print: function(){
            document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}<br>`);
        }
    }
    product.Print();
    document.write("<hr>");
    product.Name = "iPhone 16";
    product.Price = 70000;
    product.Qty = 2;
    product.Print();
</script>

- If object comprises of only data representation without any logic then it is referred as "JSON". [JavaScript Object Notation].

- JSON formatted data is
    a) Light weight
    b) Faster in communication
    c) Not infected with virus
    d) Not blocked by firewalls
    e) Safe and secured

Object Manipulations:

1. How to read all keys from object?
A.
    a) Object.keys()        : It returns array of all keys in specified object
    b) for..in                : It is an explicit iterator to read all keys

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.2
    }
    for(var key in product)
    {
        document.write(`${key}: ${product[key]}<br>`);
    }
</script>

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })
</script>

2. How to hide any key?
A. By using JavaScript primitive data type "symbol".
    Key is hidden over iterations, but accessible individually.

Syntax:
      var  id  = Symbol();
   
      var product = {
        [id] : 1,
        name: "TV"
       }

       Symbol type keys are defined in "[ ]".

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

3. How to remove a key from object?
A. By using JavaScript "delete" operator.

Syntax:
        delete  object.Key;

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    delete product.Rating;
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

4. How to find a key?
A. By using JavaScript "in" operator.

Syntax:
        if ("key"  in object)        => returns true if object contains given key.

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    // delete product.Rating;
    if("Rating" in product){
        console.log(`Rating=${product.Rating}`);
    } else {
        console.log(`Rating not found`);
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessing product with Id=${product[Id]}`);
</script>

Note: You can't delete the built in properties or keys of JavaScript.

        delete  name.length;        // invalid
        delete  Math.PI;            // invalid


                              JavaScript  Ajax

- Ajax is "Asynchronous JavaScript And XML".
- It allows browser to load new details into your page without reloading the complete page.
- It enables "Partial Post Back".
- It can post only specific portion of page, without posting entire page.
- It improves the performance of application.
- JavaScript AJAX request from browser is made by using "XMLHttpRequest" object of browser window.

1. Configure the request by using XMLHttpRequest object

    var  http = new XMLHttpRequest();

2. Open the request by defining target content location & request type.

     http.open("method", "url", async:true);

     method     => GET, POST, PUT, PATCH, DELETE

3. Send the request to process

      http.send();

4. Execute the request in process by using "onreadystatechange()" function.

       http.onreadystatechange = function() {


        }

5. Execution of Ajax request in done in 4 phases
   
        1        Initial
        2        Success
        3        Complete
        4        Ready

6. You have to access data when it is ready[4].

7. The response data is returned in HTML, Text or XML format.

        http.responseText
              .responseXML

8. If your data is in any another format then you have to convert the data in to native format from text.

          JSON.parse(string);

Ex:
1. Create a new folder "data"

2. Add a new file "db.json"

{
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 69999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
}

<script>
    var http = new XMLHttpRequest();

    http.open("get", "../data/db.json", true);
    http.send();

    http.onreadystatechange = function(){

         if(http.readyState===4){
              console.log(JSON.parse(http.responseText));
         }

    }
</script>












Ex:
Ajax-demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            var http = new XMLHttpRequest();
            http.open("get", "../data/db.json", true);
            http.send();

            http.onreadystatechange = function(){

                 if(http.readyState===4){
                     product = JSON.parse(http.responseText);
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })


                 }

            }

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

5/06
=====

Object
Object Manipulations
JSON Type
AJAX Request using XHMLHttpRequest  object

Issues with XMLHttpRequest:

- It not async implicitly.
- It requires explicitly async to configure.
- It returns data in text or xml format.
- It requires explicit parsing for other type of data.
- It is not good in error handling.
- It have CORS issues. [Cross Origin Resource Sharing]
- It have security issues like XSRF. [Cross Site Request Forgery]


                           Fetch API

- JavaScript ES5+ versions introduced a "fetch()" API.
- It is a JavaScript promise to make XMLHttpRequest.
- Promise is async by default.
- It provides data in binary format.
- You have to convert the binary into required format.  [parsing required]
- It is good in handling XSRF & CORS.
- It is better in error handling.

Syntax:
    fetch("url")
    .then(function(response){
        // on success
    })
    .catch(function(error){
        // on error
    })
    .finally(function(){
        // executes always
    })

- Promise comprises of 2 actions
    a) resolve
    b) reject

- Resolve defines actions to perform when request is success.  
- Reject defines actions to perform when request fails.

        then()        Resolve
        catch()        Reject
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(data){
                product = data;
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })

            })
            .catch(function(error){
                console.log(error);
            })
            .finally(function(){
                console.log(`Request End`);
            })
           

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

Ex:
1. data/db.json

[
    {
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79999,
    "rating": {"rate":4.8, "ratings":26988, "reviews":317 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   },
   {
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
   },
   {
    "title": "Apple iPhone 16 (Pink, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   }
]


2. demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(mobiles){
                 mobiles.map(function(mobile){
                     var div = document.createElement("div");
                     div.className="row my-4 border border-4 p-3 m-4";
                     div.innerHTML = `
                        <div class="col-2">
                            <img src=${mobile.image} width="100%">
                        </div>
                        <div class="col-8">
                            <div class="fs-4 fw-bold">${mobile.title}</div>
                            <div class="my-2"> <span class="badge bg-success rounded rounded-1 text-white"> ${mobile.rating.rate} <span class="bi bi-star-fill"></span> </span> </div>
                        </div>
                        <div class="col-2">
                            <div class="fs-2 fw-bold">${mobile.price}</div>
                        </div>
                     `;
                     document.querySelector("section").appendChild(div);
                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header>
        <h1>iPhone 16</h1>
    </header>
    <section>

    </section>
</body>
</html>

Nasa API : [api.nasa.gov]

1. Open   api.nasa.gov

2. Register and get a key to your email.

3. Browse API's and select  "Mars Rover Photos"

https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY

4. Replace DEMO_KEY with your API key. [sent to your email]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){
                      var tr = document.createElement("tr");

                      var tdId = document.createElement("td");
                      var tdPreview = document.createElement("td");
                      var tdCamera = document.createElement("td");
                      var tdRover = document.createElement("td");

                      tdId.innerHTML = photo.id;
                      tdPreview.innerHTML = `<a href=${photo.img_src} target="_blank"><img src=${photo.img_src} width="100" height="100"></a>`;
                      tdCamera.innerHTML = photo.camera.full_name;
                      tdRover.innerHTML = photo.rover.name;

                      tr.appendChild(tdId);
                      tr.appendChild(tdPreview);
                      tr.appendChild(tdCamera);
                      tr.appendChild(tdRover);

                      document.querySelector("tbody").appendChild(tr);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <table class="table table-hover">
       <thead>
          <tr>
            <th class="bi bi-card-text"> Photo Id</th>
            <th class="bi bi-card-image"> Preview</th>
            <th class="bi bi-camera"> Camera Name</th>
            <th class="bi bi-rocket"> Rover Name</th>
          </tr>
       </thead>
       <tbody>

       </tbody>
    </table>
</body>
</html>

Nasa Data in Card Style

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){

                        var div = document.createElement("div");
                        div.className = "card m-2 p-2";
                        div.style.width = "200px";
                        div.innerHTML = `
                          <img class="card-img-top" src=${photo.img_src} height="100">
                          <div class="card-header">
                             <h3>${photo.id}</h3>
                          </div>                  
                          <div class="card-body">
                            <dl>
                                 <dt>Camera</dt>
                                 <dd>${photo.camera.full_name}</dd>
                                 <dt>Rover</dt>
                                 <dd>${photo.rover.name}</dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                              <a href=${photo.img_src} target="_blank" class="btn btn-dark w-100">Preview</a>
                          </div>
                        `;
                        document.querySelector("section").appendChild(div);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <section class="d-flex flex-wrap">

    </section>
</body>
</html>