02/06
=====

Array Purpose
Array Configuration
Meta Character & Constructor
 [ ]  , Array()
Array Elements & Properties

Reading Array Elements:

1. toString()        returns all array elements separated with "," delimiter.


2. join()            returns all array elements separated with custom delimiter.


Syntax:
    var values = ["A", "B", "C"];
    values.toString();                //    A,B,C
    values.join(' > ' );                //    A > B > C

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     document.write(menu.join( " / "));
</script>


3. forEach()        returns all array elements using synchronous technique.
                It is an iterator with value and index.

Syntax:
    data.forEach(function(value, index){
   
        // use value & index

    })

4. map()            It returns all array elements using async technique.
                It uses unblocking technique.

Syntax:
    data.map(function(value, index){
   
        // use value & index

    })

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     menu.map(function(value, index){
          document.write(`<li> [${index}]${value}</li>`);
     })
</script>



5. You can use explicit iterators
   
    a) for..in        It reads and returns every property
    b) for..of        It reads and returns every value


Syntax:
    for(var property in data)
    {
    }

    for(var value of data)
    {
    }

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     for(var property in menu){
          document.write(`[${property}] ${menu[property]}<br>`);
     }
</script>

6. You can read and return conditional data using
    a) find()
    b) filter()

    - find() returns the first occurrence value that matches given condition.
    - filter() returns all values that match the given condition.

Syntax:
     data.find(function(value){

        returns  condition;    

    })

    data.filter(function(value){

        returns condition;
   
    })

Ex:
<script>
     var sales = [45000, 70000, 24500, 67000, 25000];

     var result = sales.filter(function(value){
          return value >= 60000;
     });

     document.write(result);
</script>

Adding elements into array:

1. push()            Adds new element(s) as last item(s).

2. unshift()        Adds new element(s) as first item(s).

3  splice()        Adds new element(s) at specified position.

Syntax:
    data.push("item1", "item2");
    data.unshift("item1", "item2");
    data.splice(startIndex, deleteCount,  Item1, Item2,..);

Note: Delete count for slice must be zero, while adding elements without removing
      existing elements.

Ex:
<script>
     var categories = ["Kids","Women"];

     categories.splice(1, 1 ,"Men", "Mobiles");
     categories.map(function(category, i){
          document.write(`[${i}] : ${category}<br>`);
     })
     
</script>

Removing elements from array:

1. pop()        It removes and returns the last item.

2. shift()        It removes and returns the first item.

3. splice()    It removes specific item(s) from given index.

4. slice()        It extracts items between specified index without removing.

Syntax:
    data.pop()
    data.shift()
    data.splice(startIndex,deleteCount)
    data.slice(startIndex, endIndex)


Sorting Array elements

1. sort()        It arranges elements in ascending order.

2. reverse()    It arranges elements in reverse order.

Syntax:
    data.sort().reverse()

Note: Array sorts in a string format, it requires explicit methods to convert into number
     and sort.


Array de-structure:
- It is the process of separating array elements into individual reference.
- De-structure can be defined by using spread operator "..."

Syntax:
    var list1 = [ "A", "B"];
    var list2 = [ "C", "D"];
 
    var list3 = [ list1, list2] ;        // 2 elements
    var list3 = [ ...list1, list2];        // 3 elements     [A, B, [C, D]];
    var list3 = [ ...list1, ...list2];    // 4 elements      [A,B,C,D]

Dynamically adding elements into page:

1. Create html element by using  the document method   "createElement()".

    Syntax:
        document.createElement("p, h2, div, span, img, ...");

2. Configure a reference for dynamically created element.

    Syntax:
   
        var ref = document.creatElement("img");

3. Configure the properties for element
       
    Syntax:
            ref.property = value;

4. Append element into page, you can append to body and any container in body.

    Syntax:
        document.querySelector("body").appendChild(ref);
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function UploadClick(){
               var img = document.createElement("img");
               img.width = "200";
               img.height = "200";
               img.src = "../public/images/women-fashion.jpg";
               document.querySelector("div").appendChild(img);
          }
     </script>
</head>
<body>
     <button onclick="UploadClick()">Upload Photo</button>
     <br><br>
     <div>
     
     </div>
</body>
</html>

3/06
====

Ex: Presenting array elements

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kids Fashion", "Women Fashion"];
        function bodyload(){
            categories.map(function(category){
                  var li = document.createElement("li");
                  li.textContent = category;
                  document.querySelector("ol").appendChild(li);

                  var option = document.createElement("option");
                  option.text  = category;
                  option.value =  category;
                  document.querySelector("select").appendChild(option);

                  var navItem = document.createElement("span");
                  navItem.innerHTML = `<a href='${category}.html'> ${category} </a>`;
                  navItem.style.marginRight = "30px";

                  document.querySelector("nav").appendChild(navItem);

                  var ulLi = document.createElement("li");
                  ulLi.innerHTML = `<input type="checkbox"> <label>${category}</label>`;
                  document.querySelector("ul").appendChild(ulLi);

            })
        }
    </script>
</head>
<body onload="bodyload()">
    <ol>

    </ol>
    <select>

    </select>
    <nav>
        <h2>Amazon</h2>
    </nav>
    <ul>

    </ul>
</body>
</html>

Ex: Array Manipulations

1. src/scripts/array.js


var movies = [
    "MISSION : IMPOSIBLE",
    "FINAL DESTINATION"
];

function LoadMovies(){
    document.getElementById("lstMovies").innerHTML = "";
    movies.map(function(movie){
         var option = document.createElement("option");
         option.text  = movie;
         option.value = movie;
         document.getElementById("lstMovies").appendChild(option);
    })
    document.getElementById("lblCount").innerHTML =  `Total Count of Movies : ${movies.length}`;
}

function AddClick(){
    var movieName = document.getElementById("txtMovie").value;
    if(movies.indexOf(movieName.toUpperCase())===-1) {
         movies.push(movieName.toUpperCase());
        alert(`${movieName} Added to list`);
        LoadMovies();
        document.getElementById("txtMovie").value  = "";
    } else {
        alert(`${movieName} Exists`);
    }
}

function SortAsc(){
    movies.sort();
    LoadMovies();
}
function SortDsc(){
    movies.sort();
    movies.reverse();
    LoadMovies();
}
function DeleteClick(){
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);
    var choice = confirm(`Delete ${selectedMovieName}\nAre you sure want to delete?`);
    if(choice===true){
        movies.splice(selectedMovieIndex, 1);
        LoadMovies();
    }
}
function ClearAll(){
    movies.length = 0;
    LoadMovies();
}
function EditClick(){
    var movieName = document.getElementById("lstMovies").value;
    document.getElementById("txtEditMovie").value = movieName;
}
function SaveClick(){
    var newMovieName = document.getElementById("txtEditMovie").value;
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);

    movies[selectedMovieIndex] = newMovieName;
    LoadMovies();
}

2. array-manipulation.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script src="../src/scripts/array.js"></script>
</head>
<body class="container-fluid" onload="LoadMovies()">
    <h2 class="bi bi-ticket text-center text-danger"> Book My Show - Admin Dashboard</h2>
    <div class="w-25 mt-4">
        <h2>Manage Movies</h2>
        <div class="my-2 input-group">
            <input class="form-control" id="txtMovie" type="text" placeholder="New Movie"> <button onclick="AddClick()" class="btn btn-primary">Add Movie</button>
        </div>
        <div class="mt-4">
            <div class="my-2">
                <button onclick="SortAsc()" class="btn btn-success bi bi-sort-alpha-down"></button>
                <button onclick="SortDsc()" class="btn btn-success bi bi-sort-alpha-up mx-3"></button>
            </div>
            <select size="3" id="lstMovies" class="form-select"></select>
            <div class="mt-2">
                <span id="lblCount" class="fw-bold"></span>
            </div>
            <div class="mt-4">
                <button onclick="EditClick()" data-bs-target="#edit" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill"> Edit </button>
                <div class="modal fade" id="edit">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3>Edit Movie</h3>
                            </div>
                            <div class="modal-body">
                                <input type="text" class="form-control" id="txtEditMovie">
                            </div>
                            <div class="modal-footer">
                                <button onclick="SaveClick()" data-bs-dismiss="modal" class="btn btn-success">Save</button>
                                <button data-bs-dismiss="modal" class="btn btn-danger mx-2">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                <button onclick="DeleteClick()" class="btn btn-danger mx-3 bi bi-trash-fill"> Delete </button>
                <button onclick="ClearAll()" class="btn btn-outline-danger bi bi-trash"> Clear </button>
            </div>
        </div>
    </div>
</body>
</html>


Ex: Tasks

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>
        var tasks = [];
        function LoadTasks(){
            tasks.map(function(task){
                 
                 var div = document.createElement("div");
                 div.className = "alert alert-dismissible alert-success";
                 div.innerHTML = `<div class="d-flex justify-content-between"> <span>${task}</span> <button class="bi bi-trash btn btn-danger"></button> </div>`;
                 document.getElementById("tasksContainer").appendChild(div);
            });
        }
        function AddClick(){
            var task = document.getElementById("txtTask").value;
            tasks.push(task);
            LoadTasks();
            document.getElementById("txtTask").value = "";
        }
    </script>
</head>
<body class="container-fluid" onload="LoadTasks()">
    <div class="w-50">
        <h3>Add Task</h3>
        <div class="input-group">
            <input type="text" id="txtTask" class="form-control" placeholder="New Task">
            <button class="btn btn-primary" onclick="AddClick()">Add</button>
        </div>
        <div class="mt-4" id="tasksContainer">

        </div>
    </div>
</body>
</html>

                              Object Type

4/06
====

Object Type

- Object in computer programming is used to keep all relative data and logic together.
- It enables easy reusability, extensibility and separation.
- "Alan kay" introduced the concept of object in early 1960's.
- JavaScript object is a key and value collection enclosed in a block { }.

        {
          key: value,
          key: value
        }

- Key is always string type and value can be any type.

Syntax:
    var obj = {
              id : 1,
              name: "TV",
              cities: [ "Delhi", "Hyd" ],
              stock: true,
              rating: { rate: 3.5, count: 500 },
                  total : function() { }
            }

- You can access the values inside object using "this" keyword and outside object using object name.

        obj.id
        obj.total()

Ex:
<script>
    var product = {
        Name : "Samsung TV",
        Price : 45000,
        Qty : 1,
        Total: function(){
            return this.Qty * this.Price;
        },
        Print: function(){
            document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}<br>`);
        }
    }
    product.Print();
    document.write("<hr>");
    product.Name = "iPhone 16";
    product.Price = 70000;
    product.Qty = 2;
    product.Print();
</script>

- If object comprises of only data representation without any logic then it is referred as "JSON". [JavaScript Object Notation].

- JSON formatted data is
    a) Light weight
    b) Faster in communication
    c) Not infected with virus
    d) Not blocked by firewalls
    e) Safe and secured

Object Manipulations:

1. How to read all keys from object?
A.
    a) Object.keys()        : It returns array of all keys in specified object
    b) for..in                : It is an explicit iterator to read all keys

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.2
    }
    for(var key in product)
    {
        document.write(`${key}: ${product[key]}<br>`);
    }
</script>

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })
</script>

2. How to hide any key?
A. By using JavaScript primitive data type "symbol".
    Key is hidden over iterations, but accessible individually.

Syntax:
      var  id  = Symbol();
   
      var product = {
        [id] : 1,
        name: "TV"
       }

       Symbol type keys are defined in "[ ]".

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

3. How to remove a key from object?
A. By using JavaScript "delete" operator.

Syntax:
        delete  object.Key;

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    delete product.Rating;
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

4. How to find a key?
A. By using JavaScript "in" operator.

Syntax:
        if ("key"  in object)        => returns true if object contains given key.

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    // delete product.Rating;
    if("Rating" in product){
        console.log(`Rating=${product.Rating}`);
    } else {
        console.log(`Rating not found`);
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessing product with Id=${product[Id]}`);
</script>

Note: You can't delete the built in properties or keys of JavaScript.

        delete  name.length;        // invalid
        delete  Math.PI;            // invalid


                              JavaScript  Ajax

- Ajax is "Asynchronous JavaScript And XML".
- It allows browser to load new details into your page without reloading the complete page.
- It enables "Partial Post Back".
- It can post only specific portion of page, without posting entire page.
- It improves the performance of application.
- JavaScript AJAX request from browser is made by using "XMLHttpRequest" object of browser window.

1. Configure the request by using XMLHttpRequest object

    var  http = new XMLHttpRequest();

2. Open the request by defining target content location & request type.

     http.open("method", "url", async:true);

     method     => GET, POST, PUT, PATCH, DELETE

3. Send the request to process

      http.send();

4. Execute the request in process by using "onreadystatechange()" function.

       http.onreadystatechange = function() {


        }

5. Execution of Ajax request in done in 4 phases
   
        1        Initial
        2        Success
        3        Complete
        4        Ready

6. You have to access data when it is ready[4].

7. The response data is returned in HTML, Text or XML format.

        http.responseText
              .responseXML

8. If your data is in any another format then you have to convert the data in to native format from text.

          JSON.parse(string);

Ex:
1. Create a new folder "data"

2. Add a new file "db.json"

{
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 69999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
}

<script>
    var http = new XMLHttpRequest();

    http.open("get", "../data/db.json", true);
    http.send();

    http.onreadystatechange = function(){

         if(http.readyState===4){
              console.log(JSON.parse(http.responseText));
         }

    }
</script>












Ex:
Ajax-demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            var http = new XMLHttpRequest();
            http.open("get", "../data/db.json", true);
            http.send();

            http.onreadystatechange = function(){

                 if(http.readyState===4){
                     product = JSON.parse(http.responseText);
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })


                 }

            }

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

5/06
=====

Object
Object Manipulations
JSON Type
AJAX Request using XHMLHttpRequest  object

Issues with XMLHttpRequest:

- It not async implicitly.
- It requires explicitly async to configure.
- It returns data in text or xml format.
- It requires explicit parsing for other type of data.
- It is not good in error handling.
- It have CORS issues. [Cross Origin Resource Sharing]
- It have security issues like XSRF. [Cross Site Request Forgery]


                           Fetch API

- JavaScript ES5+ versions introduced a "fetch()" API.
- It is a JavaScript promise to make XMLHttpRequest.
- Promise is async by default.
- It provides data in binary format.
- You have to convert the binary into required format.  [parsing required]
- It is good in handling XSRF & CORS.
- It is better in error handling.

Syntax:
    fetch("url")
    .then(function(response){
        // on success
    })
    .catch(function(error){
        // on error
    })
    .finally(function(){
        // executes always
    })

- Promise comprises of 2 actions
    a) resolve
    b) reject

- Resolve defines actions to perform when request is success.  
- Reject defines actions to perform when request fails.

        then()        Resolve
        catch()        Reject
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(data){
                product = data;
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })

            })
            .catch(function(error){
                console.log(error);
            })
            .finally(function(){
                console.log(`Request End`);
            })
           

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

Ex:
1. data/db.json

[
    {
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79999,
    "rating": {"rate":4.8, "ratings":26988, "reviews":317 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   },
   {
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
   },
   {
    "title": "Apple iPhone 16 (Pink, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   }
]


2. demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(mobiles){
                 mobiles.map(function(mobile){
                     var div = document.createElement("div");
                     div.className="row my-4 border border-4 p-3 m-4";
                     div.innerHTML = `
                        <div class="col-2">
                            <img src=${mobile.image} width="100%">
                        </div>
                        <div class="col-8">
                            <div class="fs-4 fw-bold">${mobile.title}</div>
                            <div class="my-2"> <span class="badge bg-success rounded rounded-1 text-white"> ${mobile.rating.rate} <span class="bi bi-star-fill"></span> </span> </div>
                        </div>
                        <div class="col-2">
                            <div class="fs-2 fw-bold">${mobile.price}</div>
                        </div>
                     `;
                     document.querySelector("section").appendChild(div);
                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header>
        <h1>iPhone 16</h1>
    </header>
    <section>

    </section>
</body>
</html>

Nasa API : [api.nasa.gov]

1. Open   api.nasa.gov

2. Register and get a key to your email.

3. Browse API's and select  "Mars Rover Photos"

https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY

4. Replace DEMO_KEY with your API key. [sent to your email]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){
                      var tr = document.createElement("tr");

                      var tdId = document.createElement("td");
                      var tdPreview = document.createElement("td");
                      var tdCamera = document.createElement("td");
                      var tdRover = document.createElement("td");

                      tdId.innerHTML = photo.id;
                      tdPreview.innerHTML = `<a href=${photo.img_src} target="_blank"><img src=${photo.img_src} width="100" height="100"></a>`;
                      tdCamera.innerHTML = photo.camera.full_name;
                      tdRover.innerHTML = photo.rover.name;

                      tr.appendChild(tdId);
                      tr.appendChild(tdPreview);
                      tr.appendChild(tdCamera);
                      tr.appendChild(tdRover);

                      document.querySelector("tbody").appendChild(tr);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <table class="table table-hover">
       <thead>
          <tr>
            <th class="bi bi-card-text"> Photo Id</th>
            <th class="bi bi-card-image"> Preview</th>
            <th class="bi bi-camera"> Camera Name</th>
            <th class="bi bi-rocket"> Rover Name</th>
          </tr>
       </thead>
       <tbody>

       </tbody>
    </table>
</body>
</html>

Nasa Data in Card Style

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){

                        var div = document.createElement("div");
                        div.className = "card m-2 p-2";
                        div.style.width = "200px";
                        div.innerHTML = `
                          <img class="card-img-top" src=${photo.img_src} height="100">
                          <div class="card-header">
                             <h3>${photo.id}</h3>
                          </div>                  
                          <div class="card-body">
                            <dl>
                                 <dt>Camera</dt>
                                 <dd>${photo.camera.full_name}</dd>
                                 <dt>Rover</dt>
                                 <dd>${photo.rover.name}</dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                              <a href=${photo.img_src} target="_blank" class="btn btn-dark w-100">Preview</a>
                          </div>
                        `;
                        document.querySelector("section").appendChild(div);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <section class="d-flex flex-wrap">

    </section>
</body>
</html>

9/06
====

Weather App

1. Visit   https://openweathermap.org/api

2. Register a new free account

3. Go to "API DOCS" in current weather data category

4. Select the option "Built-in API request by city name"

5. Copy the API URL that can query by city name

    https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}

6. API Key is provided in your profile details.  [ My API Keys ]

    1318ca6725c69160d346c41fc0612596

  https://api.openweathermap.org/data/2.5/weather?q=Hyderabad&appid=    1318ca6725c69160d346c41fc0612596

        { city name }         => Hyderabad
        { API Key }         => Your API key

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <style>
        .bg-style {
            background-image: url("../public/images/weather.jpg");
            background-size: cover;
        }
    </style>
    <script>
        function SearchClick(){
            var cityName = document.getElementById("txtCity").value;
            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=1318ca6725c69160d346c41fc0612596&units=metric`)
            .then(function(response){
                 return response.json();
            })
            .then(function(weatherObj){
                document.getElementById("lblCity").innerHTML = weatherObj.name;
                document.getElementById("lblTemp").innerHTML = `${weatherObj.main.temp} &deg; <sup>c</sup>`
                document.getElementById("lblDescription").innerHTML = `[${weatherObj.weather[0].description}]`;
            })
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height:100vh">
   <div class="border bg-style w-50 border-2 border-warning rounded rounded-2" style="height:300px">
      <div class="mt-4 d-flex justify-content-center">
         <div class="input-group w-50">
              <input type="text" id="txtCity" class="form-control" placeholder="Your city name">
              <button onclick="SearchClick()" class="btn btn-warning bi bi-search"></button>
         </div>
      </div>
      <div class="mt-2 p-4">
          <div id="lblCity" class="fs-3 text-center text-white fw-bold"></div>
          <div id="lblDescription" class="text-center text-white"></div>
          <div class="mt-3">
              <div id="lblTemp" class="fs-1 fw-bold text-center text-warning"></div>
          </div>
      </div>
   </div>
</body>
</html>

                         
                                  Fakestore API
                        (https://fakestoreapi.com)

API Routes [ end points ]

    GET        /products                        [ ] array of products     [ { }, { } ]

    GET        /products/1                    product object             {   }
                                        by id
   
    GET        /products/categories            [ ] of all categories         [ " " ]

     GET    /products/category/electronics    [ ] of specific category  [ { }, { } ]
                                            products
Fakestore Product

     {
        id: 0,
        title: " ",
        price: 0,
        image: " ",
        description: " ",
        category: " ",
        rating: { rate:0, count: 0 }
     }

Ex: Fakestore API

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(response){
                 return response.json();
            })
            .then(function(categories){
                categories.unshift("all");
                categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(response){
                return response.json();
            })
            .then(function(products){
                 products.map(function(product){

                        var card = document.createElement("div");
                        card.className = "card m-2 p-2";
                        card.style.width = "200px";
                        card.innerHTML = `
                          <img class="card-img-top" src=${product.image} height="120">
                          <div class="card-header overflow-auto" style="height:100px">
                             ${product.title}
                          </div>
                          <div class="card-body">
                            <dl>
                                <dt>Price</dt>
                                <dd>${product.price}</dd>
                                <dt>Rating</dt>
                                <dd>${product.rating.rate} <span class="bi bi-star-fill text-success"></span> </dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                            <button class="btn btn-warning w-100 bi bi-cart4"> Add to Cart </button>
                         </div>
                        `;

                        document.querySelector("main").appendChild(card);
 
                 })
            })
        }

        function bodyload(){
            LoadCategories();
            LoadProducts(`https://fakestoreapi.com/products`);
        }

        function CategoryChange(){
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName==="all"){
                LoadProducts(`https://fakestoreapi.com/products`);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }

    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex mt-1 justify-content-between border border-2 p-3">
        <div class="fw-bold fs-4">Fakestore</div>
        <div class="fs-5">
            <span><a>Home</a></span>
            <span class="mx-4"><a>Electronics</a></span>
            <span><a>Jewelery</a></span>
            <span class="mx-4"><a>Men's Fashion</a></span>
            <span><a>Women's Fashion</a></span>
        </div>
        <div>
            <button class="btn btn-warning bi bi-cart4"></button>
        </div>
    </header>
    <section class="row mt-4">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold"> Select Category </label>
                <div>
                    <select onchange="CategoryChange()" class="form-select" id="lstCategories">

                    </select>
                </div>
            </div>
        </nav>
        <main class="col-10 overflow-auto d-flex flex-wrap" style="height:450px">

        </main>
    </section>
</body>
</html>

10/06
=====

Ex: Fakestore API

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(response){
                 return response.json();
            })
            .then(function(categories){
                categories.unshift("all");
                categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(response){
                return response.json();
            })
            .then(function(products){
                 products.map(function(product){

                        var card = document.createElement("div");
                        card.className = "card m-2 p-2";
                        card.style.width = "200px";
                        card.innerHTML = `
                          <img class="card-img-top" src=${product.image} height="120">
                          <div class="card-header overflow-auto" style="height:100px">
                             ${product.title}
                          </div>
                          <div class="card-body">
                            <dl>
                                <dt>Price</dt>
                                <dd>${product.price}</dd>
                                <dt>Rating</dt>
                                <dd>${product.rating.rate} <span class="bi bi-star-fill text-success"></span> </dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                            <button value=${product.id} onclick="AddToCartClick(this.value)" class="btn btn-warning w-100 bi bi-cart4"> Add to Cart </button>
                         </div>
                        `;

                        document.querySelector("main").appendChild(card);
 
                 })
            })
        }

        function bodyload(){
            LoadCategories();
            LoadProducts(`https://fakestoreapi.com/products`);
            GetCartItemsCount();
        }

        function CategoryChange(){
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName==="all"){
                LoadProducts(`https://fakestoreapi.com/products`);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }
        var cartItems = [];
        function GetCartItemsCount(){
            document.getElementById("lblCount").innerHTML = cartItems.length;
        }
        function AddToCartClick(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(response){
                 return response.json();
            })
            .then(function(product){
                 cartItems.push(product);
                 alert(`${product.title}\nAdded to Cart`);
                 GetCartItemsCount();
            })
        }

       
        function ShowCartClick(){
            var total = 0;
            document.querySelector("tbody").innerHTML ="";
            cartItems.map(function(item){

                var tr = document.createElement("tr");
                var tdTitle = document.createElement("td");
                var tdPrice = document.createElement("td");
                var tdImage = document.createElement("td");

                tdTitle.innerHTML = item.title;
                tdImage.innerHTML = `<img width="50" height="50" src=${item.image}>`;
                tdPrice.innerHTML = item.price;

                tr.appendChild(tdTitle);
                tr.appendChild(tdImage);
                tr.appendChild(tdPrice);

                document.querySelector("tbody").appendChild(tr);

            })

            for(var item of cartItems){
                total += item.price;
            }
            document.getElementById("lblTotal").innerHTML = `${total}`.fontsize(4).fontcolor('red').bold();

        }

    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex mt-1 justify-content-between border border-2 p-3">
        <div class="fw-bold fs-4">Fakestore</div>
        <div class="fs-5">
            <span><a class="text-decoration-none" href="javascript:LoadProducts('https://fakestoreapi.com/products')">Home</a></span&gt;
            <span class="mx-4"><a class="text-decoration-none" href="javascript:LoadProducts('https://fakestoreapi.com/products/category/electronics')">Electronics</a></span&gt;
            <span><a>Jewelery</a></span>
            <span class="mx-4"><a>Men's Fashion</a></span>
            <span><a>Women's Fashion</a></span>
        </div>
        <div>
            <button onclick="ShowCartClick()" data-bs-target="#cart" data-bs-toggle="offcanvas" class="btn btn-warning bi bi-cart4 position-relative"><span id="lblCount" class="badge bg-danger rounded rounded-circle position-absolute"></span></button>
            <div class="offcanvas offcanvas-end" id="cart">
                <div class="offcanvas-header">
                    <h4>Your Cart Items</h4>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Preview</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>
                        <tfoot>
                            <tr>
                                <td align="center" colspan="2" class="fw-bold fs-4">Total</td>
                                <td id="lblTotal"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </header>
    <section class="row mt-4">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold"> Select Category </label>
                <div>
                    <select onchange="CategoryChange()" class="form-select" id="lstCategories">

                    </select>
                </div>
            </div>
        </nav>
        <main class="col-10 overflow-auto d-flex flex-wrap" style="height:470px">

        </main>
    </section>
</body>
</html>

FAQ: What are the issues with object data type?
- It comprises of only string type keys.
- It requires lot of explicit operators for manipulation.
- Hence it is slow in rendering.


                              Map Type
- It is a key and value collection.
- Key can be any type.
- It provides all implicit methods to handle operations.
- It is faster when compared to object.
- It is schema less. [structure less]

Syntax:
    var data = new Map();

    data.set(key,value)                Add a new key with value
        .get(key)                    Returns the value in key
        .delete(key)                Removes a key and its value
        .has(key)                    Verifies the existence of key
        .keys()                    Returns all keys
        .values()                    Returns all values
        .entries()                    Returns all entries [keys and values]
        .clear()                    Removes all keys
        .size                        Returns count of keys

Ex:
<script>
    var data = new Map();
    data.set(1, "TV");
    data.set("Mobile", "Apple iPhone 16 Pro");
    data.set(2, ["Delhi", "Hyd"]);

     data.delete(2);

    if(data.has(2)){
        document.write(data.get(2));
    } else {
        alert('2 Not Found');
    }

    document.write(`${data.get("Mobile")}<br>`);

    for(var item of data.entries()){
        document.write(`${item}<br>`);
    }

    document.write(`Total Count of Keys : ${data.size}`);
</script>


FAQ: What is difference between object & map data types?
Ans:
        Object                Map
        ----------------------------------------------
        Structured                 Structure Less
        Explicit methods        Implicit Methods
        Slow                          Fast
        Keys only string        Keys can be any type

                   
                            Date Type
- Date type values are stored in memory by using "Date()" constructor.
- It allocates memory to handle date type.

Syntax:
    var now = new Date();        It stores current date and time into memory reference.


- You can store specific date and time by using the following format

    "year-month-day hours:minutes:seconds.milliSeconds"

Syntax:
    var mfd = new Date("2025-04-22 15:30:42.774");

- JavaScript provides various date and time methods to read date & time values.

    getHours()            It returns hours number 0 to 23
    getMinutes()            0 to 59
    getSeconds()            0 to 59
    getMilliSeconds()        0 to 999
    getDate()                1 to 28, 29, 30, 31
    getDay()                It returns weekday number 0=Sunday
    getMonth()            It returns month number 0=January
    getFullYear()            It returns full year.
    toLocaleString()        It returns both date & time
    toDateString()            
    toLocaleDateString()
    toTimeString()
    toLocaleTimeString()

Ex:
<script>
    var mfd = new Date("2025-04-22 15:30:24.876");
   
    var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    var months = ["Jan", "Feb", "March", "April", "May", "June", "July", "August"];

    document.write(`${weekdays[mfd.getDay()]} ${mfd.getDate()} , ${months[mfd.getMonth()]} ${mfd.getFullYear()}`)
</script>;

- Showing date & time values requires 3rd party libraries like
    a) dayjs
    b) moment
    c) luxon  etc..

- JavaScript provides setter methods to set date and time value
   
    setHours()
    setMinutes()
    setSeconds()
    setMilliSeconds()
    setDate()
    setTime()
    setMonth()
    setFullYear()
    etc..

Ex:
<script>
    var now = new Date();
   
    now.setHours(19)

    var hrs = now.getHours();
   
    if(hrs>=0 && hrs<=12) {
        document.write(`Good Morning !!<br><img src="../public/images/morning.gif" width="200" height="200">`);
    }
    else if(hrs>=13 && hrs<=16) {
        document.write(`Good Afternoon <br><img src="../public/images/afternoon.gif" width="200" height="200">`);
    } else {
        document.write(`Good Evening ! <br><img src="../public/images/evening.gif" width="200" height="200">`);
    }
</script>

11/06
=====

Date Type
- get & set function
- formatting date

                        Timer Events
1. setTimeout()
2. clearTimeout()
3. setInterval()
4. clearInterval()


setTimeout()
- It is used to handle "debounce".
- Debounce allows to delay any task by specified duration.
- It loads task into memory and locks the task or keeps it inactive for specific duration.
- So that it can allow other tasks to perform.

Syntax:
    setTimeout(function(){ }, interval)

clearTimeout()
- It is used to clear the task from memory.
- You can remove task from memory before it is released into process.


Syntax:
    clearTimeout(refName);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>

        function v1(){
            document.getElementById("lblVolume").innerHTML = "Increased by 20%";
        }
        function v2(){
            document.getElementById("lblVolume").innerHTML = "Increased by 70%";
        }

        function v3(){
            document.getElementById("lblVolume").innerHTML = "Volume Full";
        }

        var t1, t2, t3;
        function IncreaseVolume(){
            t1 = setTimeout(v1, 3000);
            t2 = setTimeout(v2, 8000);
            t3 = setTimeout(v3, 15000);
        }
        function CancelClick(){
            clearTimeout(t2);
        }
    </script>
</head>
<body>
    <button onclick="IncreaseVolume()" class="bi bi-volume-up"></button>
    <button onclick="CancelClick()">Cancel 70%</button>
    <br><br>
    <span id="lblVolume"></span>
</body>
</html>

setInterval()
- It is used to control "throttle".
- "Throttle" is a mechanism of executing given task repeatedly at regular time intervals.
- It is used to configure continuous operations.

Syntax:
    setInterval(function(){ }, interval)

clearInterval()
- It is used to stop throttle.
- It removes the task from memory.
- It requires a memory reference name.

Syntax:
    clearInterval(refName);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function Time(){
            var now = new Date();
            var time = now.toLocaleTimeString();
            document.querySelector("h1").innerHTML = time;
        }
        var thread;
        function bodyload(){
           thread = setInterval(Time,1000);
        }
        function StartClick(){
            thread = setInterval(Time,1000);
        }
        function StopClick(){
            clearInterval(thread);
        }
    </script>
</head>
<body onload="bodyload()">
    <h1 align="center"></h1>
    <button onclick="StartClick()">Start</button>
    <button onclick="StopClick()">Stop</button>
</body>
</html>


Ex: Stop Watch

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            display: flex;
            justify-content: center;
        }
        .container {
            width: 600px;
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
            height: 60px;
            margin-top: 200px;
        }
        .container div {
            border:1px solid gray;
            padding: 20px;
            font-family: Arial;
            font-size: 30px;
            color:gray;
        }
    </style>
    <script>
        var ms = 0;
        var s = 0;
        var m = 0;
        var h = 0;
        function StopWatch(){
            ms++;
            if(ms===999){
                s++;
                ms=0;
            }
            if(s===59){
                m++;
                s=0;
            }
            if(m===59){
                h++;
                m=0;
            }
            document.getElementById("lblMilliSec").innerHTML = ms + "ms";
            document.getElementById("lblSec").innerHTML = s + "s";
            document.getElementById("lblMin").innerHTML = m + "m";
            document.getElementById("lblhrs").innerHTML = h + "h";
        }
        var thread;
        function StartClick(){
           thread = setInterval(StopWatch,1);
        }
        function ClearClick(){
            clearInterval(thread);
            s=0;
            ms=0;
            h=0;
            m=0;
            document.getElementById("lblMilliSec").innerHTML = ms + "<sub>ms</sub>";
            document.getElementById("lblSec").innerHTML = s + "<sub>s</sub>";
            document.getElementById("lblMin").innerHTML = m + "m";
            document.getElementById("lblhrs").innerHTML = h + "h";
        }
    </script>
</head>
<body>
    <div>
        <div class="container">
        <div>
            <span  id="lblHrs">00 <sub>h</sub></span>
        </div>
        <div >
            <span id="lblMin">00<sub>m</sub></span>
        </div>
        <div >
            <span id="lblSec">00<sub>s</sub></span>
        </div>
        <div >
            <span id="lblMilliSec">000<sub>ms</sub></span>
        </div>
       </div>
       <br><br>
       <button onclick="StartClick()">Start</button>
       <button onclick="ClearClick()">Clear</button>
    </div>
</body>
</html>

Ex: setInterval

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        var i=1;
        function StartProgress(){
            i++;
            document.getElementById("progress").value = i;
            document.getElementById("lblStatus").innerHTML = `${i}% completed`;
            if(i===100){
                document.getElementById("imgContainer").style.display = "block";
                document.getElementById("progressContainer").style.display = "none";
                clearInterval(thread);
            }
        }
        var thread;
        function LoadClick(){
            document.getElementById("btnContainer").style.display = "none";
            document.getElementById("progressContainer").style.display = "block";
            thread = setInterval(StartProgress,100);
        }

    </script>
    <style>
        @keyframes Fade {
            from {
                opacity: 0;
                transform: scale(0.1) rotate(0deg);
            }
            to {
                opacity: 1;
                transform: scale(1) rotate(360deg);
            }
        }
        img {
            animation-name: Fade;
            animation-duration: 5s;
        }
    </style>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div id="btnContainer">
            <button class="btn btn-primary" onclick="LoadClick()">Load Image</button>
        </div>
        <div id="progressContainer" style="display: none;">
            <progress id="progress" min="1" max="100" style="width: 400px; height: 30px;"></progress>
            <p id="lblStatus"></p>
        </div>
        <div id="imgContainer" style="display: none;">
            <img src="../public/images/women-fashion.jpg" width="400" height="400">
        </div>
    </div>
</body>
</html>