2/06
====

Databases
- MongoDB
- MySQL

Server Side
- Node JS
- Express JS

Project
- Backend 
- jQuery
- Sass 
- Tailwind

1. Business Backend 
- It is responsible for managing a business using various software tools. 
- It includes domains like
	a) Purchasing
	b) Sales & Marketing 
	c) HR & Relations
	d) CRM & SRM
	e) Finance Management 
- It is often known as "ERP" [ Enterprise Resource Planning ]
- Popular ERP
	a) SAP	
	b) Oracle
	c) Ariba etc.
- The technical and functional people are involved in business backend. 


2. Application Backend 
- Every business domain requires a software application. 
- Software application is built by using various technologies like
  	a) Java
 	b) .NET
	c) Python
	d) PHP
	e) Node  etc.
- Application is designed in layers and application runs in tiers. 

3. Tiers 
- Application runs in tiers. 
- The data required for application is kept in data center, which is a data tier. 
- The business logic is defined for application and kept in application tier.
- The users use application from presentation tier.
- All web applications are 3-tier applications. 


4. Layers
- Application is designed in layers.
- Web applications use a 3 layer architecture
	a) Database layer
		- Creating database
		- Inserting, updating, reading and deleting data. 
	
	b) Business Layer
		- Writing logic to handle communication between client & database.
		- Handling request from client
		- Communicating with database
		- Sending response to client
		- Creating API

	c) Presentation Layer
		- Designing UI
		- Consuming and presenting API

FAQ: What is difference between layers & tiers?
Ans:  Application is built in layers.
         Application runs in tiers.


		Database Layer

3/06
====

Roles & Responsibility:
- Creating database
- Storing data into database
- Querying data
- Manipulating data
- Automating the tasks

Purpose of Database Layer:
- Multitier applications maintain their data in database tier.
- A database layer is required to manage data on database tier.

What is Database?
- Database is an entity where you can store relational data.
- It provides simplified techniques for managing data dynamically.


What are the various types of databases?

- RDBMS                MySQL
- Document Based        MongoDB
- NoSQL Database        MongoDB
- SQL Database        MySQL
- Cloud Database         Firebase, Amazon RDS
- Distributed Database    Cassandra, Couchbase
- Data Warehouse        Snowflake, Redshift
  etc..

What are the database models?
1. Conceptual Model
    - It specifies the modules that require data.
    - Developer designs a model that comprises of information about modules
      in your application that require data.

2. Physical Model
    - It comprises of table name, fields, and their data types.
    - Every module is represented with a table.
    - Every table comprises of fields and their data types according business      
      requirements.

3. Logical Model
    - It configures the relationship between modules.
    - Developer need to identify the fields that have relation with other modules.
    - A relationship is configured using Primary & Foreign key.
    - Logical model comprises of table name, field name and relation.

4. Entity Model
    - It configures complete business model for application data.
    - It comprises of table, field, data type and relationship.
    - Developers working in database layer have to design database for application
      by following ER Diagram [ Entity Relation Diagram]


                             MongoDB Database
- Mongo is a cloud service.
- MongoDB provides "Atlas" as cloud database.
- MongoDB provides local community servers to manage offline data.
- MongoDB is NoSQL database management system.
  [ It doesn't require SQL as language for database]
- It uses BSON / JSON data type.
- It is document database.
- It is semi structured data.
- It supports entity model data. [ORM]
- It supports Ad-hoc querying.

https://www.mongodb.com/try/download/community

4/06
====
What is Database?
Types of Databases?
Database Models
MongoDB
- It is NoSQL
- Document based
- Semi Structured / Structure Less
- Schema Less
- ORM
- Ad-hoc querying
- Data Replications



Setup MongoDB on your device:

1. Download and Install MongoDB community server
    https://www.mongodb.com/try/download/community

2. Select "MongoDB Compass" while installing database
    - It is a GUI tool used to manage database.

3. Start MongoDB server   
    - programs -> services -> right click on MongoDB server -> start
    - MongoDB server address is
       
            mongodb://127.0.0.1:27017
                     (or)
            mongodb://localhost:27017

4. Open "MongoDB Compass" which is a client tool required for communicating with MongoDB server.
        Server            : It is the location where data is kept.
        Client            : It is the location from where we manipulate the data.


5. Click on "New Connection"

6. Define connection string
        mongodb://127.0.0.1:27017

7. Save and connect


8. You will find the default databases on server

        a) admin    
        b) local
        c) config

                        MongoDB Terminology

1. Database            It is a store where data is kept.
                    Every application stores its data in a database.

2. Collection            It is the location where data for any specific module is stored.
                    A single database can have multiple collections.
                    Collection is structure less.
                    [ It is similar to a table in structured database ]

3. Document            In a collection every individual record is a document.
                    Every document represents an object.
                    Each document comprises of BSON data.

4. Field                It refers to the key that stores a value.
                    Keys are always string type.

5. Embedded            It refers to a join.
    Document


                        MongoDB Shell  [mongosh]

- It provides CLI [command line interface].
- CLI is used to query and manipulate data through commands.
- Select the connection name to open mongosh in MongoDB compass.
- It opens a mongo terminal where you can execute the commands.

1. To view the list of databases
        > show dbs
2. To view the current active database
        > db
3. To clear the current screen
        > cls
4. To create a new database
        > use  database_name

      It uses a logic, if database name exists then it will switch into the database.
                         if database doesn't exist, then it creates a new database.


    Note: Database is not displayed in the list if it doesn't contain any collection.

5/06
====

Features & Issues with MongoDB
Setup MongoDB
Client & Server
Terminology
    - database
    - collection
    - document
    - field
    - embedded document
MongoDB Compass
Mongo Shell Commands [ CLI ]

1. View list of all database

        > show dbs

2. View current active database

        > db

3. To create or switch into database
       
        > use  dbname

   
                        Creating Collection

- MongoDB collection is an array of objects.
- Collection is structure less or semi structured.
- MongoDB provides the method "createCollection()" to create a new collection.
- Current database related any command you have to invoke by using "db".

            > db.createCollection()

Syntax:
             > db.createCollection(collectionName, { options });

- Options are not mandatory you can skip options, however it takes the default values for options.

- You can configure following options for a collection:

    Option                Description
    ---------------------------------------------------------------------------------------
    autoIndexId [boolean]     It is a Boolean property that sets an unique ID for every
                        document.
                        It generates a unique ID automatically for every document
                        when set to true.
                        Its default value is true.
   
    max            [number]    It specifies the maximum number of records that a                                 collection can handle. You can limit the documents.


    capped        [boolean]    It depends on the "max" property.

                        If capped is set to true then it replaces the old document
                        with new document when it reaches the max limit.

                        If capped is false then it will not allow to add new docs
                        after max limit.

                        The default is false.
   
    size            [number]    It defines the memory allocated for collection.
                        You can't store documents when allocated memory is full.
               
                        It varies according to device if not defined.
                   
                        It is defined in bytes.

Syntax:
  > db.createCollection("name", { autoIndexId: true/false,  max:number, size:number, capped:true/false })
           

                8 bits         =     1 byte
                1024 bytes    =    1 kb
                1024 kb        =     1 mb
                1024 mb        =     1 gb
                1024 gb        =     1 tb

Ex:
  > db.createCollection("categories", { autoIndexId: true, max:10, size:4194304, capped:true})
 
  > db.createCollection("products")

- To view the collections of current database

  > show collections

- To remove any specific collection you have to use "drop()" method

  > db.collectionName.drop()
  > db.customers.drop()

- To remove any specific database, first switch into the database run the command
   "dropDatabase()".

   > db.dropDatabase()

   
                        Adding Documents

- Every document represents an object.
- Object is used to keep relative data together.
- Object is a key and value collection.
- Object keys are string type and value can be any type.

        {
           "key" : value,  
           "key" : value
        }

- MongoDB value types can be Binary Stream type, which is often known as BSON.
- BSON is similar to JSON types.
- It supports all JavaScript types
    a) Primitive
    b) Non Primitive

- To insert any document MongoDB provides the methods

    a) insertOne()
    b) insertMany()

Syntax:
    >db.collection.insertOne( {  } )
    >db.collection.insertMany( [ { }, { },.. ] )

Ex:
      >db.products.insertOne( { id:1, name:"tv", cities:['delhi', 'hyd'], rating:{rate:4.2} })
    >db.products.insertMany( [ { }, { } ] )

9/06
====

- Creating Database
- Creating Collection
- Insert Documents into Collection

                          Query Documents
- MongoDB uses "find()" method to query documents from a collection.
- Find can access and return one or multiple documents.

Syntax:
     > db.collection.find( { query } )
     > db.products.find({ })                // returns all documents

- You can configure query using various operators to filter and view the matching documents.

         $eq            Equal to
         $ne            Not Equal
         $gt            Greater than
         $gte        Greater than or equal
         $lt            Less than
         $lte            Less than or equal
         $and        Logical AND
         $or            Local OR

Syntax:
     > db.collection.find( { key: value } )        => return exact match

Ex:
     > db.fakestore.find( {id : 3} )
     > db.fakestore.find( {category: 'electronics' } )

Syntax: Query using condition

      > db.collection.find( { field: {condition} } )
     
Ex:
      > db.fakestore.find({ price:{$gte:600} })

- You can query the documents with object type reference by enclosing in single quote.

Syntax:
     > db.collection.find( { 'field.key' : { condition } } )

Ex:
     > db.fakestore.find({ 'rating.rate': {$gte:4.5} })


- You can add multiple expressions using "$and"  & "$or" operators.
- "$and" returns the data only when all expressions evaluate to true.
- "$or"  returns the data when any one expression evaluates to true.
- Multiple expressions are enclosed in "[ ]".

Syntax:
      >db.collection.find({ $and: [ {exp1}, {exp2}, .. ] })

Query: How to read all documents whose price is between 300 to 600.
        - fakestore        : collection
        - price            : field name

 >db.fakestore.find({ $and: [ {price:{$gte:300}}, {price:{$lte:600}} ] })

Query : Read all electronics with price above 500

            category = electronics
            price >= 500

>db.fakestore.find({ $and: [ {category:"electronics"}, {price:{$gte:500}} ] })

Query: Read all electronics & jewelery products from fakestore collection


 > db.collection.find({ $or: [ { }, { } ] })

Ex:	
    >db.fakestore.find({$or: [ {category:"electronics"}, {category:"jewelery" } ]})


Query: Read all electronics whose rating is above 4.6
       
        category: electronics
        'rating.rate': 4.6

    > db.fakestore.find({ $and: [ {category:"electronics"}, {'rating.rate': {&gt:4.6}} ] })

Query: Read all jewelery products and other products whose rating is above 4.5

   
    > db.fakestore.find({ $or:[ {category:"jewelery"}, {'rating.rate':{$gt:4.5}} ] })

Query: Read all jewelery & electronics between price 100 to 500.

    >db.products.find({$and:[{$or:[{"category":"jewelery"},{"category":"electronics"}]},{"price":{$gte: 100,$lte: 500 } }] })
    >db.products.find({$and:[{$or:[{"category":"jewelery"},{"category":"electronics"}]},{"price":{$gte:100}},{"price":{$lte:500}}]})

10/06
=====

db.collection.find({
$and: [
{ price: { $gt: 500 } },
{
$or: [
{ category: "electronics" },
{ category: "jewellery" }
]
}
]
})

Querying Data from Collection
- find()
- Operators
   
                        Querying Array Type

- Array type is defined in a collection using array meta character "[ ]".

Syntax:
        {
           shippedTo: [ 'Delhi', 'Hyd' ]
        }

- To search or query any content from array type MongoDB provides "$all" operator.
- It can verify all elements and return only the matching documents from collection.

Syntax:

    >db.collection.find({ fieldname: { $all: ['element'] } })

Ex:
   > db.products.find({ shippedTo: { $all: [ 'Hyd' ] } })

Ex:
 collection : products

{
  "name": "Mobile",
  "price": 15000,
  "shippedTo": [
    "Delhi",
    "Mumbai"
  ]
},
{
  "name": "TV",
  "price": 25000,
  "shippedTo": [
    "Hyd",
    "Mumbai"
  ]
}

                        Querying Date Type

- MongoDB uses "$date" operator to configure a date type value.
- Date must be in the format of ISO.
   
        "year-month-dateThours:minutes:seconds.milliSecondsZ"

- Date is an object with ISO format and defined using  "$date" operator

Syntax:
       
    {
      "mfd" : {
        "$date" : "yy-mm-ddThrs:min:sec.millSecZ"
        }
    }

- To query date value MongoDB provides "ISODate()" function.
- It is configured along with find() function.

Syntax:
   
     >db.collection.find({ field: ISODate("yy-mm-ddThrs:min:sec.milliSec") })

Ex:
      >db.products.find({ mfd: ISODate("2025-04-22T14:20:41.000Z") })


Ex:
{
    "name": "TV",
  "price": 30000,
  "mfd": {
    "$date": "2025-03-22T14:20:41.000Z"
  }
},

{
  "name": "Mobile",
  "price": 12000,
  "mfd": {
    "$date": "2025-04-22T14:20:41.000Z"
  }
}

Note: You can search for any document and return only the first occurrence document that matches given condition.
      It requires "findOne()" method to find and returns the first occurrence.

Syntax:
    > db.fakestore.find({category:"electronics"})            // returns all electronics
    > db.fakestore.findOne({category: "electronics"})        // returns specific

                           Updating Documents
- MongoDB provides the methods
    a) updateOne()
    b) updateMany()
- You have to find the relative document and update its data or fields.
- Update requires following operators

    $set            It sets a new value into specific field
    $unset        It removes specific field
    $rename        It allows to change field name.

Syntax:
    >db.collection.updateOne( { findQuery }, { updateQuery } )

Ex: Change value in specific field

       > db.fakestore.updateOne( {id:1}, { $set: { price: 400.44 } })

Ex: Set rating as 4.6 for all products whose price is above 500

    > db.fakestore.updateMany({price:{$gte:500}}, {$set:{'rating.rate':4.6}})

- You can add new fields into document by using "$set"

    >db.collection.updateOne({findQuery}, {$set: {newField:value}})

Ex:
    >db.products.updateOne({name:"TV"}, {$set: {stock:true}})

- You can change the field name by using "$rename" operator

Syntax
    >db.collection.updateMany({}, {$rename:{ "old" : "new" }})    

Ex:
     >db.products.updateMany({},{$rename:{"mfd":"manufactured"}})

- You can remove any specific field and its data by using "$unset" operator

Syntax:
    > db.collection.updateMany({ }, { $unset: "fieldname" })

    note: Fieldname refers to name and value defined as object.
   
    > db.products.updateMany({}, { $unset: { stock: " " })

                        Deleting Documents
- MongoDB can remove documents by using

    a) deleteOne()
    b) deleteMany()

- It uses find query to find and remove the data.

Syntax:
    >db.collection.deleteOne({ findQuery })

    >db.fakestore.deleteMany({ category: "electronics" })
    >db.fakestore.deleteOne({id:7})
    >db.fakestore.deleteMany({'rating.rate':{$lte:3}})

Basic CRUD
- Creating Collection
- Inserting Documents
- Querying Documents
- Updating Documents
- Delete Documents

11/06
=====

FAQ: How to drop collection and database?
Ans:
        >db.collection.drop()
        >db.dropDatabase()


                    MongoDB Schema Validation

- Validation is the process of verifying user input.
- Validation is required to ensure that contradictory and unauthorized data is not get stored into database.
- MongoDB allows to configure a schema validation.
- It is a validation defined for collection.
- A collection can restrict the fields, data type and data limits.
- Collection uses several options like
        a) autoIndexId
        b) max
        c) size
        d) capped
- Collection also provides validation options like
        a) validator
        b) validationType / validationLevel
        c) validationAction

- Validator is used to define validation for fields
- validationType defines strict or moderate validation.

        a) strict        : It will not allow to by-pass the validation
        b) moderate    : It allows to by-pass the validation with warning

- validationAction defines the error return type, you can notify as

        a) error        : As Error message    
        b) warn        : As Warning message

Syntax:
  > db.createCollection("name", {  
            validator:{ },
            validationType:"strict",   | validationLevel: "strict"
            validationAction:"error"
        })

- Validator is an object that configures validation schema by using "$jsonSchema"

Syntax:
   > db.createCollection("name", {

             validator: {
                $jsonSchema: { }
             }
        })

- $jsonSchema is an object with following properties

        a) bsonType
        b) required
        c) properties

- Schema "bsonType" is always "object"  type.
- Required is array that defines the fields allowed in collection.
- Properties is an object with collection of fields and their validations.

Syntax:
    > db.createCollection("name", {

          validator: {

            $jsonSchema: {
                   bsonType: "object",
                   required: [ "field1", "field2",..],
                   properties: { }
            }            
          }
     })

- Properties are configured for every field individually.
- Each field comprises of data type, validation service, error message as description.

Syntax:
            properties : {
                field1: {
                bsonType: "data_type",
                required: true,
                minimum: value,
                maximum: value,
                description : "error message"
                },
                field2: { }
                ....
                ....
            }

- The bson types allowed by MongoDB for various data types are shown below

Syntax:
  > db.createCollection("users", {

        validator: {
            $jsonSchema: {
                   bsonType: "object",
                   required: [ "username", "age"  ],
                   properties: {
                    username: {
                      bsonType: "string",
                      description: "User Name Required"
                    },
                   age: {
                     bsonType: "int",
                     minimum:15,
                     maximum:35,
                     description: "Age 15 to 35 only"
                   }
                  }  // end of properties
            }  // end of json schema
          },  // end of validator
         validationLevel: "strict",            // strict or moderate
         validationAction: "error"            // error or warn
           })

                        MongoDB Aggregation

12/06
=====

MongoDB Schema Validation
- Configure Validation for New Collection

Generate Rules for existing collection
1. Create a new collection

        > db.createCollection("products")

2. Insert document into collection

        > db.products.insertOne({id:1, name:"tv", price:4000, qty:2, stock:true})

3. Go to database => select collection name  in MongoDB compass

4. Go to "Validation" category

5. Generate Rules
 
Note: You can edit rules using edit option in Compass.


                       MongoDB Aggregation
- Aggregation is a framework use to filter, sort, group and perform various queries on data.
- MongoDB provides different aggregation stages and operators.

Stage                Description
----------------------------------------------------------------------------------
$match                It is used to filter documents [find]

$group                It is used to group document based on specified key.
                    Key refers to a field.

$project                It is used to reshape the query. Such as including or excluding
                    fields.

$sort                It sorts documents. 1 for ascending -1 for descending.

$limit                It limits the number of documents to display in result.

$lookup                 It is used to group and fetch fields from multiple collections.


Operators            Description
---------------------------------------------------------------------------------------------------
 $sum                finds the sum of values

 $count                returns the count of values in a group

 $multiply                returns the product

 $avg                finds the average of values

 etc..

Syntax: Aggregation Stage

    > db.collection.aggregate([ { } ])

- Aggregate() is a method that comprises of collection of queries.

Query: Get only id, title and price from products

    > db.products.aggregate([ { $project: { id:1, title:1, price:1 } } ])

Query: Get only electronic products

    > db.products.aggregate([ { $match: {category: "electronics"} } ])

Query: Get all electronics with only title and price

        > db.products.aggregate([ { $match: {category: "electronics"} }, { $project: { title:1, price:1 } } ])

FAQ: Without aggregation how you can access multiple categories?
      [without using logical $and, $or]
Ans:  By using "$in"

    > db.products.find({category:{$in: ["electronics", "jewelery"]}})

Query: Find all products whose category is electronics or jewelery and rating is
        above 4.

    > db.products.find({$and:[{category:{$in:["electronics", "jewelery"]}}, {'rating.rate':{$gte:4}}]})


Query : Sort all the products in descending order of price

    > db.products.aggregate([{$sort:{price:-1}}, {$limit:4}])

       limit:4        => returns top 3 results [ up to 4 ]

Query:  Returns all electronics with price in descending order and display only top 2.

    > db.products.aggregate([{$match:{category:"electronics"}}, {$sort:{price:-1}}, {$limit:3}])

Query : Return all electronics in descending order of their rating.

    > db.products.aggregate([{$match:{category:"electronics"}}, {$sort: {'rating.rate':-1}}])

Query:  Group all products by their category and find the average price of products
         in every category.

  - $group is used to group by any field.
  - The field is referred with unique "_id".
  - Field name in group is defined with "$name".

Syntax:
      >db.collection.aggregate([ {$group:{ _id:"$fieldName", total|avg|count:"$field" }} ])

Ex:
   >db.fakestore.aggregate([ {$group: {_id:"$category", avgPrice:{$avg:"$price"} } } ])
   >db.fakestore.aggregate([ {$group: {_id:"$category", totalPrice:{$sum:"$price"} } } ])

Query: Get the total count of products in every category

   >db.fakestore.aggregate([ {$group: {_id:"$category", count:{ $sum:1} }} ])


                            MySQL

13/06
=====

MySQL
- It is a SQL based database management system.
- It is maintained and evolved by Oracle.
- It is schema based or structured Relational Database Management System.


MySQL Terminology:

1. Database            : It is a store that comprises of data.

2. Table                 : It is an entity where data for every module is stored.

3. Record            : It refers to a row where every individual data is kept.

4. Field                : It refers to the columns header. Data is accessed with
                      reference of field name in a table.

5. View                : It refers to a virtual table that comprises of data from
                      various queries.

6. Stored Procedure    : It is used to refactor the code.
                      Refactor is the process of encapsulating a set of statements
                      into a reference, so that you can easily reuse the statements.

7. Function            : It is used to build expression.
                      It performs specified operation and evaluates a value.

8. Trigger                : It is used to trigger a procedure or function.

Note: Database can also have various tools like forms, reports, BI etc.
     
      Forms            : For configuring UI to interact with data
      Reports            : For querying and printing the desired data
      BI                : For business analysis

MySQL Tools:

1. MySQL Community Server
    - It is to set up a server where you can store data.
    - Database management happens in a community server.

2. MySQL Workbench
    - It is a client tool.
    - It provides a GUI to interact with the community server.


Setup & Install:

1. Visit   https://dev.mysql.com/downloads/mysql/

2. Download and Install 8x version [ LTS ]

3. Download MSI Installer for your OS [windows 64]

4. Start the installer and select "Custom" [ allows to select what you want to install ]

5. Make sure that  "Run MySQL Configurator" is selected.

    a) Perform an  in-place upgrade and configuration

    b) In Account configuration : set password

6. It installs MySQL Server and MySQL Workbench

7. Start MySQL Server from services

8. Open MySQL Workbench

9. Click "New connection [+] "

10. Specify a name for connection  "root" => Click OK

11. Click on the connection  => verify password  
 

                        SQL Commands

- SQL is "Structured Query Language"
- It is a language used by developers to communicate and interact with the database.
- SQL commands are categorized into 3 types

    a) DDL
    b) DML
    c) DCL

- DDL is Data Definition Language used to create database, views, triggers, procedures etc.

- DML is Data Manipulation Language used to filter, sort, update, delete etc.

- DCL is Data Control Language used to authorize and authenticate.

14/06
=====

SQL DDL [ Data Definition Language ]

1. Creating a new database
 - Database is a schema that can handle structured data.
 - You can create database using 2 keywords
        a) database
        b) schema
 - The command "create" is a DDL command used to create database, view, table,
    procedure etc.
 - You can create database using GUI button or using Query.
 
        create database  database_name;
        create schema    database_name;

- After writing query, you have to select & execute query.
- Every database comprises of default objects
        a) tables
        b) views
        c) stored procedures
        d) functions

2. Using Database
- Database is not active by default.
- Server comprises of several databases.
- You have to set database as default in order to use the database.

Syntax:
        use database_name;


3. Creating a database table
- Table in MySQL comprises of structured data.
- It have a schema based data arranged into rows and columns.

Syntax:
    create  table   table_name
    (
        fieldname  datatype  constraint;
       )

- Filed name refers to column header, It is a key to handle value in table.
- Data Type defines the data structure, which includes the type and range of data.
- The commonly used MySQL data types are show below

1. Number Types



2. Date Types

3. String Types


MySQL Constraints:
1. Primary Key
    - It is used to configure a unique field.
    - Every record requires an unique identification.
    - Primary key allows to set restriction for field so that the value must be unique.
      It can't be used by any another record in current table.
    - It is set to "not null", hence every primary key field must be defined with value.
    - A record can have only one field set with primary key.

2. Unique Key
    - It is used to set a unique identification for field
    - Table can't have multiple primary keys but it can have multiple unique keys.
    - Value of specified field must be unique.

3. Default
    - If value is not defined into any field of table then it takes "null" as value.
    - You can set a default value, which is stored into specific field when value
       is not defined.

4. Not Null
    - It is used for mandatory fields.
    - It set them as required fields.
    - A required field can't be null.
    - It must have a value.

5. Check
    - It checks for a condition to store the specified value.
    - It is just like a validator.
    - It checks the value before it is stored into field.
    - It restricts the value if it is not according to specified condition.

6. Foreign Key
    - It is used to configure a relationship between tables.
    - The primary key of a table can be used as foreign key in another table.
    - It configures relationships, which include
        a) One to One
        b) One to Many
        c) Many to Many

7. Auto Increment
    - It increments and assigns a value into new record.
    - It doesn't require to define a value, It increments from previous and sets into
      new field.

Syntax: Primary Key

       create table  tblproducts
       (
           ProductId   INT    PRIMARY KEY,
           Name       VARCHAR(20),
           Price          DECIMAL(6,2)
       )

Note: To view the table structure you can run the query

       > describe table_name;


Syntax: Unique Key

    create table tblproducts
    (
       ProductId  int primary key,
       Name varchar(20) unique key
    )

Syntax: Not Null

       create table tblproducts
    (
       ProductId  int primary key,
       Name varchar(20) UNIQUE KEY NOT NULL

16/06
=====

SQL DDL
- Create Database
- use
- Create Table
- MySQL Data Types
- Constraints

1. Primary Key
2. Unique
3. Not Null

4. Default Constraint
- It is used to set a default value into any field if it is left empty.
- SQL will verify field value null, and sets default value.
- Default value type can be any one of MySQL types.
- It is always overridden with the custom value defined.

Syntax:
create table tblproducts
(
   ProductId  int primary key,
   Name varchar(20) unique not null,
   Qty int default 1
)

5. Check Constraint
- It is used to set validation criteria for a value in any specific field.
- It uses various conditions to verify the input value.
- Conditions are configured using Boolean operators

        >    greater than
        >=    greater than or equal
        <    less than
        <=    less than or equal
        < >    not equal
        =    equal
        AND  Logical AND   &&
        OR      Logical OR      ||
        NOT      Logical  NOT   !

Syntax:
create table tblproducts
(
   ProductId  int primary key,
   Name varchar(20) unique not null,
   Qty int default 1  check( Qty < 5)
)
       
6. Auto Increment
- It allows to increment the current value by 1 and add to the new record.
- Initially it starts with 1.
- It increments the previous value by 1 and adds to new record.
- It can be only for numeric type data.
- It uses "Enum" technique. [Enumeration]

Syntax:
create table tblproducts
(
   ProductId  int primary key auto_increment,
   Name varchar(20) unique not null,
   Qty int default 1  check(Qty<5)
)

7. Foreign Key Constraint
- It creates a constraint that configures relationship between tables.
- Relational database can be configured with various types of relationships like

    a) One to One
    b) One to Many
    c) Many to Many

- Relations are configured by using Foreign key constraint.
- Foreign key is a reference of field which is the primary key of another table.

Syntax:
    CONSTRAINT   constraint_name    Foreign Key (foreign_key_field)

     REFERENCES   reference_tableName(reference_field_name)

     ON UPDATE     reference_type
   
     ON DELETE        reference type;

- Constraint name is required to modify or delete the foreign key.
- Foreign key field is current table field name, which you want as foreign key.
- Reference table is the parent from where the foreign key is derived.
- "on update" & "on delete" are reference operations, which defines actions to
    perform when the parent field is deleted or modified.
- You can have 3 reference type on update & delete
   
        a) STRICT [RESTRICT]
        b) CASCADE
        c) SET NULL

Ex:
1. Create Parent Table

create table tblcategories
(
   CategoryId int primary Key auto_increment,
   CategoryName varchar(30)
)

2. Create Products table

create table tblproducts
(
   ProductId int primary key auto_increment,
   Name varchar(30),
   CategoryId int,
   constraint fk_category foreign key(CategoryId) references tblcategories(CategoryId)
)

Note: Default reference type is Strict [Restrict].

17/06
=====

Foreign Key Constrains
Constraint References
    a) RESTRICT [strict]
    b) CASCADE
    c) SET NULL

2. Cascade
 - It is a reference type defined  on update & on delete.
 - It removes all relative records form child table, when parent foreign key field is removed.
- It updates all relative records in child table when parent field is updated.

Syntax:
create table tblproducts
(
   ProductId int primary key auto_increment,
   Name varchar(30),
   CategoryId int,
   constraint fk_category foreign key(CategoryId) references tblcategories(CategoryId)
   on delete cascade on update cascade
)

Note: You can define multiple reference types.

        "on delete  RESTRICT   on update CASCADE"

3. SET NULL
- It is a reference type that sets null value into child table field.
- If parent foreign key field is modified or deleted then child table data is set to null in all reference fields.

Syntax:
create table tblproducts
(
   ProductId int primary key auto_increment,
   Name varchar(30),
   CategoryId int,
   constraint fk_category foreign key(CategoryId) references tblcategories(CategoryId)
   on delete set null on update set null
)

FAQ: Can we configure multiple foreign key fields in table?
Ans:  Yes. A record in child table can map to different tables.
      It provides multiple filter conditions for a record.

Syntax:
create table tblproducts
(
   ProductId int primary key auto_increment,
   Name varchar(30),
   CategoryId int,
   VendorId int,

   constraint fk_category foreign key(CategoryId) references tblcategories(CategoryId)
   on delete set null on update set null,
 
  constraint fk_vendor foreign key(VendorId) references tblvendors(VendorId)
   on delete cascade on update cascade
)

create table  tblVendors(
    VendorId  int  primary key  auto_increment,
     VendorName varchar(20)
)

Summary:
- Creating table
- MySQL Data Types
- Constraints
    - Primary Key
    - Foreign Key
    - Unique
    - Not Null
    - Default
    - Check
    - Auto_Increment

                      Inserting Values into Table

- SQL provides DML [ Data Manipulation Language ] to manipulate data.
- It includes inserting data into table.
- The SQL command "INSERT" is used to insert data "INTO" specific table.

Syntax:
    INSERT  INTO  table_name  (field1, field2,..)  VALUES (value1, value2)

- Field name refers to exactly the name defined for field in table.
- Value must match all the constraints defined in table design.
- Value must also match the exact data type.

        a) Number type is directly defined as numeric [ 20 ]
        b) String type is enclosed in single quote [ 'string' ]
        c) Date type is defined as string in 'yy-mm-dd' format.

- You can insert multiple records into table, by separating with "," delimiter.

Ex:
insert into tblcategories (CategoryId, CategoryName) values (3, 'Mobiles'), (4, 'watches');

                    Querying Data from tables

- The SQL "select" command allows to select and query the data from table.
- It requires the field name or wild card to query.

Syntax:
        SELECT   FieldName1, FieldName2 from table_name;

        SELECT  *  from table_name;

- Using "*" in production level queries is not recommended.

Ex:
    select CategoryId, CategoryName from tblcategories;

- You can define alias names for fields while querying.
- It requires to use "AS" for aliasing.
- Aliasing allows you to define a friendly name to field.

Syntax:
SELECT CategoryId AS 'Product Category Id', CategoryName AS 'Product Category Name' FROM tblcategories

18/06
=====

Create Database, Tables
Inserting Records
Querying Records
    - SELECT
    - Wild Card "*"  [ searching for all fields ]
    - Aliasing [ AS ]

Expression in Query:
- SELECT command can use various operators and built-in functions to configure an expression in query.
- Expression requires fields that are configured in table.

Syntax:
  SELECT  FieldName FROM table;            // without expression

  SELECT  FieldName  (expression) AS  alias_name  from table;

Ex:
 select Name, Price, Qty as 'Quantity', (Qty * Price) as Total from tblproducts;

- A select query can be configured with
    a) wild card
    b) field name
    c) alias name
    d) expression
        - operator
        - function

Syntax:
    select * from table;            
    select field from table;
    select  field as alias from table;
    select  field, (expression) as alias from table;

Filtering Data in table:
- Select query requires "WHERE" command to filter the data.
- WHERE command uses an expression to filter data.
- Expression can be configured by using operators or built-in functions.

Syntax:
    SELECT  * FROM  table  WHERE  (expression);

- Comparison and Logical operators used in expression

        >        Greater than
        >=        Greater than or equal
        <        Less than
        <=        Less than or equal
        < >        Not Equal
        =        Equal
        OR        Logical OR    ||
        AND        Logical AND    &&
        NOT        Logical NOT   !

Query: Exactly matching data

     > select * from tblproducts  where  ProductId=2
    >  select * from tblproducts   where Rating=5

Note: Select commands returns one or multiple matching records.
      You can limit the results using "LIMIT" operator.

Syntax:
     select * from tblproducts where  price>=5000  limit  2;     returns top 2
     select * from tblproducts where  price>=5000  limit  2,4;     returns 3rd occurrence
         select * from tblproducts where  price>=5000  limit  2,10;     returns 3rd to 9th

Query: Set all electronic category products whose rating is above 4.

     select * from tblproducts where Category='electronics' AND Rating>4

Query: Select all electronic and jewelery products with price between 4000 to 10000.

    select * from tblproducts where (Category='electronics'  OR Category='Jewelery') AND (Price>=4000 AND Price<=10000);

- To find and returns values in any specified range your can use "BETWEEN" operator.

Syntax:

SELECT  * FROM table  WHERE  Field  BETWEEN  lower_bound AND upper_bound;

        lower_bound    : Minimum value
        upper_bound    : Maximum value
Ex:
   select * from tblproducts where  Price  between  4000 and 1000;

   Note: It includes the lower and upper bound value.

Query:  Select all products with rating between 4 & 5. [including 4 & 5 ]

    > select * from tblproducts where  Rating BETWEEN 4 AND 5;

- You can use "IN" operator to return exactly the matching values from the set the set of defined values.

Syntax:
     > SELECT  * FROM  table  WHERE  field  IN (value1, value2,..);

Query: Select electronics and jewelery products only.

    > SELECT * FROM  tblProducts  WHERE  Category IN ('Electronics', 'Jewelery');

Query: Select products with rating 3 & 5.

    > SELECT * FROM  tblProducts WHERE  Rating IN (3, 5);

Query: Select electronics and jewelery products with price between 4000 & 10000.
        use IN & between operator.

    > select * from tblproducts  where Category IN ('Electronics', 'Jewelery') AND (Price BETWEEN 4000 AND 10000)


- You can query data using string values that requires various wild cards.
- SQL provides "LIKE" operator to search in a string using wild card like
        a) %
        b) _

- "%" refers to zero or more occurrences of a char.
- "_"  refers to one occurrence of char.

Syntax:
select * from tblproducts  where Name LIKE  "%Silver%";      contains word Silver
select * from tblproducts  where Name LIKE  "Silver%";        starting with word Silver
select * from tblproducts  where Name LIKE  "%Silver";        ending with word Silver
   
 cat
 bat        =>  LIKE   "_at"        
 rat

Sorting & Aggregation

19/06
=====

Select Query
WHERE
BETWEEN
IN
LIKE

ORDER BY:
 - It allows to sort the data in table by specified field.
 - Sorting order is controlled by using
    a) ASC
    b) DESC
 - Default it is ascending order "asc".
 
Syntax:
    SELECT  * FROM  table  ORDER BY  field  ASC | DESC;

    select  * from tblproducts  order by  Price  desc;

Query: Get top 2 rating electronic products from products table.

       select * from tblproducts where Category="Electronics" order by Rating desc limit 2;

GROUP BY:
  - It allows to group records based on specific set of values after the given expression.
  - It uses an expression to and returns the group based on group criteria.

Syntax:
     SELECT  field , (expression)  from  table  group by  field;

Ex:
      select  count(*)  from tblproducts;        //  3

      select  Category, count(*) from tblproducts group by Category;

       O/P:
        Electronics  2
        Fashion        1

Note: The fields used to group must contain similar data in specified field.

IS NULL &  IS NOT NULL:
- You can query data based on "null".
- IS NULL refers to all records where specified field is having null value.
- IS NOT NULL allows to ignore all records that are null.

Syntax:
    Select * from  table where field  IS NULL;
    Select * from  table where field  IS NOT NULL;

Ex:
      SELECT * from tblproducts where Rating is not null;
      SELECT * from tblproducts where Rating is null;

DISTINCT
  - It is used to extract only unique records from table.
  - It allows to ignore the duplicates.
  - It requires all field with same type of data.

Syntax:
    SELECT   DISTINCT  from tblproducts;

Summary:
SELECT
WHERE
IN
BETWEEN
ORDER BY
GROUP BY
LIKE
IS NULL
IS NOT NULL
DISTINCT

                          MySQL Functions

- SQL provides several built-in functions for handle different types of data.
- These functions allows to format and filter the data or evaluate any value by building expression.
- SQL provides functions for string, number, date etc.

String Functions:

1. ASCII  
  - It returns the ASCII code of a char.
        A = 65, Z = 90
      a = 97, z = 122
 
  Syntax:
        SELECT  ASCII('A');        // 65

 - If you want to configure a table field name, then you have to defined the field name
   that returns a string.
 - It can read and return the ASCII of first char in the value.

Ex:
     SELECT Name, ascii(Name) from tblproducts

2. CHAR_LENGTH
  - It returns the total count of chars in specified field.
   
Ex:
    SELECT Name, char_length(Name) from tblproducts

     SELECT  char_length('Welcome to MySQL');

3. SUBSTRING
 - It returns the specified number of chars from given index in a string.

Syntax:
     SELECT  substring('string', startIndex, count_of_chars);

Ex:
     SELECT Name, substring(Name, 1, 3) from tblproducts

     Note: The start index is 1. [ not zero ]

4. SUBSTR
 - It is alias of "substring".
 - You can use as shorthand technique.

Syntax:
    SELECT  SUBSTR('string', startIndex, count_of_chars)


5. TRIM
 - It removes the leading spaces in a string.
 
Syntax:
    SELECT  TRIM('  string  ');

6. CONCAT
  - It is used to combine multiple string.
  - It returns a single string that concat multiple strings.

Syntax:
    SELECT  CONCAT('string1', 'string2')

Ex:
       select  FirstName, LastName,  concat(FirstName, LastName) as 'Full Name' from tblproducts;

Note: It is always mandatory to define the field name in query before you configure in
      expression.

      select  char_length(Name) from tblProducts;        // invalid
      select Name, char_length(Name) from tblproducts;    // valid

7. UPPER()
   - It converts all chars to uppercase letters.

8. LOWER()
   - It converts all chars to lowercase letters.

Syntax:
     select Name, upper(Name) from tblproducts;

MySQL Number Functions:

1. COUNT()
 - It returns the count of records that match the given condition.
 - It requires "*" as wild card to count all records.

Syntax:
     select count(*)  from tblproducts
     select count(*)  from tblproducts where (expression);

2. AVG()

3. MIN()

4. MAX()

etc..

Ex:
select Category, avg(Price) as 'Average Price' from tblproducts group by Category

20/06
=====

MySQL Functions
- String Functions
- Number Functions

                        Date Functions

- You can handle date and time values using date functions.
- It requires the data with date and time type.
- Date and Time type allows following format

    "year-month-day  hours : minutes : seconds"

- To configure a field for date and time you have to use date and time type.

Syntax:
    create  table   tblname
    (
        field  DATE,                // yy-mm-dd
        field  TIME,                // hrs:min:sec
        field  DATETIME         //  yy-mm-dd  hrs:min:sec
     )

- Date and time values are inserted into table as string.

Syntax:
    insert  into  tblname (field)  values ('yy-mm-dd hrs:min:sec');

- To access date and time values from a table you can use the following functions

1. CURRENT_DATE()        : It returns current date value "2025-06-20".
                          It's alias name is "curdate()".

2. CURRENT_TIME()        : It returns current time value "9:40:33".
                          It's alias name is "curtime()"

3. NOW()                    : It returns current date and time.

Ex:
 - Create table

create table logtable
(
   LogId int primary key auto_increment,
   LogTime time
)

- Insert Record

  insert into logtable (LogTime) values (curtime());

4. WEEKDAY()        : It returns the weekday number  starting with "0=Monday".

                      Syntax:
                        SELECT  WEEKDAY(CURDATE());    // 4 => Friday

5. DAYNAME()        : It returns the weekday name.

                      Syntax:
                        SELECT  DAYNAME(CURDATE());    //  Friday

6. WEEK()            : It returns the week number in current year.
   
                      Syntax:
                        select week(curdate());


7. MONTH()            : It returns the month number from current date.
                      1=January
   
                      Syntax:
                          select month(curdate());    //6

8. MONTHNAME()        : It returns the month name.

                       Syntax:
                        select monthname(curdate()); // June

Query:
     tblproducts
         Name     Manufactured        
     TV        2025-02-20
     Mobile    2025-04-18

         Get the product name and manufactured month name for all products from table
     alias name "Manufactured Month"

     Result:

     Name   Manufactured Month

Ex:
     select Name, monthname(Manufactured) as 'Manufactured Month' from tblproducts
   
Query: Get all products that are manufactured after march month

    select Name, monthname(Manufactured) as 'Manufactured Month' from tblproducts where month(Manufactured) > 3;

Query: Get all electronics products that are manufactured between Jan and March.

    select Name, monthname(Manufactured) as Manufactured Month from tblproducts where category='Electronics' and month(Manufactured) is between 1 and 3

9. DATE()        : It returns date value from date and time

10. TIME()        : It returns time value from date and time

11. HOUR()        : It returns hour number.

12. MINUTE()    : It returns minutes number.

13. SECOND()    : It returns seconds number.

14. MICROSECOND():  It returns micro seconds number.

15. YEAR()        : It returns the year number.

Query:
       LogId   Name   LogTime
       1        John    9:40:23
        ...
        ...

     Get the total session time in minutes for every user.

- Conversion Functions
- Decision Making
- Database Functions

21/06
======

MySQL Converting Types

1. cast()

2. convert()

- They are used to convert one data type to another.

Syntax:
     SELECT  CAST( 'data' as type);
     SELECT  CONVERT('data', type);

- CAST is a temporary conversion of type to use in relative location.
- Convert is used to convert into specific type permanently

Ex:
     Select  CAST ('2025-02-10'  AS  DATE);    
     Select  CONVERT ('2025-02-10', DATE);

MySQL Decision Making Function:

1. IF()        : It is decision making function that uses a condition and executes
              actions on true or false.

             Syntax:
                SELECT Fields, IF( condition, true, false) from table;

              You can use other operators and commands to filter data along with
              decision making.

Ex:
 select Name, Rating, if(Rating>=4, 'Product is Good', 'Product is Average') as 'Reviews' from tblproducts where Rating IS NOT NULL



2. CASE
   - It allows to configure multiple conditions.
   - It can execute exactly the block that matches given condition

Syntax:
      SELECT  fields,
    CASE
          WHEN condition THEN  statement,
          WHEN condition THEN  statement,
          ELSE statement
    END AS aliasName FROM table

Ex:
select Name, Rating,
  CASE
    when Rating>=5 then 'Very Good'
    when Rating=4 then 'Average'
    when Rating<4 then 'Poor'
  END AS 'Reviews'
 from tblproducts where Rating IS NOT NULL

Query:
         Name     ShippedTo      
         ---------------------------
          TV         DELHI
          Mobile    HYD
          Watch    MUMBAI

          if  city is delhi then delivery in 2 days
                        hyd   then delivery on same day
                Mumbai then delivery next day.

          Create a new field 'Delivery Status' with delivery time

MySQL Database Admin Functions

1. USER()        : It returns current user

                 Syntax :
                    SELECT  user();    // root@localhost

2.  Database()        : It returns the current active database

                 Syntax:
                    SELECT  database();

3.  Version()        : It returns the current active installed version of MySQL

                  Syntax:
                    SELECT version();


                           Updating Data & Tables

- MySQL provides DML UPDATE command that allows to modify the existing details.
- You can update table data using various operators.
- Update command requires SET operator to update data in specific field.

     Syntax:
      UPDATE table SET  field=value  WHERE condition;

Ex:
    update tblproducts set Rating=4 where ProductId=4;


Note: It is always required the match condition using a primary key field.
      If you want to use a condition without primary key reference then make sure that
      the "SQL_SAFE_UPDATES" is OFF [set to 0]

            1 = ON        
            0 = OFF

- Run the following query before updating

    SET SQL_SAFE_UPDATES = 0;

- Now you can update data without KEY field

    update tblproducts set Qty=3 where Price>=4000;

- You can turn ON safe mode any time using
   
    SET SQL_SAFE_UPDATES = 1;

23/06
=====

Select
Update

FAQ: What is the purpose of  "safe_update" ?
Ans :  It is default set to ON so that it allows only to modify table data by using
      key field.
      If you want to modify data by using any field then you have turn off "safe_update".

Syntax:
        SET SQL_SAFE_UPDATES = 0;        // turn OFF
        SET SQL_SAFE_UPDATES = 1;        // turn ON


                          Modify Table Structure

- Modifying table structure includes actions like
    a) adding fields
    b) changing field name
    c) changing the field type and constraints
    d) removing fields
    e) adding and removing constraints etc.

- SQL provides "ALTER" command with various helpers to modify table structure.
- Helpers include
    a) ADD
    b) MODIFY
    c) CHANGE
    d) DROP etc.

1. Adding a new field into data table

- It requires "alter" with "add" helper.
- It can add new column at specified position.
- You can define position using "AFTER" and "FIRST" helpers.
- "FIRST" will add new field as first field in table.
- "AFTER" will add new field after specified field in table.

Syntax:
    ALTER  table ADD  new_field  datatype constraint AFTER  existing_field;
    ALTER  table ADD  new_field  datatype constraint FIRST;

- Alter can modify a table, view, procedure, constraint etc.
- Hence you have define the reference type while modifying.

Syntax:
    Alter  table  table_name;
    Alter      view  view_name;
    etc.

Ex:
ALTER  TABLE tblvendors ADD VendorRating int AFTER VendorName;


2. Modifying Column Structure
- You can change the data type and constraints
- It required MODIFY helper.

Syntax:

    ALTER  TABLE  table_name  MODIFY  field_name  datatype  constraint;

Note: It is not recommended to modify the data type if field contains data.

Ex:
  ALTER TABLE tblvendors MODIFY VendorName varchar(30) NOT NULL UNIQUE;

Note: You can't modify a foreign key field when it is SET to RESTRICT in another table.

- You can modify multiple field simultaneously at the same time.

Syntax:
     alter table  table_name  modify  
        field datatype constraint,
        field datatype constraint;

3. Changing Column Name

  - If the column is not a foreign key column with restrict access then you can modify
    the name by using "CHANGE" helper.
 
  - Changing columns requires to define the old and new name using "COLUMN" helper.

  - You can change the position of column while changing name.
  - Position can be defined using  "FIRST & AFTER".

Syntax:
      ALTER TABLE table_name CHANGE COLUMN
      old_name  new_name AFTER  field_name;

  - It is mandatory to define the data type of field when you are changing its name
    with a new name.

Ex:
ALTER TABLE tblvendors CHANGE COLUMN VendorRating VendorReviews int AFTER VendorName


4. Removing Field from table

- You can use ALTER command with "DROP" helper to remove any specific field.
- As DROP can drop various component, you have to use COLUMN helper.
- DROP can be used for table, database, column, constraint, keys etc.

Syntax:
   ALTER TABLE  table_name  DROP  COLUMN  field_name;

- If it is used as foreign key with "restrict" access then you can't drop the field.
- If defined as cascade it is removed from all child tables.
- If defines as null it is set with null in all child tables.

Ex:
  alter table tblvendors drop VendorReviews

5. Removing Primary Key Field

- Drop helper requires the field name.
- You have to define primary key field name in order to drop from table.
- You can also drop primary key directly without specifying the key name.

Syntax:
    ALTER TABLE  table_name DROP  PRIMARY KEY;

- You can add a new primary key by using "ADD" helper

Syntax:
     ALTER TABLE  table_name  ADD  PRIMARY KEY(key_field_name);

- Make sure that there is only one primary key.
- You can define multiple unique keys.

6. Managing Foreign Keys

- You can add a new foreign key by using  "ADD CONSTRAINT".

Syntax:
    ALTER  TABLE  table_name  ADD CONSTRAINT  
    constaint_name  FOREIGN KEY(field_name)  REFERENCES  
    reference_table(fieldname)  
    ON UPDATE RESTRICT
    ON DELETE CASCADE

- To remove foreign key

    ALTER TABLE DROP CONTRAINT contraint_name;

               
                               DELETE

24/06
=====

Stored Procedure
DELETE  COMMAND

- It is used to remove records from a table.
- The DELETE command uses query to find and remove records.
- You can use various conditions to find by using "WHERE".

Syntax:
    DELETE   FROM  table  WHERE  condition;

- You can limit the number of records to delete by using LIMIT helper.

Syntax:
    DELETE   FROM  table  WHERE  condition  LIMIT count;

Ex:
        delete from tblcategories where CategoryId=4

Query: Delete all electronic products whose rating is less that or equal to 3.
Ans:
    DELETE  FROM tblproducts WHERE  (Category='Electronics') AND (Rating<=3);

      DELETE  FROM tblproducts WHERE  (Category='Electronics') AND (Rating<=3) LIMIT 3;

Summary:
 - Insert
 - Update
 - Alter
 - Delete
 - Select

FAQ: What is difference between update & alter?
Ans:  Update is used to modify the data in table.
     Alter is used to modify the table structure.


                          Stored Procedures

- Stored procedure is used to "refactor" the code.

- Refactoring is a technique of encapsulating a set of statement into a reference memory so that you can easily reuse and extend the code.

- Refactoring can be configured using

        a) Function
        b) Method
        c) Procedure

- Function refactors the code and finally returns a value.
- Method refactors the code without any return value. It is always a void type.
- Procedure is a hybrid type, which can switch between return and void.
- SQL allows a stored procedure to configure the logic and actions to perform. So that you can access and reuse from various locations.
- Procedures are required in database programming to reduce "Injection Attacks".
- SQL Injection is the process of allowing queries to input and execute directly from client. It is not safe always.

Configuring Stored Procedure:
- Stored procedure can have multiple sets of statements to execute.
- Hence it requires a DELIMETER  to separate the statements.
- The default DELIMETER is "$$".
- MySQL stored procedure configuration starts & end with a DELIMETER.

Syntax:
     DELIMITER $$        => start
     

     DELIMITER             => end

- Procedure must be inside the delimiter scope.
- Procedure can created by using "create" command.

Syntax:
       DELIMITER $$

          CREATE  PROCEDURE   procedure_name()
          BEGIN
             .... statements...
          END$$

      DELIMITER

- Procedure comprises of 3 basic elements in configuration

    a) Declaration
    b) Signature
    c) Definition

- Declaration is used to configure a procedure.
- Signature is required to call the procedure.
- Definition specifies the functionality. [actions to be performed]

    create procedure sp_name()            => Declaration
    sp_name()                        => Signature
    beign.... end                        => Definition

Ex:
1. Create a procedure


DELIMITER $$

 create procedure GetHighRatedProducts()

  BEGIN
      select * from tblproducts where Rating>=5;
  END$$
 
DELIMITER

2. Select the statements and execute in order to create and save procedure by name
    "GetHighRatedProducts"

3. You can call and run the procedure from any location

    call GetHighRatedProducts();

Parameters in Stored Procedure:
--------------------------------------------

- Procedure can be parameterized or parameter less.
- Parameter is used to modify the procedure.
- It allows to change according state and situation.
- MySQL parameters are categorized into 3 types

    a) IN
    b) OUT
    c) INOUT

- "IN" parameter will not allow to change value in side procedure.
-  It keeps the value as constant.

Syntax:
    create procedure sp_name(IN param  datatype)
    begin
        ... you can use parameter

    end$$

Ex: IN Parameter

DELIMITER $$

  create procedure GetByCategory(IN categoryName varchar(30))
  begin
      select * from tblproducts where Category=categoryName;
  end$$
 
DELIMITER

- Every parameter is a required parameter.
- The parameter defined in declaration is known as "Formal Parameter".
- The parameter defined in call is known as "Actual Parameter".

Syntax:    
     call  sp_name(value);            // actual parameter

    create sp_name(IN categoryName varchar(20))       // formal parameter
    begin
        ....
    end$$

Ex:
     call  GetByCategory('Electronics');

25/06
=====

Stored Procedure
Parameters
    - IN
    - OUT
    - INOUT

OUT Parameter:
- It is used to emit the result of any expression inside procedure.
- It will not allow to pass a new value.
- It contains a value, which is result of any expression.
- The value may change according expression.
- It is configured by using "@reference_name".

Syntax:
     create procedure spName(out  paramName)
        Begin
         ...
        End$$
   
- It is defined with value inside procedure by using  "INTO" operator.
- INTO assigns a value into the out parameters.

Syntax:
     call spName(@paramName);    // It can't have a value.
                                   It must have only reference name.

- The operator INTO will use any expression to store result into out parameter.

Syntax:
       Begin
         select  expression  INTO  out_param ;
       End$$

- You can print the value of out parameter using "select".

Syntax:
       select @out_param;

Ex:
1. Create a procedure with out parameter

DELIMITER $$

 create procedure GetAvgPrice(out avgprice int)
 begin
    select avg(Price) into avgprice from tblproducts;
 end$$
 
DELIMITER

2. Execute to save the procedure

3. Call the procedure with reference of out parameter.
   
4. Select the out parameter to view result
   
    call  GetAvgPrice(@avgprice);
    select @avgprice;

Ex:

DELIMITER $$

 create procedure GetAvgPrice(in category varchar(20), out avgprice int)
 begin
    select avg(Price) into avgprice from tblproducts where Category=category;
 end$$
 
DELIMITER

call GetAvgPrice('Fashion',@avgprice);
select @avgprice as 'Average Price';
                   
Query:  Create a procedure to search products by rating above specified value, and get the count of products that match the condition.

            GetProductsCount(4, @count); // must return how many products are
                                           having rating above 4
            GetProductsCount(3, @count);



                        Variables in Procedure
- Variables are storage locations in memory, where you can store a value and use it as a part of any expression.
- SQL allows to configure variables inside procedure in order to store values and use with in the scope of procedure.
- Variables are defined by using  "DECLARE" keyword.

Syntax:
            DECLARE   variable_name  datatype;

- Variable configuration have 3 phases.

    a) Declaring
    b) Assignment
    c) Initialization

- Declaring comprises of variable name and type

     DECLARE  total int;

- You can assign into variable by using "SET" operator

     SET  total = 200;

- You can initialize into variable by using "DEFAULT".

    DECLARE total int  DEFAULT 10;
Ex:

DELIMITER $$

 create procedure AvgPrice(out result int)
 begin
     
      declare avgprice int default 0;
     
      select avg(Price) into avgprice from tblproducts;
     
      set result = avgprice;
     
 end$$
 
DELIMITER

call  AvgPrice(@result);
select @result;

Conditional Statements:
- You can use "IF" and "CASE" for conditions.
- A stored procedure can configure statements to handle complex operations.

Syntax:
     If  condition  then
       statements;
    elseif  condition then
       statements;
    else
       statements;
    end if;

Query: Create a procedure GetReview()
        It gets specific product review based on Id.

        GetReview(in id int, out review varchar(20))
        begin

           variable msg;   // it must store review message
           variable rating;

           if rating >=5   => good
           if rating = 4    => average
           if rating <4     => poor

           store msg in @review;

           print @review;



Ex:

DELIMITER $$

 create procedure GetReview(in id int, out review varchar(20))
 
 begin
      declare rate int default 0;
      declare msg varchar(20);
     
      select Rating into rate from tblproducts where ProductId=id;
     
      if rate>=5 then
        set msg = 'Good';
      elseif rate=4 then
        set msg='Average';
      elseif rate<4 then
        set msg = 'Poor';
     end if;
     
     set review = msg;
   
 end$$
 
DELIMITER

26/06
======

Ex:

DELIMITER $$

 create procedure GetReview(in id int, out review varchar(20))
 
 begin
      declare rate int default 0;
      declare msg varchar(20);
     
      select Rating into rate from tblproducts where ProductId=id;
     
      if rate>=5 then
        set msg = 'Good';
      elseif rate=4 then
        set msg='Average';
      elseif rate<4 then
        set msg = 'Poor';
     end if;
     
     set review = msg;
   
 end$$
 
DELIMITER

call GetReview(1, @review);
select @review;

Summary:
- Stored Procedure
- Params [ In, Out]
- Variables
- Statements

                             SQL Joins
- Joins are used to compare values from two different tables.
- You can compare data in tables by creating a Join.
- Joins are categorized in to various types
    a) Inner Join
    b) Left Join
    c) Right Join
    d) Cross Join

- Join is used to match data from left and right tables and return result according to the JOIN type defined.

- It uses a select query to fetch data from multiple tables and create a join.

Syntax:
    SELECT  fields_form_both_tables AS alias_name from  LEFT_TABLE  
    JOIN_TYPE  RIGHT_TABLE   ON  matching_query;


    Inner Join        : It finds and returns only the matching data in both tables.

    Left  Join            : It returns all records of left table, and all records of right
                      table. However it set null into the right table if relative
                      left table content is not found.

    Right Join        : It returns all records of right table and set null into left
                      table if matching data is not found.

    Cross Join        : It sets null in both tables when matching data is not found.

Syntax:
1. Create 2 tables

    allvendors
   
        VendorId        VendorName
        1            Bajaj
        2            Reliance
        3            Chroma    
        4.             BigC

     hydvendors

        VendorId        VendorName
        1            Chroma
        2            Bajaj

2. Write the query

SELECT allvendors.VendorId, allvendors.VendorName AS 'All Vendors',

hydvendors.VendorId, hydvendors.VendorName AS 'Hyd Vendors' FROM

allvendors INNER JOIN hydvendors ON

allvendors.VendorName=hydvendors.VendorName;


                         SQL Views
- View is a virtual table
- It can query content and save the result in the form a virtual table.
- You can access and use the virtual table.
- However your can't modify the data in view.
- It is automatically updated from the physical the tables.

Syntax:    
    create  view   view_name  as query;

- You can access the data from view using select command

Syntax:
    select  * from  view_name;

Ex:
create view electronic_products as select * from tblproducts where Category='Electronics';

create view high_rated_products as select * from tblproducts where Rating >= 4;






Summary:
 MongoDB
 MySQL
                              Node JS

FAQ: What is server side scripting?
Ans:  Server side scripting is a technique where scripts are employed on server in order
      to generate a response customized to every client request.

     There are various server side scripting technologies like:
        - CGI
        - ASP
        - JSP
        - PHP
        - NODE
        etc.

FAQ: What is Node JS?
Ans:  It is a JavaScript runtime for developers to build  web applications, servers,
     command line tools and scripts.

Features of Node JS:
- It is open source.
- It is cross platform.
- It uses JavaScript runtime.
- It is single threaded.
- No buffering
- Modular
- Async

27/06
======

What is Node JS?
Node JS Features

- Node JS uses JavaScript as its language.
- JavaScript is used with only language features.
- You can't use DOM & BOM methods.

    * Variables
    * Data Types
    * Operators
    * Statements
    * Functions
    * OOP Concepts
        - Modules
        - Classes

- Server Side Programming is all about handling various types of objects & techniques.
- Server Side Objects include
        a) request
        b) response
        c) session
        d) application
        e) cookie     etc..
- Server Side Techniques include
        a) Caching
        b) Routing
        c) Model Binding
        e) Data Binding
        f) Event Binding etc.

Creating a server side application using Node JS:

1. Create a new folder on your PC for server application

      D:\server-app

2. Open folder in VS code

3. Run the following commands

    > npm  init  -y                             // generates package.json

    > npm init @eslint/config@latest            // It sets up language analytics

    https://eslint.org/

    ? What do you want to lint  :  JavaScript
    ? How would you like to use ESLint : To check syntax and find problems
    ? What type of modules does your project use?  Common JS
    ? Which framework does your project use : none
    ? Does your project use TypeScript? No
    ? Where does your code run? Node
    ? Would you like to install them [configs] now? Yes
    ? Which package manager ? npm
   
    - This will generate following files into project

        eslint.config.mjs
        node_modules [folder]

4. Server side programs are written in a JavaScript file with extension ".js , .mjs, .cjs"

5. Add a new file by name "index.js" into root level of project.

                 index.js

        console.log("Welcome to Node JS");

6. Go to package.json file and setup script

"scripts": {
      ....
        "start": "node index.js"
   },

    => node  is a compiler used to compile and run JavaScript files server side.

7. Run the following command from terminal

    > npm run start


                           Node Modules
                          ---------------------
- Node JS provides several bult-in modules to handle various interactions server side.
- Module is a set of classes, functions and values.

1. Http Module
 
  - It provides a set of classes and functions that are required to create a server,
    web application and scripts.
  - You can create server, handle request from client and send a customized response
     to the client request.
  - Http Module provides  "createServer()" method to create a server.
  - Modules are imported by using "require()" method in CJS system.

Syntax:
        const  http  = require("http");

        http.createServer(function(request, response){


        })

  - Every server comprises of 2 basic objects

    a) Request
    b) Response

  - Request object is used by server to request data from client, which includes
    a) Query String
    b) Cookies
    c) Local Storage
    d) Session Storage
    e) Form Body etc.

 - Response object is used to send response to client, which includes
    a) Text
    b) HTML    
    c)  XML
    d) JSON
    e) File etc.

Ex:
  index.js

 const http = require("http");

 http.createServer(function(request, response){
       response.writeHead(200,{'content-type':'text/plain'});
       response.write("Welcome to Node Server");
       response.end();
 }).listen(4040);

 console.log(`Server Started : http://127.0.0.1:4040`);

 > npm run start

28/06
======

HTTP Module
- createServer()

Syntax:
    http.createServer(function(req, res){
        res.writeHead();
        res.write();
    })

- writeHead() uses a status code to verify the request.
- Http status codes will range from 100 to 500.

        1xx            : codes related to the process and action to execute.
        2xx            : codes related to confirmation.
        3xx            : codes related to methods & redirection.
        4xx            : codes related to client side issues.
        5xx            : codes related to server side issues.

Ex:
 index.js

 const http = require("http");

 Object.keys(http.STATUS_CODES).map(key=>{
      console.log(`${key}: ${http.STATUS_CODES[key]}`);
 })


        200 OK        : It is to confirm a successful request and send response.

- writeHead() requires content MIME type to define.  
- MIME type depends of your response type.
- Http supports various MIME types

        text/plain                plain text without formats
        text/html                HTML markup as response
        application/json        JSON format response
        application/xml        XML format response
        application/pdf        PDF file
        image/jpeg            JPEG file
        etc..

- Every server application runs on specific port number.
- Port numbers will range from 1 to 45565.

          1 to 1023            Well known port numbers.
          1024 to 41591        Registered port numbers.
           41592 to 65535    Dynamic port numbers.

- For your application always use "registered port" numbers.
- Your server application listen() on specific registered port number.

Syntax:
      http.createServer().listen(port)

- You can request application using following  methods

      http://127.0.0.1:port
            (or)
      http://localhost:port

- The response content type must be same as the MIME type defined.

        { 'content-type' :  'text/html' }

        res.write("<h2> Welcome </h2>");

Ex: HTML type data

index.js

 const http = require("http");

 http.createServer((req, res)=>{

      res.writeHead(200, { 'content-type': 'text/html' });
      res.write('<h1>Welcome to Node JS</h1>');
      res.end();
 }).listen(5000);
 console.log(`Server Started http://127.0.0.1:5000`);

Ex: JSON type

index.js

 const http = require("http");

 http.createServer((req, res)=>{

      res.writeHead(200, { 'content-type': 'application/json' });
      res.write(JSON.stringify([{Name:'TV', Price:45000},{Name:'Mobile', Price:12000}]));
      res.end();
 }).listen(5000);

 console.log(`Server Started http://127.0.0.1:5000`);

Node OS module:

- It provides a set of methods that can get information about server operating system.
- It includes details like

      hostname()        : server name
      platform            : server OS type
      freemem        : total free memory available
      cpus()            : It returns a set of objects that contains CPU details
                      like processor model, speed etc.

      etc.

Syntax:
      const  os = require("os");

      console.log(os.platform());

Ex:
index.js

const os = require("os");

console.log(`Server OS : ${os.platform()}\nServer IP: ${os.hostname()}\nFree Memory : ${os.freemem()}\nProcessor : ${os.cpus()[0].model}`);

FAQ: What is npm run start?
Ans:  It is a batch program created by developer to run a sequence of actions.
     You can terminate the batch program using "Ctrl + C".

30/06
=====

	
Process, FS, Path modules
Node Modules
1. http    
    - creating server and app
2. os
    - get OS details

3. Process Module
 - Node is single threaded.
 - It executes tasks simultaneously with background process.
 - Every task requires a process ID and other details which you can access using process module .
- Module properties include details like

        a) env    
        b) getuid
        c) getgid
        d) platform
        e) version
        f)  freeMemory etc.

Syntax:
    const process = require("process");

    process.env;
    process.getuid;

4. Path Module
- It provides a set of properties and methods used to access file location and other details.
- It includes name, extension, type, size, root directory etc.

    a) basename           : returns the file name
    b) dirname           : returns directory name
    c) extname           : returns the file extension name
    d) relative           : gets the relative path
    e) isAbsolute           : returns true if the path is not relative. [is absolute]
    etc..

Syntax:
    const  path = require("path");
    path.extname("file_path");


Ex:
index.js

const path = require("path");

var uploaded_file = "D:\\images\\photo.jpg";

if(path.extname(uploaded_file)===".jpg"){
     console.log(`File Uploaded Successfully..\nUploaded from ${path.dirname(uploaded_file)} folder`);
} else {
     console.log(`Invalid Format - You can upload only JPG files`);
}

5. File Stream [ FS ]
- It is used to handle files server side.
- It provides a set of properties and methods to read and write data into files.
- Node file stream provides both synchronous and asynchronous methods.

Syntax:
     var  fs =  require("fs");

      var data = fs.readFileSync("path");

- readFileSync()  uses a blocking technique, that blocks all other task inside process while performing the specified.

Ex: Blocking  - Synchronous

index.js

const fs = require("fs");

console.log(`File Requested`);

let data = fs.readFileSync('./notes.txt');
console.log(data.toString());

console.log(`File Read Complete`);

- readFile()  is an asynchronous method.
- It uses unblocking technique, that executes the other tasks in background.

Syntax:
    fs.readFile("path", function(error, data){
       
            if(!error) {
                // handle data
            } else {
                // report error
            }
    })

Node Techniques:

1. Event Binding

 FAQ's:

 a) What is Event?
 b) Which pattern Event follows?
 c) What is Observer?
 d) What is Event Handler?
 e) What are Event Args?
 f)  What is Event Listener?

1/07
====

Node Events

1. What is Event?
A. Event is a message sent by sender to its subscriber in order to notify change.
     It uses a communication pattern called "Observer".


2. What is design pattern?
A. Design patterns are solutions for software design problems that you encounter in real world application development.
     Design patterns are categorized into 3 groups.
   
    a) Creational
    b) Structural
    c) Behavioral

      Note: Observer is a behavioral pattern.

3. What is the role of sender and subscriber?
A. Sender uses a trigger to send notification.  
    Subscriber is a function that executes when notified.

           
        function  InsertClick()            => Subscriber
        {
        }

        <button onclick="InsertClick()">    => Sender

4. What is Event handler?
A. Event handler comprises of event, which is registered for any element.
     It uses a "Delegate" mechanism, which is a function pointer mechanism.

    "on"        : registers event for element
    "click"    : refers to event name.

     Every event requires a function pointer, which is a subscriber.


5. What is Event Listener?
A. Event listener registers an event with element dynamically.
     It can use a function as trigger. So that it can perform the specified functionality.
     You can add events dynamically by using the method "addEventListener".


Custom Events:
- Node JS allows to create a new event for custom components.
- The base class for events is "EventEmitter".
- All events are derived from "EventEmitter" base.
- You can create a new custom event by inheriting EventEmitter.

1. You have to import events module

    const events = require("events");

2. Create a new object for EventEmitter class.

    let event = new events.EventEmitter();


3. Create a new event and subscribe to any function

     event.on("event_name", function_name);


4. Event triggers by using  "emit()" method.

     event.emit(event_name);

Note: Emit requires registered event name that triggers specified functionality.
      It can use both handler and listener.

      a) handler uses "on()"
      b) listener uses "addEventListener()"

Ex:
index.js

const events = require("events");

let event = new events.EventEmitter();

let handleSend = function(){
     console.log(`Message Sent Successfully..`);
}

let handleGet = function(){
     console.log([{Name:'TV', Price:2300}, {Name:'Mobile', Price:1200}]);
}

event.on("send", handleSend);
event.on("get", handleGet);
event.emit("send");
event.emit("get");

Ex:
index.js
const events = require("events");

let event = new events.EventEmitter();

let handleSend = function(){
    console.log(`Message Sent Successfully..`);
}


event.addListener("send", handleSend).emit("send");


FAQ: What is difference between event and event handler?
Ans:  Event is dynamically configured using listener.
     Handler is statically configured using "on()" method.

Note: Server Side events are configured using "EventEmitter".


FAQ: What is Event Loop?
Ans:  It allows to execute the actions configured for events using async technique.


                             Caching

2/07
====

Caching
- Caching a technique used in web applications to save round trip.
- Round trip is the process of accessing requested data always from server.
- You can cache and save data in memory so that the requested data will be delivered from memory.
- It reduces burden on server and improves performance of application.
- Caching can be configured using various techniques

    1. In memory cache
    2. Distributed cache [redis]
    3. File Based caching

In memory cache:
- It uses a local cache library to save the data and use across requests.
- It is configured to access within application.
- It usually caches the data from API requests in order save round trip.
- It requires a "node-cache" library.

        https://www.npmjs.com/

1. Install node-cache

    > npm  install  node-cache --save

2. Import node-cache

    const  nodeCache = require("node-cache");
   
3. Create an object for node-cache

    let  cache = new nodeCache();

4. Store your data into cache

    cache.set("key", data, { options } )        

    options refers to TTL. [Time-To-Live]

5. You can access the cache by using the reference of key

    cache.get("key")

6. If cache is removed then it returns "undefined".

Syntax:
        if(cache.get("key"))
        {
            // cache exists;
        }
        else
        {
           // cache cleared;
        }

7. You can manually clear the cache

        cache.del("key");

Ex:
index.js

const nodeCache = require("node-cache");

let cache = new nodeCache();

cache.set('product', {Name:'tv', Price:23300}, 20);
var now = new Date();

if(cache.get('product')){
    console.log(cache.get('product'));
    console.log(now.toLocaleTimeString());
} else {
    console.log(`Unable to find the data - Cache deleted`);
}

function GetData(){
    if(cache.get('product')){
    console.log(cache.get('product'));
    console.log(now.toLocaleTimeString());
    } else {
        console.log(`Unable to find the data - Cache deleted`);
    }
}

setTimeout(GetData,25000);


                    Database Drivers in Node JS
- Driver is a software library.
- It is a middleware library used to handle communication between the application and backend database.
- Every database requires relative driver library.

MongoDB Drivers:
- It provides a set of classes responsible for handling communication between application and MongoDB database.
- It comprises of both server and client classes.
- Server class connects with database modify the structure.
- Client class connects with database to interact with the data. It handles CRUD operations.

1. Install MongoDB driver

        >npm install  mongodb --save

2. Import MongoClient class

    const  mongoClient  = require("mongodb").MongoClient;

3. Client class provides a connect method to connect with database.

    mongoClient.connect("url").then().catch().finally();

    mongoClient.connect(url, function(err, obj){        // old technique - deprecated
           err => on reject
           obj => on resolve
    })

    URL refers to MongoDB connection string :  mongodb://127.0.0.1:27017

Ex:
index.js

const mongoClient = require("mongodb").MongoClient;

mongoClient.connect("mongodb://127.0.0.1:27017").then(()=>{
    console.log('Connected Successfully..');
})
.catch(err=>{
    console.log(err);
})
.finally(()=>{
    console.log("Request End");
})

3/07
=====

MongoDB Drivers

connect()  :

    - It uses a connection string to connect with database server.
    - MongoDB connection string  is "mongodb://127.0.0.1:27017"    
    - connect() is a JavaScript promise type. It provides then() on resolve, catch() or reject and finally() always.
    - then() returns a client object, which can connect with specific database in server.

Syntax:
        mongoClient.connect("url").then(function(clientObj){
           
                // clientObj  uses  "db" to access any database.
        })


    - Database requires a reference to load into memory and access the collections.

Syntax:
        var database = clientObj.db("database_name");

        database.collection("collection_name").find()
                                        .insertOne()
                                        .updateOne()            
                                        .deleteOne()

Reading Data From Database:

- MongoDB client object can access database and collection.

    var database = clientObj.db("database_name");

    database.collection("collection_name")

- To read data from collection you can use the methods

    a) find()            : returns an array
    b) findOne()        : returns only the first occurrence document that matches
                      given condition.


Syntax:
    database.collection("name").find({query}).toArray().then(documents=>{

        console.log(documents);        // [ { }, { } ]

    })

    database.collection("name").findOne({query}).then(document => {

         console.log(document);            // { }
    })

Ex:
index.js

const http = require("http");
const mongoClient = require("mongodb").MongoClient;

http.createServer((request, response)=>{
     response.writeHead(200, { 'content-type': 'application/json'});
     mongoClient.connect("mongodb://127.0.0.1:27017").then(clientObj=>{
        var database =  clientObj.db("sampledb");
        database.collection("fakestore").findOne({id:3}).then(document=>{
             response.write(JSON.stringify(document));
             response.end();
        })
      });
}).listen(5200);
console.log(`Server Started http://127.0.0.1:5200`);

Inserting data:
 - You can use the database methods

    a) insertOne()
    b) insertMany()

Syntax:
    database.collection("name").insertOne({data}).then().catch().finally()

Ex:
const mongoClient = require("mongodb").MongoClient;

mongoClient.connect("mongodb://127.0.0.1:27017").then(clientObj=>{

    var database = clientObj.db("sampledb");

    var product = {
        name: "Watch",
        price: 5000,
        manufactured: new Date('2025-02-11')
    }

    database.collection("products").insertOne(product).then(()=>{
         console.log(`Product Added successfully..`);
    });
})

Updating Data:
 - You can update data into collection by using database update methods

    a) updateOne()
    b) updateMany()

Ex:
index.js

const mongoClient = require("mongodb").MongoClient;

mongoClient.connect("mongodb://127.0.0.1:27017").then(clientObj=>{

    var database = clientObj.db("sampledb");

    var product = {
        name: "Fastrack Watch",
        price: 4500,
        manufactured: new Date('2025-02-22')
    }

    database.collection("products").updateOne({name:"Watch"},{$set:product}).then(()=>{
         console.log(`Product Updated successfully..`);
    });
})

Delete Documents:
- You can use database delete methods
   
    a) deleteOne()
    b) deleteMany()

Ex:
index.js

const mongoClient = require("mongodb").MongoClient;

mongoClient.connect("mongodb://127.0.0.1:27017").then(clientObj=>{

    var database = clientObj.db("sampledb");


    database.collection("products").deleteOne({name:"Mobile"}).then(()=>{
         console.log(`Product Deleted successfully..`);
    });
})

                          MySQL Drivers

- MySQL drivers will provide a set of properties and methods that are used to handle communication with 'MySQL database'.

1. Install MySQL Drivers

    > npm install  MySQL --save

2. Import MySQL library and create Connection

    const  mysql  = require("mysql");

    const connection = mysql.createConnection({
         host : "localhost",
         user: "root",
         password: "12345",
         database: "db"
    });
    connection.connect();
    connection.query("select query", (error, records, fields)=>{

    })

Ex:
index.js


const mysql = require("mysql");

var connection = mysql.createConnection({
     host: "localhost",
     user: "root",
     password: "12345",
     database: "sampledb"
});
connection.connect((err)=>{
      if(!err){
          console.log("Connected");
      } else {
          console.log(err);
      }
})
connection.query("select * from tblproducts",(err, records, fields)=>{
     if(!err){
         console.log(records);
     }
})



                        Express JS

4/07
====

Node JS
- Node Modules
    http
    path
    process
    fs
    os
- Event Driven
    custom events
- Caching

                              Express JS
- It is a middleware framework.
- Middleware is a software that enable communication in network based applications.
- It is a JavaScript based framework.
- Framework is an software architectural pattern that allows to build the application and control application flow.

1. Install express JS

    > npm install express --save

2. Import express module

     const express = require("express");

3. Create an app using express

      const  app = express();

4. Configure the requests from client

      app.get()        for fetching
      app.post()        for submit and save
      app.put()        for update and save
      app.delete()        for removing

Syntax:
    app.get("/path", function(request, response){

    });

    request     : It a server object that can request client data from
              query string, form body, cookies etc.

    response    : It is a sever object that can send response to client, which can be
              html, text, file, xml, json etc.

Syntax:
        request.params
        request.body
        response.send()
        response.redirect()
        response.end() etc..

5. Start application using "listen()" method

        app.listen(port);


                        Routing in Express JS
- Routing a technique used in web applications to enable navigation.
- Routing can be configured both client and server side.
- Client side routes enable navigation in client side application.
- Server side routes are required to handle navigation in API server side.
- Routes are configures for various HTTP methods like

        GET
        POST
        PUT
        PATCH
        DELETE
        PURGE etc.
- Route comprises of a path defined with request and response.

Syntax:
        app.get("/path", (request, response) =>{})

        "/"             will respond when user request is not for any specific.
        "/name"         will respond only to specified name.
        "*"             will respond when requested path is not found. [only v4]

        > npm install  express@4

05/07
======

API
Express 5

Note: Express 5 deprecated the wild card routes with "*". It uses new status method.

        "/"         request is not for any specific
        "*"         for not found up to version 4.

      Express 5 not found is configured using  response object.

        app.use((req, res)=>{
            res.status(404, "content_to_render");        // Synchronous
        })

        app.use((req, res)=>{
            res.status(404).write("content to render");    // Asynchronous
            res.end();
        })

Ex:
index.js

const express = require("express");

const app = express();

app.get("/", (request, response)=>{
     response.send("<h2>Welcome to Express JS </h2>");
     response.end();
});

app.get("/categories", (req, res)=>{
      res.send(['Electronics', 'Fashion', 'Footwear']);
      res.end();
});



app.use((req, res)=>{
    res.status(404).write("Not Found : Path you request not found");
    res.end();
})

app.listen(4040);
console.log(`http://127.0.0.1:4040`);

- You can use regular expression in route path. The regular expression up to version 4 uses a pattern with meta characters and quantifiers.

        app.get("/colou?r", (req, res)=>{        

        })

        /color        
        /colour

- Express version 5 removed the chars  "?, *, +, [ ], ( )".
- It supports a binding expression to render view [UI].

Syntax:
        app.get(`/path{expression}`, (req, res)=>{

        })

                                    API
                   (Application Programming Interface)

1. What is distributed computing?
A. Distributed computing allows communication between two applications running on
     two different machines.
     It also allows communication between two different objects running in two different
     process of same machine.

2. Various distributed computing technologies
    - CORBA        Common Object Request Broken Architecture   14+ languages
    - DCOM        Distributed Component Object Model               Visual Basic
    - RMI        Remote Method Invocation                        J2EE
    - EJB        Enterprise Java Beans                        Java
    - Web Service     [W3C]                                    All technologies
    - Remoting                                            .NET

3. Communication Specification in Distributed Architecture

    - SOAP
    - REST
    - JSON

    SOAP
    - It is Service Oriented Architecture Protocol
    - Consumer will make XML request
    - Provider sends XML response

        Request:
            <Products>
                 <Product>
                   <Category> Electronics </Category>
                 </Product>
            </Products>
       
        Response
            <Products>
                <Product>
                    <Id>1</Id>
                    <Name>TV</Name>
                    <Category>Electronics</Category>
                </Product>
                ...
                ...
            </Products>

      REST
      - Representational State Transfer
      - Consumer sends a simple query request.
      - Provider sends an XML response or JSON response.

          Request:
              http://server.com?category=electronics
              http://server.com/electronics

        Response:
              [
                {
                Id: 1,
                Name: "TV",
                Category: "Electronics"
                 }
                  ...
               ]

    JSON
    - JavaScript Object Notation
    - Request in JSON
    - Response in JSON

4. Issues with Web Services    
   
    - It runs only on HTTP protocol
    - It runs only on Web Server
    - It uses SOAP for communication
    - Request in XML & Response XML

5. Web API  
    - Application Programming Interface
    - It is an alternative for web service.
    - It can use any protocol.
    - It can run on any server.
    - It uses REST full service.
    - JSON response.


                         Building API to handle CRUD

7/07
=====

What is API
API Technologies
Communication Specification
    - SOAP
    - REST
    - JSON
Issues with Web Service
API Features

                         Express JS API
- Express provides various methods for handling request and response.
- The request methods include
   
        GET            for fetching
        POST        for saving
        PUT            for modifying and updating
        PATCH        for partial update
        DELETE        for removing

- Express requires CORS library to restrict the methods.
- CORS is Cross Origin Resource Sharing, that allows to enable or disable specific request method.
- Express requires a "body-parser" to convert the incoming data.
- Express latest versions are supported with a body-parser implicitly.

Syntax:
      const app = express();
   
      app.use(cors());
      app.use(express.urlencoded({extended : true});   // body-parser middleware

- GET method can fetch data using request object.
- Request is fetching client data from
    a) Query String  
    b) Form Body

- GET request can accept route parameters instead of query string, which allows to query the data.

Syntax:
        app.get("/path/:param1/:param2..", (req, res)=>{

        })

- Parameters are accessed by using "request" object "params" property.

        req.params.param1    
        req.params.param2

- Parameters are passed in URL

        http://server.com/path/value1/value2

        param1 = value1
        param2 = value2

Ex:
const express = require("express");
const cors = require("cors");

const connectionString = "mongodb://127.0.0.1:27017";

const app = express();
app.use(cors());

// required for POST, PUT, DELETE
app.use(express.urlencoded({extended:true}));
app.use(express.json());

app.get('/products', (req, res)=>{
    res.send("GET - Products");
    res.end();
});

app.get('/details/:id/:name/:price', (req, res)=>{
     res.send(`Id=${req.params.id}<br>Name=${req.params.name}<br>Price=${req.params.price}`);
     res.end();
});

app.use((req, res)=>{
    res.status(404).write("Not Found");
    res.end();
});

app.listen(8080);
console.log(`Server Started : http://127.0.0.1:8080`);


- To test all API methods you need a Web Debugger like "Postman", "Fiddler", "Swagger" etc.

Ex:
index.js

const express = require("express");
const cors = require("cors");
const mongoClient = require("mongodb").MongoClient;

const connectionString = "mongodb://127.0.0.1:27017";

const app = express();
app.use(cors());

// required for POST, PUT, DELETE
app.use(express.urlencoded({extended:true}));
app.use(express.json());

app.get('/', (req, res)=>{
    res.send("API - CRUD");
    res.end();
})

app.get('/products', (req, res)=>{
    mongoClient.connect(connectionString).then(clientObj=>{
         var database = clientObj.db('api-data');
         database.collection('products').find({}).toArray().then(documents=>{
              res.send(documents);
              res.end();
         })
    })
});

app.get('/product/:id', (req, res)=>{
   
      mongoClient.connect(connectionString).then(clientObj =>{

            var database = clientObj.db('api-data');
            database.collection('products').findOne({id:parseInt(req.params.id)}).then(document=>{
                 res.send(document);
                 res.end();
            });
      });
});

app.post('/add-product', (req, res)=>{
     var product = {
          id: parseInt(req.body.id),
          title: req.body.title,
          price: parseInt(req.body.price),
          stock: (req.body.stock==="true")?true:false
     }
     mongoClient.connect(connectionString).then(clientObj=>{
          var database = clientObj.db("api-data");
          database.collection('products').insertOne(product).then(()=>{
              res.redirect('/products');
          })
     })
});

app.put('/update-product/:id', (req, res)=>{
    var product = {
          id: parseInt(req.body.id),
          title: req.body.title,
          price: parseInt(req.body.price),
          stock: (req.body.stock==="true")?true:false
     }
     mongoClient.connect(connectionString).then(clientObj=>{
          var database = clientObj.db("api-data");
          database.collection('products').updateOne({id:parseInt(req.params.id)},{$set:product}).then(()=>{
             res.redirect('/products');
          })
     })
});

app.delete('/delete-product/:id', (req, res)=>{
    mongoClient.connect(connectionString).then(clientObj =>{

            var database = clientObj.db('api-data');
            database.collection('products').deleteOne({id:parseInt(req.params.id)})
            .then(()=>{
                 res.redirect('/products');
            });
      });
});

app.use((req, res)=>{
    res.status(404).write("Not Found");
    res.end();
});

app.listen(8080);
console.log(`Server Started : http://127.0.0.1:8080`);


2. index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            fetch('http://127.0.0.1:8080/products')
            .then(res=>res.json())
            .then(products=>{
                 products.map(product=>{
                    var tr = document.createElement("tr");
                    var tdTitle = document.createElement("td");
                    var tdPrice = document.createElement("td");
                    var tdStock = document.createElement("td");
                    tdTitle.innerHTML = product.title;
                    tdPrice.innerHTML = product.price;
                    tdStock.innerHTML = (product.stock===true)?"Available":"Out of Stock";
                    tr.appendChild(tdTitle);
                    tr.appendChild(tdPrice);
                    tr.appendChild(tdStock);
                    document.querySelector("tbody").appendChild(tr);
                 })
            })
        }
    </script>
</head>
<body onload="bodyload()">
    <table border="1" width="100%">
        <thead>
            <tr>
                <th>Title</th>
                <th>Price</th>
                <th>Stock</th>
            </tr>
        </thead>
        <tbody>

        </tbody>
    </table>
</body>
</html>

                                jQuery

08/07
======

API
API Routes
Request & Response Types

                            jQuery

- It is a JavaScript library used for handling BOM & DOM interactions.
- "John Resign" introduced jQuery library in early 2006.
- The main intention is "Write-Less Do-More".
- jQuery introduces various built-in functions that make the logic compatible across multiple browsers.
- It reduces browser compatibility issues.

1. Install jQuery for project

        > npm  install jquery --save

2. Link the jQuery library file to your web page

    <script src="./node_modules/jquery/dist/jquery.js">  </script>

3. All jQuery functions are defined in any anonymous function, which is invoked using
     "$()" [IIFE]

Syntax:
        <script>
            $(function(){
                // your jQuery logic here..
            })
        </script>

4. jQuery uses JavaScript as language, you can use all language features same as in JavaScript
        - Variables
        - Data Types
        - Operators
        - Statements
        - Functions
        - Classes
        - Modules etc.

jQuery Reference techniques:

- jQuery uses all CSS selectors for referring HTML elements.
- It includes type, class, id, relational, structural, attribute etc.

Syntax:
        <img>
        <p id="para">
        <button class="btn">

        $("img")
        $("#para")
        $(".btn")
        $("nav+div")

jQuery DOM methods:

        text()        textContent
        html()        innerHTML
        val()            value
        attr()            attribute
        prop()        property
        append()        add as suffix
        prepend()     add as prefix
        appendTo()    add to specific as suffix
        prependTo()    add to specific as prefix
        before()        add left or above
        after()        add right or below
        class()        apply CSS class
        etc..

Syntax:
        $("h1").text("some text")
        $("p").html("<> markup </>")
        $("div").append("<element>");
        $("<element>").appendTo("div");

        $("#txtName").val("John")        <input type="text" id="txtName">
       
        var selectedCity = $("select").val();

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
              $("h1").text("jQuery");
              $("#p1").html("<b><i>Write Less Do More</b></i>");
              $(".msg").text("It is a JavaScript library.");
              $(".msg").after("<button>Click Me</button>");
              $("<button>Print</button>").appendTo("#p1");
        })
    </script>
</head>
<body>
    <h1></h1>
    <p id="p1"></p>
    <div class="msg"></div>
</body>
</html>

Note: All element related attributes are not accessible directly using jQuery methods.
     You have to use "attr()" for accessing attributes.

      Syntax:
        $("img").src();                // invalid - src is not an jQuery method
        $("img").attr("src", "path");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(function(){
              $("img").attr("src", "./images/women-fashion.jpg");
        })
    </script>
</head>
<body>
    <img width="100" height="100">
</body>
</html>

Presenting Complex Data:
- Complex data includes Array & Object type.
- jQuery uses DOM methods to access and present complex data.
- It avoids creating every elements explicitly.

Syntax:
     data.map(item =>{

        $(`<div>${item}</div>`).appendTo("parent")
   
    })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Fashion"];

        $(function(){
           
            categories.map(category=>{
                 $(`<li>${category}</li>`).appendTo("ol");
                 $(`<option>${category}</option>`).appendTo("select");
                 $(`<tr><td>${category}</td></tr>`).appendTo("tbody");
            })

        })
    </script>
</head>
<body>
    <div>
        <ol></ol>
    </div>
    <br><br>
    <div>
        <select></select>
    </div>
    <br><br>
    <div>
        <table border="1" width="150">
            <thead>
                <tr>
                    <th>Categories</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
    </div>
</body>
</html>








Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
       

        $(function(){
           
            fetch(`https://fakestoreapi.com/products/categories`)
            .then(response=> response.json())
            .then(categories =>{
                 categories.map(category=>{
                 $(`<li>${category}</li>`).appendTo("ol");
                 $(`<option>${category}</option>`).appendTo("select");
                 $(`<tr><td>${category}</td></tr>`).appendTo("tbody");
                })
            })

        })
    </script>
</head>
<body>
    <div>
        <ol></ol>
    </div>
    <br><br>
    <div>
        <select></select>
    </div>
    <br><br>
    <div>
        <table border="1" width="150">
            <thead>
                <tr>
                    <th>Categories</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
    </div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
       

        $(function(){
           
            fetch(`https://fakestoreapi.com/products`)
            .then(res => res.json())
            .then(products =>{

                    products.map(product=>{
                         $(`<tr>
                              <td>${product.title}</td>
                              <td><img width="100" height="100" src=${product.image}></td>
                              <td>${product.price}</td>
                              <td>${product.rating.rate}</td>
                            </tr>`).appendTo("tbody");
                    })

            })

        })
    </script>
</head>
<body>
   
    <div>
        <table border="1" width="100%">
            <thead>
                <tr>
                    <th width="300">Title</th>
                    <th>Preview</th>
                    <th>Price</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
    </div>
</body>
</html>

09/07
======

jQuery Reference
jQuery DOM methods

                        jQuery Events
- jQuery use event listeners.
- It is provides a clean separation of design and logic

Syntax:
        <button></button>

         $("button").click(()=>{
            // actions on click
        })

- It provides "event" argument that can access element and event details.

        $("button").click((e)=>{
            e.clientX;
            e.clientY;
            e.keyCode;
            e.ctrlKey;
            e.target.id
            e.target.name
            e.target.value                
        })


    ${ }            Data Binding Expression
    $()            jQuery library invoking to access jQuery methods

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
         $(()=>{
             
                $("#btnInsert").click((e)=>{
                      console.log(`
                            X Position : ${e.clientX}\n
                            Button Value: ${e.target.value}
                      `);
                })

                $("#txtName").keyup(()=>{
                    $("h2").html(`Hello ! ${$("#txtName").val()}`);
                })

         })
    </script>
</head>
<body>
    <button name="Btn-Insert"  value="Insert" id="btnInsert"> Insert </button>
    <div>
        <input type="text" id="txtName">
    </div>
    <h2></h2>
</body>
</html>

Note: You can't define events directly for any element if it is inside a hierarchy of
      elements.

      You have to search for element in page using  "$(document).on()" method.
      And configure event dynamically.

Syntax:
       $(document).on("eventName", "elementRef", (e)=>{

      })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="./node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>

        var products = ["Television", "Mobile", "Watch"];

         $(()=>{
             
            products.map(product=>{
                  $(`
                     <div class="card p-2 m-2" style="width:200px">
                        <div class="card-header"> ${product} </div>
                        <div class="card-footer">
                            <button id="btnAdd" class="btn btn-primary w-100 bi bi-cart4"> Add to Cart</button>
                        </div>
                     </div>
                  `).appendTo("body");
            });

            $(document).on("click", "#btnAdd", ()=>{
                 console.log('Add Clicked');
            })
               
         })
    </script>
</head>
<body class="container-fluid">
   
</body>
</html>

                             jQuery Ajax
- JavaScript Ajax methods
    a) XMLHttpRequest
    b) fetch()
- jQuery Ajax methods
   
    $.ajax()
    $.getJSON()
      .ajaxStart()
      .ajaxStop()
      .ajaxSuccess()
      .ajaxComplete()
      .ajaxError()
    etc..

Features:
- It is async by default.
- It returns the data in its native format.
- Conversion of data not required.
- It provides various life cycle methods that track all performance across requests.
- It is good in error handling.

Issues:
- It is not good in handling XSRF, XSS.
- XSS is Cross Site Scripting Attacks.
- XSRF is Cross Site Request Forgery
- It is not good in security.
- It have CORS issues.

Syntax:
        $.ajax({
            method : "get | post | put | delete..",
            url: "path",
            data: "data_to_submit_on_post, put",
            success: (response)=>{  response_data },
            error: (err)=>{ error details }
        })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(()=>{

                var now = new Date();
                $("p").html(`Page Loaded on : ${now.toLocaleTimeString()}`);

                $("button").click(()=>{

                      $.ajax({
                         method: "get",
                         url: "./notes.txt",
                         success: (data)=>{
                              $("#notes").html(data);
                         }
                      })

                })

        })
    </script>
</head>
<body>
    <p></p>
    <button>Load Help</button>
    <br>
    <pre id="notes">

    </pre>
</body>
</html>

Ajax Life Cycle Methods:

     ajaxStart() => ajaxSuccess() => ajaxComplete()  => ajaxError() => ajaxStop()

  - You can catch the error details using jQueryXHR

Syntax:
        .ajaxError((e, jXHR)=>{

                jXHR.status;
                jXHR.statusText;

        })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script>
        $(()=>{

                var now = new Date();
                $("p").html(`Page Loaded on : ${now.toLocaleTimeString()}`);

                $("button").click(()=>{

                      $.ajax({
                         method: "get",
                         url: "./note.txt",
                         success: (data)=>{
                              $("#notes").html(data);
                         }
                      })
                })
        })
        .ajaxStart(()=>{
              alert('Your request initiated..');
        })
         .ajaxSuccess(()=>{
            alert('Your request successfully sent to server.');
        })
        .ajaxComplete(()=>{
             alert('Your request Processed Succefully..');
        })
        .ajaxStop(()=>{
            alert('Your request completed and response ready');
        })
        .ajaxError((e, jXHR)=>{
            alert(`${jXHR.status} : ${jXHR.statusText}`);
        })
    </script>
</head>
<body>
    <p></p>
    <button>Load Help</button>
    <br>
    <pre id="notes">

    </pre>
</body>
</html>

Ex: Weather API

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <script src="./node_modules/jquery/dist/jquery.js"></script>
     <script>
          $(()=>{
               

                $("button").click(()=>{

                        var API_ID = "1318ca6725c69160d346c41fc0612596";
                        var API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${$("#txtCity").val()}&appid=${API_ID}&units=metric`;

                        $.ajax({
                            method: 'get',
                            url: API_URL,
                            success: (weatherObj)=>{
                                 $("#lblCity").text(weatherObj.name);
                                 $("#lblTemp").text(weatherObj.main.temp);
                            }
                        })

                })

          })
     </script>
</head>
<body>
     <div>
        <input type="text" id="txtCity"> <button>Get Weather</button>
     </div>
     <br><br>
     <div>
        <dl>
            <dt>City</dt>
            <dd id="lblCity"></dd>
            <dt>Temp</dt>
            <dd id="lblTemp"></dd>
        </dl>
     </div>
</body>
</html>

10/07
======

	
jQuery UI and Plugins
jQuery UI
- It provides UI components for better UI design.
- You can rapidly build interactive UI.
- It provides
    a) Effects
    b) Interactions
    c) Widgets

1. Download jQuery UI core library
    https://jqueryui.com/

2. Download "Stable" version

3. Extract the ZIP folder => Copy all files from folder

4. Go to your project => Add a new folder  "jquery-ui"

5. Paste all copied library files

6. Link the following files

    <script src="./node_modules/jquery/dist/jquery.js"> </script>
    <script src="./jquery-ui/jquery-ui.js"> </script>
    <link rel="stylesheet" href="./jquery-ui/jquery-ui.css">

Syntax: Interactions

    $("ol").sortable()
    $("img").resizable()
    $("aside").draggable()

Syntax: Widgets
   
    $("#topics").accordion()
    $("#txt").datepicker()

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./jquery-ui/jquery-ui.css">
    <style>
        aside {
            border:1px solid black;
            width: 120px;
            padding: 10px;
        }
    </style>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script src="./jquery-ui/jquery-ui.js"></script>
    <script>
        $(function(){
             $("aside").draggable();
             $("#pic").resizable();
             $("ol").sortable();
             $("#faqs").accordion();
             $("#dept").datepicker();
        })
    </script>
</head>
<body>
    <dl>
        <dt>Departure</dt>
        <dd>
            <input type="text" id="dept">
        </dd>
    </dl>
    <div id="faqs">
        <h2>What is Netflix?</h2>
        <div>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Earum reiciendis facilis nemo impedit iure nihil adipisci, nulla commodi distinctio labore modi veniam praesentium itaque ad debitis in animi, neque sapiente. Lorem ipsum dolor sit amet consectetur, adipisicing elit. Dignissimos numquam ea eveniet soluta eaque ipsam tempora repudiandae excepturi dolorum incidunt nesciunt aspernatur, repellat aperiam minima debitis pariatur laborum atque aliquid!</p>
        </div>
        <h2>How much does Netflix cost?</h2>
        <div>
            <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Magnam quidem, sed cupiditate at expedita ut officia accusantium tenetur mollitia ipsum vel autem! Quia, voluptatibus hic. Veritatis eum rerum qui rem.</p>
        </div>
    </div>
    <ol>
        <li>CSS</li>
        <li>HTML</li>
        <li>Javacript</li>
        <li>Bootstrap</li>
    </ol>
    <aside>
        <div>Ads</div>
        <img src="./images/kids-fashion.jpg" width="100" height="100">
    </aside>
    <img src="./images/women-fashion.jpg" width="100" height="100" id="pic">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./jquery-ui/jquery-ui.css">
    <style>
        aside {
            border:1px solid black;
            width: 120px;
            padding: 10px;
        }
    </style>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script src="./jquery-ui/jquery-ui.js"></script>
    <script>
        $(function(){
             $("#list").menu();
        })
    </script>
</head>
<body>
    <ul id="list" style="width: 200px;">
        <li><div>Home</div></li>
        <li><div>Electronics</div>
            <ul>
                <li><div>Televisions</div></li>
                <li><div>Mobiles</div></li>
            </ul>
        </li>
        <li>
            <div>Fashion</div>
            <ul>
                <li><div>Kids</div></li>
                <li><div>Women</div></li>
                <li><div>Men</div></li>
            </ul>
        </li>
    </ul>
</body>
</html>

jQuery Plugin's
- Plugin is an extension for software application.
- jQuery supports several 3rd party plugins for handling different types of client requirements.
- You can research on plugins from  "npmjs.com"

Barcode for jQuery:

1. Install the barcode library for project

        >npm install jquery-ean13 --save

2. Link jQuery & jQuery EAN 13 library

    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script src="./node_modules/jquery-ean13/dist/jquery-ean13.js"></script>

3. Add a <canvas> element into page, which is used to display diagrams.

     <canvas width="" height="" id="code">

4. Set bar code into canvas

    $("#code").EAN13("12digit_number");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script src="./node_modules/jquery-ean13/dist/jquery-ean13.js"></script>
    <script>
        $(function(){
             $("#code").EAN13("991100421119");
        })
    </script>
</head>
<body>
    <figure style="width: 200px;">
        <img src="./images/women-fashion.jpg" width="150px" height="200px">
        <figcaption>
            <canvas width="150%" height="50" id="code"></canvas>
        </figcaption>
    </figure>
</body>
</html>

Data Grid:
 - Data grid is a table that provides built-in features for sorting, filtering, pagination, updating, inserting and deleting data.

1. Install JS Grid

    > npm install  jsgrid --save

2. Link relative library

        jsgrid.css
        jsgrid-theme.css
        jsgrid.js

3. Put a container in page [ div ]

    <div id="data"> </div>

    $("#data").jsGrid({

        // all grid features

    })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./node_modules/jsgrid/dist/jsgrid.css">
    <link rel="stylesheet" href="./node_modules/jsgrid/dist/jsgrid-theme.css">
    <script src="./node_modules/jquery/dist/jquery.js"></script>
    <script src="./node_modules/jsgrid/dist/jsgrid.js"></script>
    <script>
        $(function(){
              $("#data").jsGrid({
                width: "100%",
                height: "400px",
           
                filtering: true,
                editing: true,
                sorting: true,
                paging: true,
           
                data: [
                    {Name:"Samsung TV", Price:56000, Stock: true},
                    {Name:"Mobile", Price:32000, Stock: true},
                    {Name:"Watch", Price:1000, Stock: true},
                ],
           
                fields: [
                    { name: "Name", type: "text", width: 150 },
                    { name: "Price", type: "number", width: 50 },
                    { name: "Stock", type: "checkbox", title: "In Stock", sorting: true },
                    { type: "control" }
                ]
            })
        })
    </script>
</head>
<body>
    <h2>Products Grid</h2>
    <div id="data"></div>
</body>
</html>

11/07
======

SASS
- Syntactically Awesome Style Sheets
- It is a CSS pre-processor or pre-compiler.
- It enables separation, reusability and easy extensibility.
- It is trans-compiled into CSS.

1. Install Sass on your PC
   
    - Open Command Prompt
    - Run the command

        >npm install sass  -g

2. Add a new sass file into project   "index.scss"  

    - Add your scss code
   
3. Trans compile sass into CSS.

    >sass   index.scss    index.css  --watch

4. Link index.css to HTML page.


Sass Reference Hierarchy:

- You can directly configure child elements inside the parent block.
- It doesn't require child selectors.

    parent
    {
        styles;
        child {
        styles;        
        }
    }

Ex: index.scss

.container {
    border:2px solid red;
    padding: 20px;
    background-color: rgb(240, 212, 212);
    h2 {
        color:rgb(168, 9, 9);
    }
    p {
        color: rgb(108, 4, 4);
    }
}

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./index.css">
</head>
<body>
    <div class="container">
         <h2>Sass</h2>
         <p>Syntactically Awesome Style Sheet</p>
    </div>
</body>
</html>

Sass Variables:
- Variables in sass are used to store a CSS value so that you can reuse across various expressions.
- Variables a configured by using  "$" and reference name.
- Values are configured using ":" delimiter.

Syntax:
        $variableName : value;

- You have to access and use variable using "$" reference.

Syntax:
        {
          color : $variableName;
          border : 2px solid  $variableName;
        }

Ex:
index.scss

$fgColor: rgb(2, 146, 76);
$bgColor: rgb(225, 243, 203);

.alert {
    border:2px solid $fgColor;
    padding: 20px;
    background-color: $bgColor;
    h2 {
        color: $fgColor;
    }
    p {
        color: $fgColor;
    }
    a {
        color:$fgColor;
    }
    button{
        background-color:$fgColor;
        color:white;
        border:none;
    }
}

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./index.css">
</head>
<body>
    <div class="alert">
         <h2>Sass</h2>
         <p>Syntactically Awesome Style Sheet</p>
         <a href="#">Help</a>
         <br><br>
         <button>OK</button>
    </div>
</body>
</html>

Sass Provides Functions & Mixins:

- Mixin is a method of sass.
- It allows to refactor the code.
- It will not return any value, it defines a set of actions to perform.

Syntax:
    @mixin   Name(params)
    {
        // statements
    }

- You can access the mixin and use at any location by using "@include" directive.

Syntax:
    @include Name(value);

- You can configure conditions by using "@IF" statement

Syntax:
     @if (condition)
      {
         // styles on true;
      }
      @else if (condition)
      {
        // styles on true;
      }
     @else
      {
      }

Operators:
        ==        equal
        >
        >=
        <
        <=
        <>        Not Equal

Ex:
index.scss

$themeColor:green;

@mixin SetTheme($bgColor, $fgColor)
{
  .alert {
        border:2px solid $fgColor;
        padding: 20px;
        background-color: $bgColor;
        h2 {
            color: $fgColor;
        }
        p {
            color: $fgColor;
        }
        a {
            color:$fgColor;
        }
        button{
            background-color:$fgColor;
            color:white;
            border:none;
        }
    }
}

@if ($themeColor==red)
{
    @include SetTheme(rgb(245, 214, 214), rgb(141, 7, 7) );
}
@else if ($themeColor==green)
{
    @include SetTheme(rgb(217, 245, 214), rgb(7, 141, 18) );
}
@else if ($themeColor==gold)
{
     @include SetTheme(rgb(245, 244, 214), rgb(141, 121, 7) );
}

12/07
======

- Sass
- Nested Elements
- Variables
- @mixin
- @if

Sass Function:
- Function always returns a value.
- It is used to build expression.
 
Syntax:
    @function  name(params)
    {
        @return  value|expression;
    }

Ex:
$themeColor:green;

@function SetPadding($val){
    @return $val*2;
}

@mixin SetTheme($bgColor, $fgColor)
{
  .alert {
        border:2px solid $fgColor;
        padding: SetPadding(5px);
        background-color: $bgColor;
        h2 {
            color: $fgColor;
            border:1px dotted $bgColor;
            padding: SetPadding(6px);
        }
        p {
            color: $fgColor;
        }
        a {
            color:$fgColor;
        }
        button{
            background-color:$fgColor;
            color:white;
            border:none;
        }
    }
}

@if ($themeColor==red)
{
    @include SetTheme(rgb(245, 214, 214), rgb(141, 7, 7) );
}
@else if ($themeColor==green)
{
    @include SetTheme(rgb(217, 245, 214), rgb(7, 141, 18) );
}
@else if ($themeColor==gold)
{
     @include SetTheme(rgb(245, 244, 214), rgb(141, 121, 7) );
}

Looping Statements
  @for
  @each
  @while

Syntax:
    @for  ref  from  initial_value  through  final_value
    {
         // effects
    }

    @for  $i  from 1 through 6
     {

     }

Note: Dynamic value can bind with string by using "#{ }"  binding expression.

Syntax:
    @each  ref  in  collection
    {

    }

- Sass Array is configured with value separated with "," delimiter.

Syntax:
    $collection :  "red", "green", "blue" ;

    @each  $color in $collection
     {
        li {
          color: $color;
        }
     }

Ex:
index.scss


@for $i from 1 through 3
{
     .box-#{$i} {
        border:2px solid black;
        width: 100px;
        height: 100px;
        margin-left: $i*100px;
        transform: skew($i*10deg);
     }
}

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="./index.css">
</head>
<body>
    <div class="box-1">
        <img src="../images/kids-fashion.jpg" width="100" height="100">
    </div>
    <div class="box-2">
        <img src="../images/women-fashion.jpg" width="100" height="100">
    </div>
    <div class="box-3">
        <img src="../images/men-fashion.jpg" width="100" height="100">
    </div>
</body>
</html>

Sass Modules:
- Modular approach enables easy reusability and extensibility.
- It reduces the file size, as it allows to import only the styles required for situation.
- It makes style sheet light weight.

1. Module is defined as a sass file with "_" prefix.

        _moduleName.scss

2. You can import and use the module in any sass file

         @import  "moduleName";

Ex:
 _button.scss

button {
    border:none;
    background-color: yellow;
    padding: 5px;
    font-size: 15px;
    font-family: Arial;
}

_nav.scss

nav {
    display: flex;
    justify-content: space-between;
    font-size: 20px;
    font-family: Arial;
    border:1px solid gray;
    padding: 20px;
}

index.scss

@import "buttons";
@import "nav";

                            DO-TO  Project
1. User can register
2. User can login
3. User can add appointments
4. User can view appointments
5. User can edit and delete appointments

Backend
    MongoDB        Database
    Node/Express        API
    jQuery            Client Library [UI]
    Bootstrap
    Tailwind

Database Design
   
    Database Name        : to-do
    Collections            : users, appointments

    users:
        user_id : string
        user_name: string
        password: string
        mobile: string

    appointments
        appointment_id: number
        title:string
        date: Date
        description: string
        user_id: string [FK - users]

API Routes

 POST        /register-user
 GET        /users/user_id
 GET        /appointments/user_id
 POST        /add-appointment
 PUT        /edit-appointment/id
 DELETE        /delete-appointment/id

jQuery Ajax1/04
====

Summary
<header>
<section>
<nav>
<aside>
<main>
<article>

                            Footer
- Footer is a container used to display content at bottom margin of page.
- Typically footer comprises of services, contact details, copyrights etc.

Syntax:
    <footer>
        ... your content ...
    </footer>

                            Address
- It is a container for contact details.
- It keeps your contact details SEO friendly.

Syntax:
    <address>
         ... phone, email, skype etc..
    </address>


CSS Child & Adjacent Selectors:

    nav  span {  }            all span inside nav.

                        <nav>
                            <span></span>            
                            <span> </span>
                        </nav>

    nav + span { }            It refers to span adjacent to nav.    
                        It refers only first element.

                        <nav> </nav>
                        <span> </span>    => only first is accessed with " + "
                        <span> </span>

    nav ~ span { }            It refers to all span elements after nav.

                        <nav> </nav>
                        <span> </span>    => all spans but in same scope
                        <span> </span>



Ex: Shopper Template - Footer


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopper</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .header-row-1 {
            background-color: #e6e4e4;
            padding: 15px;
            font-family: Arial;
            font-size: 14px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .header-row-1  span {
            padding-left: 10px;
            padding-right: 10px;
        }
        .header-row-2 {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 40px;
            font-size: 20px;
            font-family: Arial;
        }
        .brand-title {
            font-size: 30px;
            font-weight: bold;
        }
        nav span {
            padding-left: 15px;
            padding-right: 15px;
            font-size: 18px;
        }
        .short-cuts span {
            padding-left: 5px;
            padding-right: 5px;
        }
        article {
            background-color: black;
            color:white;
            padding: 15px;
            text-align: center;
            font-family: Arial;
            font-size: 16px;
        }
        .bi-lightning-fill {
            color:gold;
        }
        main {
            height: 450px;
            display: grid;
            grid-template-columns: 4fr 4fr 4fr;
            margin-top: 10px;
        }
        .women-fashion {
            background-image: url("./images/women-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .men-fashion {
            background-image: url("./images/men-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .kids-fashion {
            background-image: url("./images/kids-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .main-title {
            font-family: Arial;
            font-size: 50px;
            font-weight: bold;
            color:white;
            text-shadow: 2px 2px 2px black;
        }
        .btn-shop {
            background-color: white;
            padding: 10px;
            width: 140px;
            font-family: Arial;
            text-align: center;
            box-shadow: 2px 2px 2px black;
            border-radius: 5px;
        }
        .women-fashion:hover, .men-fashion:hover, .kids-fashion:hover {
            opacity: 1;
            cursor: grab;
        }
        .services {
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
            padding: 20px;
            margin-top: 20px;
        }
        .services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
            color:red;
        }
        footer {
            background-color: black;
            color:white;
            font-family: Arial;
            padding: 10px;
        }
        .footer-row-1 {
            padding-top: 40px;
            padding-bottom: 40px;
            text-align: center;
        }
        .footer-title {
            font-size: 30px;
            font-weight: bold;
            padding-bottom: 30px;
        }
        .email {
            background-color: rgba(135, 131, 131, 0.653);
            border:1px solid gray;
            padding: 20px;
            display: inline-block;
            width: 300px;
            text-align: left;
        }
        .subscribe {
            background-color: rgb(123, 122, 122);
            padding: 20px;
            width: 150px;
            display: inline-block;
            color:white;
            margin-left: 10px;
        }
        .footer-row-2 {
            margin-top: 30px;
            display: grid;
            grid-template-columns: 2.4fr 2.4fr 2.4fr 2.4fr 2.4fr;
            padding: 20px;
        }
        .service-title {
            font-size: 16px;
            font-weight: bold;
            text-transform: uppercase;
            display: block;
            padding-bottom: 20px;
        }
        .service-title~span {
            display: block;
            padding-bottom: 10px;
        }
        address span {
            display: block;
            padding-bottom: 10px;
        }
        aside span {
            padding-right: 5px;
        }
        .footer-brand-title {
            font-size: 30px;
            font-weight: bold;
            padding-bottom: 20px;
            display: block;
        }
    </style>
</head>
<body>
    <header>
        <div class="header-row-1">
            <div>
                <span class="bi bi-truck"> FREE SHIPPING WORLDWIDE </span>
                <span>United States <span class="bi bi-chevron-down"></span> </span>
                <span>USD <span class="bi bi-chevron-down"></span> </span>
                <span>English <span class="bi bi-chevron-down"></span> </span>
            </div>
            <div>
                <span>Shipping</span>
                <span>FAQ</span>
                <span>Contact</span>
            </div>
            <div>
               <aside>
                <span class="bi bi-facebook"></span>
                <span class="bi bi-twitter"></span>
                <span class="bi bi-instagram"></span>
                <span class="bi bi-youtube"></span>
               </aside>
            </div>
        </div>
        <div class="header-row-2">
            <div>
                <span class="brand-title">Shopper.</span>
            </div>
            <div>
                <nav>
                    <span>Home</span>
                    <span>Catalog</span>
                    <span>Shop</span>
                    <span>Blog</span>
                    <span>Pages</span>
                    <span>Docs</span>
                </nav>
            </div>
            <div class="short-cuts">
                <span class="bi bi-search"></span>
                <span class="bi bi-person"></span>
                <span class="bi bi-heart"></span>
                <span class="bi bi-cart4"></span>
            </div>
        </div>
    </header>
    <section>
        <article>
            <span class="bi bi-lightning-fill"></span>
            <span>HAPPY HOLIDAY DEALS ON EVERYTHING</span>
            <span class="bi bi-lightning-fill"></span>
        </article>
        <main>
            <div class="women-fashion">
                <div class="main-title">Women</div>
                <div class="btn-shop">
                    Shop Women <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="men-fashion">
                <div class="main-title">Men</div>
                <div class="btn-shop">
                    Shop Men <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="kids-fashion">
                <div class="main-title">Kids</div>
                <div class="btn-shop">
                    Shop Kids <span class="bi bi-arrow-right"></span>
                </div>
            </div>
        </main>
        <div class="services">
            <div>
                <span class="bi bi-truck">  </span> FREE SHIPPING
            </div>
            <div>
                <span class="bi bi-arrow-left-right">  </span> FREE RETURNS
            </div>
            <div>
                <span class="bi bi-lock">  </span> SECURE SHOPPING
            </div>
            <div>
                <span class="bi bi-tag">  </span> OVER 10,000 STYLES
            </div>
        </div>
    </section>
    <footer>
        <div class="footer-row-1">
                <div class="footer-title">Want style Ideas and Treats?</div>
                <div>
                    <span class="email">Enter Email*</span>
                    <span class="subscribe">Subscribe</span>
                </div>
        </div>
        <div class="footer-row-2">
            <div>
                <span class="footer-brand-title">Shopper.</span>
                <aside>
                    <span class="bi bi-facebook"></span>
                    <span class="bi bi-twitter"></span>
                    <span class="bi bi-instagram"></span>
                    <span class="bi bi-youtube"></span>
                    <span class="bi bi-linkedin"></span>
                </aside>
            </div>
            <div>
                <span class="service-title">Support</span>
                <span>Contact Us</span>
                <span>FAQs</span>
                <span>Size Guide</span>
                <span>Shipping & Returns</span>
            </div>
            <div>
                <span class="service-title">Shop</span>
                <span>Men's Shopping</span>
                <span>Women's Shopping</span>
                <span>Kids' Shopping</span>
                <span>Discounts</span>
            </div>
            <div>
                <span class="service-title">Company</span>
                <span>Our Story</span>
                <span>Careers</span>
                <span>Terms & Conditions</span>
                <span>Privacy & Cookie policy</span>
            </div>
            <div>
                <span class="service-title">CONTACT</span>
                <address>
                    <span>1-202-555-0105</span>
                    <span>1-202-555-0106</span>
                    <span>help@shopper.com</span>
                </address>
            </div>
        </div>
    </footer>
</body>
</html>

Ex: Flipkart footer - layout

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        footer {
            background-color: black;
            color:white;
            font-size: 20px;
            padding: 10px;
            display: grid;
            grid-template-columns: 6fr 6fr;
            height: 300px;
        }
        .left-panel {
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
        }
        .right-panel {
            display: grid;
            grid-template-columns: 6fr 6fr;
            border-left: 1px solid white;
            padding-left: 20px;
        }
    </style>
</head>
<body>
    <footer>
        <div class="left-panel">
            <div>Col-1</div>
            <div>Col-2</div>
            <div>Col-3</div>
            <div>Col-4</div>
        </div>
        <div class="right-panel">
            <div>Col-1</div>
            <div>Col-2</div>
        </div>
    </footer>
</body>
</html>

                            Dialog
- It opens a popup window inside page.
- It is used as window with content in backdrop.
- Dialog is default hidden, you have to display with "open" attribute.

Syntax:
      <dialog  open>

          ... your content ...

    </dialog>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .dialog-header {
            background-color: black;
            color:white;
            padding: 10px;
            display: flex;
            justify-content: space-between;
        }
        dialog {
            width: 300px;
            height: 400px;
            padding: 30px;
            box-shadow: 4px 3px 2px gray;
        }
        .dialog-body {
            height: 250px;
            margin-top:20px;
        }
        .text-area {
            height: 250px;
            border:1px solid gray;
        }
        .dialog-footer {
            margin-top: 50px;
        }
        .btn-post {
            width: 100%;
            background-color: goldenrod;
            color:white;
            padding: 5px;
            text-align: center;
        }
    </style>
</head>
<body>
   
    <dialog open>
        <div class="dialog-header">
            <span>Ask Disha 2.0</span>
            <span class="bi bi-x-lg"></span>
        </div>
        <div class="dialog-body">
            <span>Your Comments</span>
            <div class="text-area">

            </div>
        </div>
        <div class="dialog-footer">
            <div class="btn-post">Post Comment</div>
        </div>
    </dialog>
    Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi exercitationem ex esse qui dolorem. Inventore, veniam dolores, dolorum at aliquid expedita deleniti dicta maiores sunt fugit vero, id nesciunt dolorem.
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. At dicta sunt cumque accusamus, magnam, mollitia amet neque, dolorem modi eum veritatis. Ipsum, delectus voluptate odit facilis rerum dignissimos ullam ipsam?    
</body>
</html>

Ex: Dialog

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        dialog {
            border:none;
            padding: 0px;
            border-top-left-radius: 20px;
            border-top-right-radius: 20px;
            border-bottom-left-radius: 20px;
            border-bottom-right-radius: 20px;
            width: 500px;
        }
        .dialog-header {
            background-color: orangered;
            color:white;
            height: 100px;
            padding: 20px;
            font-size: 50px;
            font-family: Arial;
            border-radius: 20px;
            display: flex;
            justify-content: space-between;
        }
        .dialog-body {
            background-color: white;
            border-radius: 20px;
            margin-top: -40px;
            padding: 50px;
            font-size: 16px;
            font-family: Arial;
            height: 250px;
        }
        .dialog-footer {
            padding: 20px;
            border-top: 1px solid gray;
            font-size: 14px;
            color:rgb(180, 180, 180);
        }
        body {
            background-color: black;
        }
     </style>
</head>
<body>
    <dialog open>
        <div class="dialog-header">
            <span class="bi bi-person-circle"> <span>Naresh IT</span> </span>
            <span class="bi bi-x-circle-fill"></span>
        </div>
        <div class="dialog-body">
           <div> Naresh IT</div>
           <div>Hello , Good Afternoon</div>
            <div>
                Appear that you are visiting our pages! Can we help you find any suitable course ?
                <br>
                How may I help you ?
            </div>
        </div>
        <div class="dialog-footer">
            <span>Type your message and hit enter</span>
        </div>
    </dialog>
</body>
</html>

2/04
====

Body Semantics and Entities:

1. Line Break                <br>

FAQ: What is difference between <br> & <br /> ?
Ans:  There is no <br /> in HTML.
      <br/> is just a reference given for self ending elements.
      It is required for editor that can't understand void elements.

2. Blank Spaces            &nbsp;     [non-breakable space]

Syntax:
        H &nbsp; &nbsp; T M L


3. Preformatted             <pre>        It keeps the formats as defined in source.


4. Code                    <code>        It makes the block browser friendly.
                                    It defines that content is a code block.

5. Variable                <var>        It is used to mark variables in programming.

6. Sample Text            <samp>        It is used to mark sample output.

7. Large Text                <big>    

8. Smaller Text            <small>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      var {
         color:blue;
      }
      samp {
         color:gray;
      }
      .output {
         font-weight: bold;
      }
   </style>
</head>
<body>
   <div>
      normal <small>small</small> <big>Large</big>
   </div>
   <div>
      <code>
         <pre>
          var <var>createCounter</var> = function(n){
             return function(){
               
             };
          };
         </pre>
       </code>
   </div>
   <div>
      <span class="output">Output :</span> <samp> [-2, -1, 0, 1, 2] </samp>
   </div>
</body>
</html>

9. Headings                <h1> to  <h6>


FAQ's:
1. Why you need an heading element, if same styles can be defined without heading?
A. To make the topics in page SEO friendly.

2. Can we modify the default style defined for heading?
A.  Yes.

Syntax:
      h1 {
        font-size : 40px;
        color:red;
       }

3. What are the default styles defined for heading element?
A. Heading element is applied with
    a) font-size
    b) font-weight
    c) display: block

4. How to remove any default style defined for element?
A. By using CSS inheritance value "unset".

Syntax:
        h1 {                                h1 {
              font-size: unset;                     all : unset;
              font-weight:unset;        (or)        }
              display:unset;
        }

Note:
1. Don't use heading to highlight any word or sentence in a paragraph.
2. Don't use too many headings in a page. It may SPAM your page.

3/04
====
- line break        <br>
- blank space        &nbsp;
- pre formatted     <pre>
- code             <code>
- variables        <var>
- sample text        <samp>
- big and small text     <big> <small>
- headings        <h1> ... <h6>

10. Paragraphs & Blockquotes

    <p>                for paragraph
    <blockquote>        summarizing content

- Paragraph element keep the content relative to others topics in a page.
- It provides a container to align and set padding or margin.
- Blockquote is similar to paragraph but it keeps the summary SEO friendly.

Syntax:
    <p align="center">
    <blockquote align="justify">

FAQ's:
1. How to set first-line indent for paragraph?
A. By using CSS "text-indent" attribute.

Syntax:
     p, blockquote {
         text-indent : 100px;
    }

2. How to set spacing between line, words and chars?
A. By using CSS attributes
        a) letter-spacing
        b) word-spacing
        c) line-height  [ line space ]

Syntax:
      p, blockquote {
         letter-spacing : 2px;
           word-spacing : 10px;
         line-height : 50px;
       }


3. How to justify alignment without using text-align?
A. By using CSS "word-break" set to "break-all".

Syntax:
    p, blockquote  {
        word-break : break-all;
    }

4. How to set a drop cap?
A. You can access paragraph first letter by using CSS  "::first-letter" class.
     You can make it dropped by few lines by using "float: left" attribute.

Syntax:
     p ::first-letter {
        font-size: 40px;
            float: left;
        line-height: 40px;
        font-family: Algerian;
     }

5. How to create scrollable paragraph content?
A. By using CSS "overflow" attribute set to "auto or scroll".
    You have to control overflow for content in a container.

Syntax:
     p {
         width : 300px;
         height: 200px;
         padding: 10px;
         border: 2px solid gray;
         overflow: auto;
      }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        blockquote {
            padding-left: 300px;
            padding-right: 300px;
            font-style: italic;
            line-height: 20px;
        }
        blockquote::first-letter {
            font-size: 60px;
            float: left;
            line-height: 40px;
            font-family: Magneto;
            padding-right: 10px;
        }
        .first-para {
            text-indent: 100px;
        }
        h2 {
            letter-spacing: 10px;
            word-spacing: 40px;
        }
        p {
            word-break: break-all;
        }
        .terms {
            width: 500px;
            padding: 10px;
            border:2px solid gray;
            height: 200px;
            overflow: auto;
        }
    </style>
</head>
<body>
   <h2 align="center">Men Fashion</h2>
    <blockquote align="justify">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Odio repellendus voluptates, unde assumenda modi mollitia tenetur quod laboriosam veritatis quis magni similique expedita, officiis perspiciatis, nobis molestias quia iste ullam? Lorem ipsum dolor sit amet consectetur adipisicing elit. Quo reprehenderit cupiditate molestias ipsum, suscipit doloribus eaque. Nisi suscipit nemo aperiam dolorum, incidunt error fuga repellat quam placeat, dolorem laborum sit.
    </blockquote>
 
    <p class="first-para">
        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Itaque minima perspiciatis similique sapiente! A necessitatibus error quam esse quo doloribus magnam velit deserunt natus aliquam! Ab exercitationem magnam tempora dicta? Lorem ipsum dolor sit amet consectetur adipisicing elit. Dicta consectetur quos in quam minus atque possimus, omnis debitis vero, eligendi amet dolorum eaque, magnam magni modi veniam. Soluta, nemo voluptate?
        Lorem ipsum dolor, sit amet consectetur adipisicing elit. Est nulla dignissimos quidem, accusantium minus laboriosam voluptatem odio. Earum ullam consequatur reprehenderit quas nesciunt quos, facere obcaecati, voluptate aliquam animi ad.
    </p>
    <h3>Terms of Service</h3>
    <div class="terms">
        <p>
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Itaque minima perspiciatis similique sapiente! A necessitatibus error quam esse quo doloribus magnam velit deserunt natus aliquam! Ab exercitationem magnam tempora dicta? Lorem ipsum dolor sit amet consectetur adipisicing elit. Dicta consectetur quos in quam minus atque possimus, omnis debitis vero, eligendi amet dolorum eaque, magnam magni modi veniam. Soluta, nemo voluptate?
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Est nulla dignissimos quidem, accusantium minus laboriosam voluptatem odio. Earum ullam consequatur reprehenderit quas nesciunt quos, facere obcaecati, voluptate aliquam animi ad.
        </p>
        <p>
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Itaque minima perspiciatis similique sapiente! A necessitatibus error quam esse quo doloribus magnam velit deserunt natus aliquam! Ab exercitationem magnam tempora dicta? Lorem ipsum dolor sit amet consectetur adipisicing elit. Dicta consectetur quos in quam minus atque possimus, omnis debitis vero, eligendi amet dolorum eaque, magnam magni modi veniam. Soluta, nemo voluptate?
            Lorem ipsum dolor, sit amet consectetur adipisicing elit. Est nulla dignissimos quidem, accusantium minus laboriosam voluptatem odio. Earum ullam consequatur reprehenderit quas nesciunt quos, facere obcaecati, voluptate aliquam animi ad.
        </p>
       
    </div>
</body>
</html>


6. How to set ellipsis for paragraph?
A. You have to display paragraph content in one line by removing word-wrap.
            {
              white-space: nowrap;
            }
     Hide the overflowing paragraph.
     Set text-overflow to ellipsis.

Syntax:
    p {
         width : 350px;
         border: 1px solid gray;
         white-space: nowrap;
         overflow: hidden;
         text-overflow: ellipsis;
    }

Note: You can set screen-tip for any content in page by using "title" attribute.
      It is a HTML attribute defined for element to display mouse over tips.

        <h1  title="Hyper Text Markup Language"> HTML </h1>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       p {
        width: 350px;
        border:2px solid gray;
        padding: 5px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
       }
    </style>
</head>
<body>
    <h2 title="Hyper Text Markup Language">HTML</h2>
    <p title="Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quis, saepe. Maiores voluptate eveniet natus velit, alias reprehenderit maxime asperiores magnam nulla ipsa perspiciatis dignissimos error qui nostrum quas? Fugiat, laboriosam?">Lorem ipsum dolor sit, amet consectetur adipisicing elit. Quis, saepe. Maiores voluptate eveniet natus velit, alias reprehenderit maxime asperiores magnam nulla ipsa perspiciatis dignissimos error qui nostrum quas? Fugiat, laboriosam?</p>
</body>
</html>

7. How to display paragraphs in multiple columns?
A. By using CSS "columns" attribute or CSS display "grid".

    - Display Grid is a disconnected grid system.
    - Columns is a connected grid system. [ the content of one column spans to another column when it reaches the bottom margin of column].
   
        a) columns
        b) column-width
        c) column-gap
        d) column-rule

Syntax:
     .container {
         columns : 5;
         column-gap : 10px;
         column-rule: 1px dotted gray;
      }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .block {
            border:1px solid black;
            padding: 5px;
            font-family: Arial Black;
            font-size: 16px;
            width: 180px;
        }
        .split {
            color:aquamarine;
        }
        .shift {
            color:gray;
        }
        .title {
            font-family: Arial Black;
            font-weight: bold;
            font-size: 18px;
            padding-left: 10px;
        }
        .title-block {
            display: flex;
        }
        .sub-title {
            font-size: 43px;
            font-family: Arial;
        }
        .news {
            columns: 4;
            column-gap: 15px;
            column-rule: 1px dotted gray;
            font-size: 12px;
            text-align: justify;
            margin-top: 20px;
        }
        .news-block {
            box-shadow: 4px 3px 2px black;
            padding: 10px;
            border:1px solid black;
            width: 800px;
        }
    </style>
</head>
<body>
   <div class="news-block">
    <div class="title-block">
        <div class="block">
            <span>SHARP</span>
            <span class="split">|</span>
            <span class="shift">SHIFT</span>
        </div>
        <div class="title">Despite US companies' preferences, Inidian community faces ongoing uncertanity</div>
    </div>
    <div class="sub-title">
        Indian upset over reduces H-1B visa pool
    </div>
    <div class="news">
        <h4>Neeraj Kumar | DC | Delhi</h4>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ipsam libero molestias distinctio cum dolores recusandae provident doloribus reprehenderit quasi ut Lorem ipsum dolor, sit amet consectetur adipisicing elit. Architecto corporis dignissimos molestiae harum dolorem sed temporibus officiis velit culpa. Pariatur quo nesciunt et ipsum sint cumque doloribus ex. Atque, nisi! et, deleniti mollitia laborum nostrum dolorum possimus fugiat in aliquam! Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus reiciendis amet fugit dicta quasi sit facilis exercitationem doloribus quisquam modi non maxime consectetur, iusto itaque laudantium adipisci architecto inventore nisi? Lorem ipsum dolor sit amet consectetur adipisicing elit. Qui assumenda tempore dolor dolorem consectetur saepe harum est, dolorum, molestiae officia veritatis repellendus deserunt mollitia fugit molestias, at vero minus impedit?</p>
        <p>Lorem ipsum dolor Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nam nisi odit nesciunt? Dolore et nulla praesentium quam eligendi expedita eaque corrupti error quia ipsum nam suscipit, incidunt deleniti sequi! Odio. sit amet consectetur adipisicing elit. Pariatur impedit, laudantium in, nam nisi molestias illum magnam repellendus placeat reiciendis velit earum nihil quibusdam soluta sed iste. Doloribus, odio minus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae nisi ab aliquid recusandae enim fugiat est quae cum modi dolores. Sit quae, eveniet accusantium eius maiores ipsum nobis minima ab.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur impedit, laudantium in, nam nisi molestias illum magnam repellendus placeat reiciendis velit earum nihil quibusdam soluta sed iste. Doloribus, odio minus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae nisi ab aliquid recusandae enim fugiat est quae cum modi dolores. Sit quae, eveniet accusantium eius maiores ipsum nobis minima ab.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur impedit, laudantium in, nam nisi molestias illum magnam repellendus placeat reiciendis velit earum nihil quibusdam soluta sed iste. Doloribus, odio minus? Lorem ipsum dolor sit amet consectetur adipisicing elit. Repudiandae nisi ab aliquid recusandae enim fugiat est quae cum modi dolores. Sit quae, eveniet accusantium eius maiores ipsum nobis minima ab.</p>
    </div>
   </div>
</body>
</html>

4/04
====

Lists in HTML

1. Data List with terms and definitions

     <dl>        data list
     <dt>        data term
     <dd>        data definition

Syntax:
    <dl>
       <dt> Term </dt>
       <dd> Definition </dd>
    </dl>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        dt {
            font-weight: bold;
            font-family: Arial;
            background-color: black;
            color:white;
            padding: 4px;
            margin-bottom: 2px;
        }
        dl {
            width: 300px;
        }
        dd {
            padding: 4px;
            margin-bottom: 5px;
            background-color: lightgray;
        }
    </style>
</head>
<body>
    <h2>Web Technologies</h2>
    <dl>
        <dt>HTML</dt>
        <dd>It is a markup language.</dd>
        <dd>It is used for presentation.</dd>
        <dt>JavaScript</dt>
        <dd>It manipulates DOM. </dd>
        <dt>jQuery </dt>
        <dt>Library</dt>
        <dd>It a JavaScript library for DOM. </dd>
    </dl>
</body>
</html>


    - You can split terms and definitions into columns using "display: grid".
    - But for grid style every term can have only one definition.

Syntax:
      dl {
         display: grid;
         grid-template-columns: 3fr 9fr;
       }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        dt {
            font-weight: bold;
            font-family: Arial;
            background-color: black;
            color:white;
            padding: 2px;
            margin-bottom: 2px;
        }
        dl {
            display: grid;
            grid-template-columns: 3fr 9fr;
        }
        dd {
            padding: 2px;
            margin-bottom: 5px;
        }
        .control {
            width: 200px;
            height: 25px;
            background-color: white;
            border:1px solid black;
            padding: 2px;
        }
    </style>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><div class="control">John</div></dd>
        <dt>Password</dt>
        <dd><div class="control"> **** </div></dd>
        <dt>Date of Birth</dt>
        <dd><div class="control"></div></dd>
        <dt>City</dt>
        <dd><div class="control"></div></dd>
    </dl>
</body>
</html>

CSS Sticky Position:
- It allows the element to scroll along with content.
- It can lock scrolling and stick to page at specified location.

Syntax:
     element {
        position: sticky;
        top:0px;
     }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        nav {
            width: 150px;
        }
        dt {
            font-weight: bold;
            background-color: black;
            color:white;
            padding: 2px;
            margin-bottom: 10px;
            position: sticky;
            top: 0px;
        }
        dd {
            background-color: gray;
            color:white;
            padding: 2px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <nav>
        <dl>
            <h2>Amazon</h2>
            <dt>Electronics</dt>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dd>Televisions</dd>
            <dd>Mobiles</dd>
            <dd>Watches</dd>
            <dt>Fashion</dt>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dd>Kids</dd>
            <dd>Women</dd>
            <dd>Men</dd>
            <dt>Footwear</dt>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>
            <dd>Casuals</dd>
            <dd>Sneakers</dd>
            <dd>Boots</dd>

        </dl>
    </nav>
</body>
</html>

2. Ordered List
- It sets auto numbering for a list of items.
- Numbering updates automatically when you add or remove item.

    <ol>            Ordered list
    <li>            List item

Syntax:
    <ol>
       <li>Item-1</li>            1. Item-1
       <li>Item-2</li>            2. Item-2
    </ol>

- You can change the numbering style by using "type" attribute set with
  "1, A, a, i, I".

Syntax:
        <ol type="A">
        <ol type="i">
        <ol>                => default type is 1.

- You can set startup numbering level using "start" attribute.
- It refers to level number to start with. It is always a number value.


Syntax:
        <ol type="1" start="5">
        <ol type="A" start="5">
        <ol type="i"  start="5">

- You can use "reversed" attribute to set reverse numbering order.
- It will not reverse the items, it just reverse order of numbering.

Syntax:
        <ol type="1" reversed>
        <ol type="a" reversed>

- You can create a nested numbering list.
- But make sure that the child list is inside <li> Element.
  [not below the  <li> element]

Syntax: Bad Code

        <li> Parent </li>
          <ol>
              <li> Child </li>
          </ol>

Syntax: Good Code

        <li> Parent
            <ol>
               <li>Child</li>
            </ol>
        </li>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <ol type="1">
        <li>HTML
            <ol type="a">
                <li>Semantic Elements
                    <ol type="i">
                        <li>Heading</li>
                        <li>Header</li>
                    </ol>
                </li>
                <li>Generic Elements</li>
            </ol>
        </li>
        <li>JavaScript
            <ol type="a">
                <li>Variables</li>
                <li>Data Types</li>
            </ol>
        </li>
    </ol>
</body>
</html>

FAQ's:
1. How to display the list items side by side?
A. By using display attribute set to "flex" for list not list item.

Syntax:
    ol {
        display : flex;
     }

     As default direction is row. It keeps elements side by side.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
          .child-list {
            display: flex;
            flex-direction: row;
            margin-top: 10px;
        }
        li {
            margin-left: 20px;
            margin-right: 20px;
        }
    </style>
</head>
<body>
    <ol type="1">
        <li>__________ elements doesn't require end token.
            <ol type="a" class="child-list">
                <li>Normal</li>
                <li>RC Data</li>
                <li>Void</li>
                <li>Raw Text</li>
            </ol>
        </li>
    </ol>
</body>
</html>


2. How to display list items in multiple columns?
A. By using Grid style or by using columns.

Syntax:
        ol {
            display: grid;
            grid-template-columns: 6fr 6fr;
         }

        ol {
            columns : 2;
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
          .child-list {
            columns: 2;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <ol type="1">
        <li>__________ elements doesn't require end token.
            <ol type="a" class="child-list">
                <li>Normal</li>
                <li>RC Data</li>
                <li>Void</li>
                <li>Raw Text</li>
            </ol>
        </li>
    </ol>
</body>
</html>

3. How to remove numbering for list items?
A. By using CSS "list-style" attribute set to "none".

Syntax:
    ol {
         list-style : none;
    }

CSS  Before & After Selectors:

        ::before            It keeps a content before specified item
        ::after            It keeps content after specified item

Syntax:
     element :: before {
           content : " any ";
     }

Ex: Breadcrumb Design

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       ol {
          list-style: none;
          display: flex;
       }
       li::after {
          content: " > ";
          padding-left: 5px;
          color:gray;
       }
       li::before {
          content: " ";
          padding-right: 5px;
       }
    </style>
</head>
<body>
    <nav>
        <ol>
            <li>Home</li>
            <li>Mobiles & Accessories</li>
            <li>Mobiles</li>
            <li>Apple Mobile</li>
            <li>Apple 16</li>
        </ol>
    </nav>
</body>
</html>

05/04
=====

Unordered List:
 - It is a bulleted list.
 - List items are defined with a bullet symbol.
 - It supports bullet with type as "circle, disc & square".

    <ul>            Unordered List
    <li>            List Item

Syntax:
    <ul>
      <li> Item-1 </li>
      <li> Item-2 </li>
    </ul>

    <ul type="circle | disc | square">
    </ul>

FAQ: How to set custom bullet symbol?
Ans:  You can use bootstrap icons or you can set custom image by using the CSS      
      attribute "list-style-image".

Syntax:
         <li  class="bi bi-house"> Home </li>

Syntax:
       ul {
         list-style: none;
         list-style-image: url("./image/pic.gif");
      }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        ul {
            list-style: none;
            list-style-image: url("./images/bullet.gif");
            font-size: 30px;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
   <ul>
     <li> HTML</li>
     <li> CSS</li>
     <li> JavaScript </li>
   </ul>
</body>
</html>




Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        ul {
            list-style: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <ul>
        <li class="bi bi-person-fill"> Sign In </li>
        <li class="bi bi-gift"> Offers </li>
        <li class="bi bi-translate"> Language </li>
        <li class="bi bi-envelope-fill"> Email </li>
    </ul>
    <ul>
        <li class="bi bi-tag-fill">Axis Bank Offer 20% OFF</li>
        <li class="bi bi-tag-fill">HDFC Bank Offer 100 Cash Back</li>
        <li class="bi bi-tag-fill">IDFC zero cost EMI Offer</li>
    </ul>
</body>
</html>

FAQ: Can we set bullet symbol for ordered list and vice versa?
Ans: Yes. By using CSS attribute "list-style-type" you can change symbol to number or
    vice versa.

Syntax:
    ol {
         list-style-type : circle;
    }

    ul {
       list-style-type : decimal | lower-alpha | any ;
    }

Note: You can configure a nested list with combination of Ordered and Unordered

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
   <ul>
     <li> HTML
          <ol type="a">
             <li>Normal Elements</li>
             <li>Void Elements</li>
          </ol>
     </li>
     <li> CSS</li>
     <li> JavaScript </li>
   </ul>
</body>
</html>

                           Details & Summary

- Details is a container with expandable and collapsible content.
- Summary is a caption of details container.

Syntax:
    <details>
        <summary> Caption </summary>
        .... your content....
    </details>

- If you want the details to keep open the content then apply "open" attribute.

Syntax:
    <details open>
   
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        details div {
            margin-left: 20px;
            margin-bottom: 10px;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <details>
          <summary> Need Help in Sign in? </summary>
          <div>Forgot Password</div>
          <div>Recover Id</div>
          <div>Other Issues</div>
    </details>
    <details open>
        <summary>Electronics</summary>
        <div>Televisions</div>
        <div>Mobiles</div>
        <div>Watches</div>
    </details>
</body>
</html>

                         Fieldset & Legend

- Fieldset is a container with frame.
- It is used to keep relative content together.
- Legend is a caption set of fieldset.

Syntax:
    <fieldset>
        <legend> Caption </legend>
        .... your content....
    </fieldset>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .control {
          border:1px solid black;
          width: 200px;
          height: 22px;
          margin-bottom: 5px;
          background-color: white;
       }
       dl {
        display: grid;
        grid-template-columns: 2fr 8fr;
       }
       fieldset {
         margin: 20px;
         width: 500px;
         box-shadow: 4px 4px 4px black;
         background-color: rgb(200, 238, 238);
         border-radius: 10px;
       }
       legend {
         background-color:rgb(1, 113, 113);
         color:white;
         padding: 4px;
         width: 130px;
         text-align: center;
         border-radius: 10px;
         box-shadow: 2px 2px 2px gray;
       }
    </style>
</head>
<body>
     <fieldset>
        <legend>Personal Details</legend>
        <dl>
            <dt>First Name</dt>
            <dd class="control"></dd>
            <dt>Last Name</dt>
            <dd class="control"></dd>
            <dt>Date of Birth</dt>
            <dd class="control"></dd>
         </dl>
     </fieldset>
     <fieldset>
        <legend>Contact Details</legend>
        <dl>
            <dt>City</dt>
            <dd class="control"></dd>
            <dt>State</dt>
            <dd class="control"></dd>
            <dt>Postal Code</dt>
            <dd class="control"></dd>
         </dl>
     </fieldset>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        fieldset {
            width: 400px;
            text-align: center;
            border-right: none;
            border-left: none;
            border-bottom: none;
        }
        legend {
            padding-left: 10px;
            padding-right: 10px;
        }
        .btn-create {
            margin-top: 20px;
            border:1px solid gray;
            width: 400px;
            text-align: center;
            border-radius: 20px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <fieldset>
         <legend> New to Amazon? </legend>
         <div class="btn-create">Create new Account</div>
    </fieldset>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            background-color: lightgray;
        }
        fieldset {
            background-color: white;
            height: 300px;
            border-radius: 50px;
            margin-top: 100px;
        }
        legend {
            text-align: center;
            width: 80%;
            padding: 30px;
            height: 40px;
            border: 1px solid gray;
            background-color: white;
            border-radius: 50px;
            display: flex;
            justify-content: space-around;
            box-shadow: 5px 5px 2px black;
        }
        legend span {
            font-size: 50px;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <fieldset>
          <legend>
            <span class="bi bi-airplane"></span>
            <span class="bi bi-train-lightrail-front-fill"></span>
            <span class="bi bi-bus-front"></span>
            <span class="bi bi-umbrella"></span>
          </legend>
    </fieldset>
</body>
</html>

                        HTML Horizontal Line
- It is defined using <hr> element.
- It is a horizontal line with size and color.

Syntax:
    <hr size="10" noshade  color="red"  width="50%">

    size        : thickness of line
    noshade    : allows to set color for line.

07/04
=====

Details & Summary
Fieldset & Legend
Order and Unordered List
Data List
HR Line

                         Text Formatting in HTML
1. Font
 - It allows to configure a face, size & color for text.
 
    face        : It refers to font family name.

    size        : It refers to level number 1 to 7.

    color    : It refers color name, shade or hexadecimal code.

Syntax:
    <font face="Arial"  size="6"  color="#ff00ff">  Your Text </font>

FAQ's:
1. Why the size is only 7, what it refers to ?
A. It refers to Level number, which represents default sizes like
        small
        normal
        large
        x-large
        xx-large
        xxx-large etc.

2. What are web safe fonts?
A. They refer to default fonts available across all devices.
     The web safe fonts are
        a) Serif
        b) Sans Serif
        c) Monospace

Note: Don't use <font> element in modern web design. It is recommended to use
      CSS styles.

2. Text Styles & Effects

        Bold            <b>
        Strong        <strong>
        Italics        <i>
        Emphasized    <em>
        Underline    <u>
        Inserted         <ins>
        Strikeout         <strike>
        Deleted        <del>
        Super Script    <sup>
        Sub Script    <sub>

FAQ: What is difference between <b> & <strong> ?
Ans:   HTML provides different elements for documentation.
      The elements are categorized into
        a) Design Mode
        b) Review Mode
      The Review mode elements are
        <em>
        <strong>
        <ins>
        <del>
     You have to avoid them while going live. [production]
     The design mode elements are
        <i>
        <b>
        <u>
        <strike>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <div>Font <b>Bold</b> is similar to <strong>Strong</strong> </div>
    <div>Font <i>Italics</i> is similar to <em>Emphasized</em> </div>
    <div>Text <u>Underline</u> is similar to <ins>Inserted</ins> </div>
    <div>Text <strike>Strikeout</strike> is similar to <del>Deleted</del> </div>
    <div> 5<sup>th</sup> Anniversary </div>
    <div> H<sub>2</sub>O </div>
</body>
</html>



CSS Text Styles

        font-family        : font face
        font-size            : text size
        font-weight        : bold
        font-style            : italics
        text-decoration    : underline, overline, line-through
                          [line style, color & size]

Syntax:
    h1 {
        text-decoration: underline dotted 2px black;
    }

Ex:
Flipkart-Mobile

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flipkart</title>
    <style>
        body {
            display: grid;
            grid-template-columns: 3fr 9fr;
            padding-top: 30px;
        }
        .rating {
            background-color: green;
            color:white;
            padding: 5px;
            border-radius: 5px;
        }
        ul {
            list-style: none;
            margin-left: -40px;
        }
        li {
            line-height: 30px;
            color:green;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <div>

    </div>
    <div>
        <div> <font size="5" face="Arial">Apple 16 (White 128 GB)</font> </div>
        <br>
        <div>
            <font face="Arial"><span class="rating">4.6<span class="bi bi-star-fill"></span></span></font>
            <font color="gray" face="Arial" size="4"><b> 2,500 ratings & 300 reviews </b></font>
        </div>
        <br>
        <div>
            <font size="6" face="Arial"><b>&#8377; 6,242/month</b></font>
            <br><br>
            <div>
                <font face="Arial">12 months No Cost EMI Plan with Bajaj Finserv</font>
                <font color="blue" face="Arial">Details</font>
            </div>
            <br><br>
            <font face="Arial" color="green"> <b>Extra &#8377; 5,000 Off</b> </font>
            <br><br>
            <font face="Arial" size="5"><b> &#8377; 74,900</b> <font color="gray"><strike>&#8377; 79,900/-</strike></font> </font>
        </div>
        <div>
            <h4><font face="Arial">Available Offers</font></h4>
            <font face="Arial">
                <ul>
                    <li class="bi bi-tag-fill">  <font color="gray"><b>Bank Offer5%</b> Unlimited Cashback on Flipkart Axis Bank Credit Card</font> </li>
                    <li class="bi bi-tag-fill">  <font color=gray><b>Bank Offer </b> ₹2500 Off On Flipkart Axis Bank Credit Card Non EMI Transactions</font> </li>
                    <li class="bi bi-tag-fill">  <font color="gray"><b>Bank Offer</b> ₹4000 Off On Axis Bank Credit Card Transactions.</font> </li>
                    <li class="bi bi-tag-fill">  <font color="gray"><b>Special Price</b> Get extra ₹5000 off (price inclusive of cashback/coupon)</font> </li>
                </ul>
            </font>
        </div>
    </div>
</body>
</html>
                        Images in HTML

8/04
====
Images in HTML
- Images are of various types.
- Web will not support all types of images.
- The recommended images types for web are:

Type                                    MIME                Extension
---------------------------------------------------------------------------------------------------------------------

PNG [ Portable Network Graphics]            image/png            .png

APNG [ Animated Portable Network Graphics]    image/apng            .apng

JPEG [Joint Photographic Expert Group]        image/jpeg            .jpg, .jpeg, .jfif

AVIF [ AV1 Image Format]                     image/avif            .avif, .heif

GIF    [ Graphic Interchange Format]             image/gif                .gif

TIFF [ Tagged Image File Format]                image/tiff                .tiff

BMP [Bitmap]                                image/bmp            .bmp

ICON [Microsoft Icon]                        image/icon            .ico

SVG [Scalar Vector Graphics]                application/xml        .svg

WebP [Web Picture]                        application/webp        .webp


FAQ: What is MIME?
Ans:  Multipurpose Internet Mail Extension
     It refers the file content type.
     A browser can understand the content type of a file by using its MIME.
     
Note: Every MIME refers to multiple extensions.

        .jpg, .jpeg, .jfif     => image/jpeg

PNG & APNG
- High Definition
- High Pixel Depth
- More Colors
- Requires more memory
- APNG can be animated
- Always use PNG for downloadable images.
- Don't use them for on screen presentation.

JPEG
- High Definition
- Less pixel depth when compared to PNG
- More colors
- It is compressed image format.
- Requires less memory
- It is good for on-screen presentation.

AVIF
- Similar to JPG
- 50% more compressed than JPG
- They not supported across all browsers.
- They compatibility issues.
- They use HEIF. [High Efficiency Image Format]
- Less memory and fast in loading.

GIF
- Less colors
- It supports only 256 colors.
- Size is same as its original format.
- They are good for  logos, bullets, buttons, patterns, borders etc.
- It can be animated.

TIFF
- It is a sliced image format.
- It is high definition & quality
- It uses more memory.
- It loads sliced image portion on web page.
- It is good for scanned documents.


SVG
- Scalar Vector Graphics
- Vector Graphics is not a pixel based image.
- It uses XML as language.
- It is good for Maps, Architectural diagrams, icons etc.


Bitmap
- It is a binary image format.
- It is good for storing in any database or  data store.
- It is also good in transporting via network.
- However it require COM to Marshal [Common Object Model] the content.
- It is blocked by firewalls.


WebP
- It is embedded image into page.
- It will not allow to separate image from page.
- It a secured image in page.


Embed Image in Page:
1. You can use <img> element to embed images.

2. To keep image SEO friendly you can enclose image in <Figure> element with
    <Figcaption>

Syntax:    
    <figure>
        <img>
        <figcaption> Title </figcaption>
    </figure>


9/04
====
Image Attributes:
    1. src            : It refers to the image name and path.

    2. width & height    : sets height and width for image. You can use pixels or %.
                      Size in % makes image fluid.
    3. alt            : It defines the alternative text to display when image fails to load.
4. title            : It defines the text to display when mouse is over image.

Syntax:
 <img src="./images/pic.jpg"  alt="alternative text"  title="screen tips">

5. border            : It sets border for image by specified pixels.

6. align            : It aligns image left or right. It is used for wrapping text around image

7. hspace        : It sets horizontal padding between text and image

8. vspace         : It set vertical padding between text and image

Syntax:
  <img src="./images/pic.jpg"  align="left" hspace="20" vspace="20">

9. crossorigin         : It refers to CORS [Cross Origin Resource Sharing].
                  It can restrict accessibility of image by using various authentication
                  techniques.

                       a) anonymous
                    b) use-credentials

Syntax:
  <img src="some_path"  crossorigin="use-credentials">


10. decoding         : It defines how image can load along with other content in page.

                    a) sync
                    b) async
                    c) auto

Syntax:
  <img src="path"  decoding="async | sync | auto">


11. importance     : It sets priority for image. You can load according to priority.
                    a) low
                    b) high
                    c) auto

Syntax:
   <img src="path"  importance="low | high | auto">

12. loading        : It defines the loading technique for image, which can be
                    a) eager
                    b) lazy
                  Lazy loading is a technique of loading only when required.

Syntax:
   <img src="path"  loading="lazy | eager">


13. srcset        : It configure a set of images for element.
                  It requires styles to rotate images according to state and situation.


Syntax:
   <img  srcset="collection_of_images">


Ex: Cards Design - Naresh IT cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Naresh IT</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .card {
            width: 250px;
            margin: 20px;
            border-radius: 10px;
            border:1px solid gray;
            box-shadow: 2px 2px 2px black;
            font-family: Arial;
        }
        .card-img {
            width: 100%;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            height: 150px;
        }
        .card-header {
          height: 150px;
        }
        .card-body {
            padding: 20px;
        }
        .card-title {
            text-align: center;
            font-size: 22px;
            font-weight: bold;
        }    
        .rating {
            text-align: center;
            color:goldenrod;
            padding-top: 20px;
        }
        ul {
            list-style: none;
            margin-left: -40px;
        }
        li {
            line-height: 30px;
        }
        .card-footer {
            display: grid;
            grid-template-columns: 6fr 6fr;
            text-align: center;
        }
        .btn-enroll {
            background-color: blue;
            color:white;
            padding: 10px;
            border-bottom-left-radius: 10px;
        }
        .btn-share {
            background-color: whitesmoke;
            padding: 10px;
            border-bottom-right-radius: 10px;
        }
        section {
            display: flex;
            flex-direction: row;
        }
    </style>
</head>
<body>
   <section>
      <div class="card">
         <div class="card-header">
            <img src="./images/power-bi.png" class="card-img">
         </div>
         <div class="card-body">
            <div>
                <div class="card-title">Power PI</div>
                <div class="rating">
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                </div>
            </div>
            <div>
                <ul>
                    <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                    <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                    <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
                </ul>
            </div>
         </div>
         <div class="card-footer">
            <div class="btn-enroll">
                Enroll
            </div>
            <div class="btn-share">
               <span class="bi bi-share"></span> Share
            </div>
         </div>
      </div>


      <div class="card">
        <div class="card-header">
           <img src="./images/python.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">Python</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>

     <div class="card">
        <div class="card-header">
           <img src="./images/react.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">React JS</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>

     <div class="card">
        <div class="card-header">
           <img src="./images/data sci.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">Data Science</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>
   </section>  
</body>
</html>

Ex: Podcast cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .card {
            width: 400px;
            border:1px solid gray;
            box-shadow: 3px 3px 2px black;
            border-radius: 5px;
            margin: 20px;
            display: grid;
            grid-template-columns: 6fr 6fr;
            height: 200px;
        }
        .card-img {
            height: 200px;
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
        }
        .card-header {
            text-align: center;
            padding: 20px;
            font-family: Arial;
        }

        .card-title {
            font-size: 30px;
            padding-top: 10px;
            padding-bottom: 30px;
        }
        .bi-chevron-bar-left {
            font-size: 25px;
        }
        .bi-chevron-bar-right {
            font-size: 25px;
        }
        .bi-play-fill {
            font-size: 50px;
        }
        .controls {
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
   <div class="card">
       <div class="card-header">
            <div class="card-title">Arjit Singh</div>
            <div class="controls">
                <span class="bi bi-chevron-bar-left"></span>
                <span class="bi bi-play-fill"></span>
                <span class="bi bi-chevron-bar-right"></span>
            </div>
       </div>
       <div class="card-body">
          <img src="./images/arjitsingh.jpg" class="card-img">
       </div>
   </div>

   <div class="card">
    <div class="card-header">
         <div class="card-title">Arjit Singh</div>
         <div class="controls">
             <span class="bi bi-chevron-bar-left"></span>
             <span class="bi bi-play-fill"></span>
             <span class="bi bi-chevron-bar-right"></span>
         </div>
    </div>
    <div class="card-body">
       <img src="./images/arjitsingh.jpg" class="card-img">
    </div>
</div>
</body>
</html>

10/04
====
Image Attributes
1. src
2. width & height
3. alt            : It defines the alternative text to display when image fails to load.
4. title            : It defines the text to display when mouse is over image.

Syntax:
 <img src="./images/pic.jpg"  alt="alternative text"  title="screen tips">

5. border            : It sets border for image by specified pixels.

6. align            : It aligns image left or right. It is used for wrapping text around image

7. hspace        : It sets horizontal padding between text and image

8. vspace         : It set vertical padding between text and image

Syntax:
  <img src="./images/pic.jpg"  align="left" hspace="20" vspace="20">

9. crossorigin         : It refers to CORS [Cross Origin Resource Sharing].
                  It can restrict accessibility of image by using various authentication
                  techniques.

                       a) anonymous
                    b) use-credentials

Syntax:
  <img src="some_path"  crossorigin="use-credentials">


10. decoding         : It defines how image can load along with other content in page.

                    a) sync
                    b) async
                    c) auto

Syntax:
  <img src="path"  decoding="async | sync | auto">


11. importance     : It sets priority for image. You can load according to priority.
                    a) low
                    b) high
                    c) auto

Syntax:
   <img src="path"  importance="low | high | auto">

12. loading        : It defines the loading technique for image, which can be
                    a) eager
                    b) lazy
                  Lazy loading is a technique of loading only when required.

Syntax:
   <img src="path"  loading="lazy | eager">


13. srcset        : It configure a set of images for element.
                  It requires styles to rotate images according to state and situation.


Syntax:
   <img  srcset="collection_of_images">


Ex: Cards Design - Naresh IT cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Naresh IT</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .card {
            width: 250px;
            margin: 20px;
            border-radius: 10px;
            border:1px solid gray;
            box-shadow: 2px 2px 2px black;
            font-family: Arial;
        }
        .card-img {
            width: 100%;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            height: 150px;
        }
        .card-header {
          height: 150px;
        }
        .card-body {
            padding: 20px;
        }
        .card-title {
            text-align: center;
            font-size: 22px;
            font-weight: bold;
        }    
        .rating {
            text-align: center;
            color:goldenrod;
            padding-top: 20px;
        }
        ul {
            list-style: none;
            margin-left: -40px;
        }
        li {
            line-height: 30px;
        }
        .card-footer {
            display: grid;
            grid-template-columns: 6fr 6fr;
            text-align: center;
        }
        .btn-enroll {
            background-color: blue;
            color:white;
            padding: 10px;
            border-bottom-left-radius: 10px;
        }
        .btn-share {
            background-color: whitesmoke;
            padding: 10px;
            border-bottom-right-radius: 10px;
        }
        section {
            display: flex;
            flex-direction: row;
        }
    </style>
</head>
<body>
   <section>
      <div class="card">
         <div class="card-header">
            <img src="./images/power-bi.png" class="card-img">
         </div>
         <div class="card-body">
            <div>
                <div class="card-title">Power PI</div>
                <div class="rating">
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                    <span class="bi bi-star-fill"></span>
                </div>
            </div>
            <div>
                <ul>
                    <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                    <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                    <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
                </ul>
            </div>
         </div>
         <div class="card-footer">
            <div class="btn-enroll">
                Enroll
            </div>
            <div class="btn-share">
               <span class="bi bi-share"></span> Share
            </div>
         </div>
      </div>


      <div class="card">
        <div class="card-header">
           <img src="./images/python.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">Python</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>

     <div class="card">
        <div class="card-header">
           <img src="./images/react.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">React JS</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>

     <div class="card">
        <div class="card-header">
           <img src="./images/data sci.png" class="card-img">
        </div>
        <div class="card-body">
           <div>
               <div class="card-title">Data Science</div>
               <div class="rating">
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
                   <span class="bi bi-star-fill"></span>
               </div>
           </div>
           <div>
               <ul>
                   <li class="bi bi-calendar-date"> <span>Start Date</span> <span>:</span> <span>10 Apr 2025</span> </li>
                   <li class="bi bi-person"> <span>By</span> <span>:</span> <span>Mr.Someone</span> </li>
                   <li class="bi bi-clock"> <span>Duration</span> <span>:</span> <span> 60 Days </span> </li>
               </ul>
           </div>
        </div>
        <div class="card-footer">
           <div class="btn-enroll">
               Enroll
           </div>
           <div class="btn-share">
              <span class="bi bi-share"></span> Share
           </div>
        </div>
     </div>
   </section>  
</body>
</html>

Ex: Podcast cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .card {
            width: 400px;
            border:1px solid gray;
            box-shadow: 3px 3px 2px black;
            border-radius: 5px;
            margin: 20px;
            display: grid;
            grid-template-columns: 6fr 6fr;
            height: 200px;
        }
        .card-img {
            height: 200px;
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
        }
        .card-header {
            text-align: center;
            padding: 20px;
            font-family: Arial;
        }

        .card-title {
            font-size: 30px;
            padding-top: 10px;
            padding-bottom: 30px;
        }
        .bi-chevron-bar-left {
            font-size: 25px;
        }
        .bi-chevron-bar-right {
            font-size: 25px;
        }
        .bi-play-fill {
            font-size: 50px;
        }
        .controls {
            display: flex;
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body>
   <div class="card">
       <div class="card-header">
            <div class="card-title">Arjit Singh</div>
            <div class="controls">
                <span class="bi bi-chevron-bar-left"></span>
                <span class="bi bi-play-fill"></span>
                <span class="bi bi-chevron-bar-right"></span>
            </div>
       </div>
       <div class="card-body">
          <img src="./images/arjitsingh.jpg" class="card-img">
       </div>
   </div>

   <div class="card">
    <div class="card-header">
         <div class="card-title">Arjit Singh</div>
         <div class="controls">
             <span class="bi bi-chevron-bar-left"></span>
             <span class="bi bi-play-fill"></span>
             <span class="bi bi-chevron-bar-right"></span>
         </div>
    </div>
    <div class="card-body">
       <img src="./images/arjitsingh.jpg" class="card-img">
    </div>
</div>
</body>
</html>

10/04
====

Ex: Amazon Cards

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Amazon</title>
    <style>
        .content-row {
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
            padding: 10px;
            margin-bottom: 30px;
        }
        .card {
            padding: 10px;
            margin: 5px;
            background-color: white;
            box-shadow: 2px 2px 2px gray;
            height: 400px;
            font-family: Arial;
        }
        section {
            margin-top: -250px;
        }
        .card-title {
            font-size: 22px;
            font-weight: bold;
        }
        .row {
            display: grid;
            grid-template-columns: 6fr 6fr;
            grid-gap: 5px;
        }
        .card-img {
            width: 100%;
        }
        .card-header {
            height: 70px;
        }
        .card-footer {
            text-align: center;
            padding-top: 20px;
        }
        .more {
            color:blue;
        }
    </style>
</head>
<body>
    <header>
        <img src="./images/amazon-banner.png" width="100%">
    </header>
    <section>
        <div class="content-row">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Appliances for your home | Up to 55% off</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a1.jpg">
                            <p>Air Conditioners</p>
                        </div>
                        <div><img class="card-img" src="./images/a2.jpg">
                             <p>Refrigerators</p>
                        </div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a3.jpg"> <p>Microwaves</p> </div>
                        <div><img class="card-img" src="./images/a4.jpg"> <p>Washing Machines</p> </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see more</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Revamp your home in style</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a5.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a6.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a7.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a8.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see all</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                   <div class="card-title"> Starting ₹149 | Headphones</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a9.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a10.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a11.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a12.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">explore all</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Automotive essentials | Up to 60% off</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a1.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a2.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a3.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a4.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see more</div>
                </div>
            </div>
        </div>

        <div class="content-row">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Appliances for your home | Up to 55% off</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a1.jpg">
                            <p>Air Conditioners</p>
                        </div>
                        <div><img class="card-img" src="./images/a2.jpg">
                             <p>Refrigerators</p>
                        </div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a3.jpg"> <p>Microwaves</p> </div>
                        <div><img class="card-img" src="./images/a4.jpg"> <p>Washing Machines</p> </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see more</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Revamp your home in style</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a5.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a6.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a7.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a8.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see all</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                   <div class="card-title"> Starting ₹149 | Headphones</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a9.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a10.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a11.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a12.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">explore all</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Automotive essentials | Up to 60% off</div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div><img class="card-img" src="./images/a1.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a2.jpg"> <p>Microwaves</p></div>
                    </div>
                    <div class="row">
                        <div><img class="card-img" src="./images/a3.jpg"> <p>Microwaves</p></div>
                        <div><img class="card-img" src="./images/a4.jpg"> <p>Microwaves</p></div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="more">see more</div>
                </div>
            </div>
        </div>
    </section>
</body>
</html>

                        Hyperlinks in HTML

- Every web application must provide a simplified navigation mechanism.
- User must able to reach to the required location with single click.
- Websites or applications use a "Site Map" for navigation among all the services provided by the business.
- Navigation is designed using Hyperlink.
- Hyperlink is a clickable text, picture or graphic that navigates user from one location to another when clicked.
- HTML can create hyperlinks by using "<a>" anchor element.
- Hyperlinks are classified into 2 types
    a) Intra document links
    b) Inter document links

Intra Document Links:
- Intra document link allow navigation from one location to another within page.
- The target location is marked with an "ID".

            <footer id="footer">
            <aside id="ads">
            <aside id="social">

- You can reach to the marked location by requesting ID with "#" hash reference.
- You can request from URL in address bar or from a hyperlink.

            http://server.com/page.html#ads
           
            <a href="#footer"> Text | Image | Graphics </a>
            <a href="#social">  any content </a>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Intra Links</title>
    <style>
        header {
            background-color: black;
            color:white;
            padding: 2px;
            text-align: center;
        }
        section {
            display: grid;
            grid-template-columns: 2fr 10fr;
            margin-top: 20px;
        }
        main {
            height: 500px;
            overflow: auto;
        }
        .menu {
            list-style: none;
            margin-left: -30px;
            font-family: Arial;
            font-size: 20px;    
        }
        li {
            margin-top: 10px;
            margin-bottom: 10px;
            width: 100px;
            background-color: black;
            color:white;
            padding: 10px;
            border-radius: 5px;
        }
        nav a {
          color:white;
          text-decoration: none;
        }
        li:hover {
            background-color: blue;
        }
        main a:visited {
            color:green;
        }
    </style>
</head>
<body>
    <header>
        <h3>Shopper</h3>
    </header>
    <section>
        <nav>
            <ul class="menu">
                <li><a href="#home">Home</a></li>
                <li><a href="#kids">Kids</a></li>
                <li><a href="#women">Women</a></li>
                <li><a href="#men">Men</a></li>
            </ul>
        </nav>
        <main>
            <h3 id="home">Home</h3>
            <p>Lorem, ipsum dolor <span>Offers on <a href="#iphone">iPhone</a></span> sit amet consectetur adipisicing elit. Porro omnis dicta blanditiis, ea quo beatae magnam! Fugiat ullam, assumenda tenetur corrupti incidunt temporibus voluptatum odit. Similique quis reprehenderit quas corporis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati sint repellat iste, a voluptates distinctio ducimus nisi est fugiat. Perspiciatis, maxime. Voluptate officiis esse quaerat animi soluta voluptates autem quae.</p>
            <h3 id="women">Women Shopping</h3>
            <img src="./images/women-fashion.jpg" width="200" height="200">
            <div>
                <a href="#home">Back to Top</a>
            </div>
            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Porro omnis dicta blanditiis, ea quo beatae magnam! Fugiat ullam, assumenda tenetur corrupti incidunt temporibus voluptatum odit. Similique quis reprehenderit quas corporis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati sint repellat iste, a voluptates distinctio ducimus nisi est fugiat. Perspiciatis, maxime. Voluptate officiis esse quaerat animi soluta voluptates autem quae.</p>
            <h3 id="men">Men Shopping</h3>
            <img src="./images/men-fashion.jpg" width="200" height="200">
            <div>
                <a href="#home">Back to Top</a>
            </div>
            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Porro omnis dicta blanditiis, ea quo beatae magnam! Fugiat ullam, assumenda tenetur corrupti incidunt temporibus voluptatum odit. Similique quis reprehenderit quas corporis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati sint repellat iste, a voluptates distinctio ducimus nisi est fugiat. Perspiciatis, maxime. Voluptate officiis esse quaerat animi soluta voluptates autem quae.</p>
             <figure id="iphone">
                <img src="./images/iphone-white.jpg" width="200" height="200">
                <figcaption>iPhone 16 (White) 128 GB</figcaption>
             </figure>
            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Porro omnis dicta blanditiis, ea quo beatae magnam! Fugiat ullam, assumenda tenetur corrupti incidunt temporibus voluptatum odit. Similique quis reprehenderit quas corporis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati sint repellat iste, a voluptates distinctio ducimus nisi est fugiat. Perspiciatis, maxime. Voluptate officiis esse quaerat animi soluta voluptates autem quae.</p>
            <h3 id="kids">Kids Shopping</h3>
            <img src="./images/kids-fashion.jpg" width="200" height="200">
            <div>
                <a href="#home">Back to Top</a>
            </div>
            <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Porro omnis dicta blanditiis, ea quo beatae magnam! Fugiat ullam, assumenda tenetur corrupti incidunt temporibus voluptatum odit. Similique quis reprehenderit quas corporis. Lorem ipsum dolor sit amet consectetur adipisicing elit. Obcaecati sint repellat iste, a voluptates distinctio ducimus nisi est fugiat. Perspiciatis, maxime. Voluptate officiis esse quaerat animi soluta voluptates autem quae.</p>
           
        </main>
    </section>
</body>
</html>

FAQ's:
1. How to change the color for visited and active links?
A. By using <body> element attributes
        - alink
        - valink
    By using CSS classes
        :active
        :visited

Syntax:
    <body  alink="red" vlink="green">

     a:visited {
         color:green;
    }
    a:active
         color:red;
     }

2. How to remove underline for hyperlink?
A. By configure "text-decoration" set to "none".

Syntax:
    a {
       text-decoration: none;
    }

3. What is difference between "src" & "href" ?
A. "src" is a getter.
    "href" is a setter. It sets a value into the browser address bar.

4. If you don't have much content to scroll to the marked location, how to highlight
    the current content?
A. By using CSS ":target" class you can highlight the current context.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .card {
            width: 200px;
            padding: 20px;
            box-shadow: 4px 4px 2px black;
            border:1px solid black;
            margin: 20px;
        }
        .card:target {
            background-color: black;
            color:white;
            border-radius: 100%;
            height: 200px;
            text-align: center;
        }
        section {
            margin-top: 50px;
            display: flex;
            flex-direction: row;
        }
        nav {
            display: flex;
            justify-content: center;
            padding: 20px;
        }
        nav span {
            font-size: 25px;
            padding-left: 20px;
            padding-right: 20px;
       
        }
    </style>
</head>
<body>
    <nav>
        <span><a href="#html">HTML</a></span>
        <span><a href="#css">CSS</a></span>
        <span><a href="#js">JavaScript</a></span>
    </nav>
    <section>
        <div class="card" id="html">
            <h3>HTML</h3>
            <p>It is a markup language.</p>
        </div>
        <div class="card" id="css">
            <h3>CSS</h3>
            <p>It is used to style DOM.</p>
        </div>
        <div class="card" id="js">
            <h3>JavaScript</h3>
            <p>It is used to manipulate DOM.</p>
        </div>
    </section>
</body>
</html>

11/04
=====

Inter Documents Links
- Inter document links handle various interactions.
- It allows
    a) Navigation to a file
    b) Navigation to any URL
    c) Access to any browser supported application
    d) Access to any client side function

Navigate to file:
- You can create a link for any existing file in your project.
- You can link to any type of file.
- Every linked document can't open in browser.
- Browser requires relative plugin's to open the file content.
- If plugin is not supported then the linked file will download.

Syntax:
        <a href="./shopper.html"> Shopper Template </a>
        <a href="./images/pic.jpg">  Photo </a>
        <a href="./docs/catalog.pdf"> Catalog </a>

FAQ: How to configure a link that always downloads the file?
Ans:  By using <a> anchor "download" attribute.

Syntax:
        <a href="./images/pic.jpg"  download="any_file_name">
        <a href="./images/pic.jpg"  download>

Navigate to URL:
- You can configure a hyperlink that navigate user from current page to any remote resource location.
- It can be a webpage, image, or any document.
- URL must have proper
    a) protocol
    b) domain
    c) reference path for resource [optional]

Syntax:
    <a  href="https://www.amazon.in"&gt; Amazon Shopping </a>
    <a href="http://www.server.com/path/file.jpg"&gt; Remote Photo </a>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <title>Document</title>
</head>
<body>
    <ol>
        <li> <a href="./shopper-template.html">Shopper Template</a> </li>
        <li> <a href="./images/women-fashion.jpg"> Women Fashion </a></li>
        <li> <a href="./images/kids-fashion.jpg" download="DSC00153.jpg"> <img src="./images/kids-fashion.jpg" width="100" height="100"> <span class="bi bi-download"></span> </a></li>
        <li> <a href="./docs/catalog.pdf"> Fitness Catalog </a> </li>
        <li> <a href="./docs/ishop.docx"> Shopping Project Document </a> </li>
        <li> <a href="https://www.amazon.in"&gt; Amazon India </a></li>
        <li> <a href="https://www.amazon.com"&gt; Amazon US </a></li>
        <li> <a href="http://mars.jpl.nasa.gov/msl-raw-images/proj/msl/redops/ods/surface/sol/01000/opgs/edr/fcam/FLB_486265257EDR_F0481570FHAZ00323M_.JPG"&gt; Mars Rover Photo</a></li>
    </ol>
</body>
</html>

Accessing browser supported application:
- Hyperlink can invoke various applications from your browser.
- Applications must support browser, the popular apps are

    a) Email App            "mailto"
    b) Phone App            "tel"
    c) Skype App            "skype"
    d) WhatsApp            "wa.me"

Syntax:
    <a href="youremail@gmail.com">  Mail </a>
    <a href="tel:+919999112234"> Call </a>
    <a hre="https://wa.me/your_number"&gt; WhatsApp </a>


Accessing Client Side Function:
- Client side functions are written using client side script like "JavaScript".
- These functions are used in BOM and DOM interactions.
   
        Browser Object Model
            - window
            - location
            - navigator
            - history
            - document

        Document Object Model
            - Event Binding
            - Style Binding
            - Class Binding
            - Data Binding etc.

- You can invoke script functions by using "javascript" reference.

Syntax:
      <a href="javascript:function(){}">  </a>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <title>Document</title>
</head>
<body>
    <ol>
       <li> For more details you can <a href="info@nareshit.in"><span class="bi bi-envelope"> info@nareshit.in</span> </a></li>
       <li> You can give a missed call to <a href="tel:+919876543211"> +919876543211 </a> </li>
       <li> You message on <span class="bi bi-whatsapp"> <a href="https://wa.me/+919876543211"&gt; +919876543211 </a> </span> </li>
       <li> Skype Us <span class="bi bi-skype"> <a href="skype:youraccount?call"> Nareshit@outlook.com </a> </span> </li>
       <li> <span class="bi bi-printer-fill"> <a href="javascript:window.print()">Print Page </a> </span> </li>
    </ol>
</body>
</html>


FAQ's:
1. How to open linked document in a new tab?
A. By using  <a> anchor "target" attribute set to "_blank".

Syntax:
    <a href="./images/fashion.jpg" target="_blank">  Fashion </a>

2. How to open linked document in a new window?
A. By using JavaScript "window.open()" method.

Syntax:
 <a href="javascript:window.open('path', 'title', ' features_for_window' )">

        window features are    : width, height, buttons etc.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <title>Document</title>
</head>
<body>
    <ol>
      <li> <a href="./images/women-fashion.jpg"> Women Fashion </a> </li>
      <li> <a href="./images/kids-fashion.jpg" target="_blank"> Kids Fashion </a> </li>
      <li> <a href="javascript:window.open('./images/men-fashion.jpg','Men','width=300 height=400')"> Men Fashion </a> </li>
      <li> <a href="./docs/catalog.pdf" target="_blank"> Catalog </a></li>
    </ol>
</body>
</html>

3. How to open linked document in the same window along with existing content in page?
A: By using HTML 5 <iframe> element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <title>Document</title>
    <style>
        body {
            display: grid;
            grid-template-columns: 2fr 10fr;
        }
        iframe {
            border:none;
        }
    </style>
</head>
<body>
   <nav>
    <ol>
        <li> <a href="./images/women-fashion.jpg"> Women Fashion </a> </li>
        <li> <a href="./images/kids-fashion.jpg" target="_blank"> Kids Fashion </a> </li>
        <li> <a href="javascript:window.open('./images/men-fashion.jpg','Men','width=300 height=400')"> Men Fashion </a> </li>
        <li> <a href="./docs/catalog.pdf" target="main-frame"> Catalog </a></li>
        <li> <a href="./images/a9.jpg" target="main-frame"> <img src="./images/a9.jpg" width="50" height="50"> </a> </li>
        <li> <a href="./shopper-template.html" target="main-frame">Shopper</a> </li>
        <li> <a href="https://www.youtube.com/embed/pLkzLBCBeuA&quot; target="main-frame"> Java Functions </a> </li>
        <li> <a href="https://www.youtube.com/embed/OzltVfNBKt4&quot; target="main-frame"> AWS Workshop </a> </li>
      </ol>
   </nav>
   <main>
        <iframe name="main-frame" width="100%" height="550"></iframe>
   </main>
</body>
</html>

12/04
=====
Iframe in HTML

- iFrame allows to embed any content into page.
- Embedded content can be any resource or URL.

Syntax:
    <iframe  width=""  height=""  src="">  </iframe>

- You can embed video content, power point presentation, images, and all type of
  documents whose plugins are supported by browser.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <iframe width="400" height="300" src="./docs/catalog.pdf"></iframe>
    <iframe width="400" height="300" src="https://www.youtube.com/embed/F_LARJNfJz4"></iframe&gt;
    <iframe src="https://www.slideshare.net/slideshow/embed_code/key/pUigQOhQkfVV6q?startSlide=1&quot; width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;max-width: 100%;" allowfullscreen></iframe><div style="margin-bottom:5px"><strong><a href="https://www.slideshare.net/ZintleTonyela/html-111759899&quot; title="Html" target="_blank">Html</a></strong> from <strong><a href="https://www.slideshare.net/ZintleTonyela&quot; target="_blank">Zintle Tonyela</a></strong></div>
   
</body>
</html>


Ex: YouTube Design

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Youtube</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            font-family: Arial;
        }
        .bi-justify {
            font-size: 30px;
        }
        .search-bar {
            display: flex;
            flex-direction: row;
            width: 400px;
            justify-content: space-between;
            border:1px solid gray;
            border-radius: 20px;
            padding: 10px;
        }
        .search-container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 500px;
            align-items: center;
        }
        .bi-mic-fill {
            font-size: 20px;
            background-color: lightgray;
            padding: 5px;
            border-radius: 100%;
            width: 25px;
            height: 25px;
            text-align: center;
        }
        .bi-three-dots-vertical {
            font-size: 22px;
        }
        .btn-signin {
            border:1px solid blue;
            padding: 10px;
            border-radius: 20px;
            color:blue;
        }
        section {
            margin-top: 20px;
            display: grid;
            grid-template-columns: 1fr 11fr;
        }
        .banner {
            border-radius: 20px;
        }
        nav {
            font-family: Arial;
        }
        .nav-item{
            margin-top: 20px;
            margin-bottom: 20px;
            text-align: center;
            margin-left: -40px;
        }
        .nav-text {
            font-size: 12px;
        }
        .nav-icon {
            font-size: 18px;
        }
        main {
            height: 500px;
            overflow: auto;
        }
        article {
            display: grid;
            grid-template-columns: 2fr 10fr;
            margin-top: 20px;
            font-family: Arial;
        }
        .logo {
            border:1px solid red;
            border-radius: 100%;
            padding: 5px;
        }
        .article-title {
            font-weight: bold;
            font-size: 25px;
            margin-bottom: 10px;
        }
        .article-subtitle {
            font-size: 15px;
            color:gray;
            margin-bottom: 20px;
        }
        .article-text {
            margin-bottom: 10px;
        }
        .btn-subscribe {
            margin-top: 10px;
            display: block;
            background-color: black;
            color:white;
            border-radius: 20px;
            width: 100px;
            padding: 10px;
        }
        .services {
            margin-top: 20px;
            font-family: Arial;
        }
        .services-menu span {
            font-size: 20px;
            padding-left: 30px;
        }
        .services-menu span:first-child {
            font-weight: bold;
            text-decoration: underline;
        }
        .services-menu .bi-search {
            color:gray;
        }
        .services-menu {
            margin-bottom: 20px;
        }
        .live-video {
            padding-left: 30px;
            margin-top: 30px;
            display: grid;
            grid-template-columns: 2fr 10fr;
            grid-gap: 30px;
        }
        .live-text {
            width: 80%;
            margin-top: 20px;
        }
        .live-title {
            font-size: 18px;
            font-weight: bold;
            padding-bottom: 20px;
        }
        .live-subtitle {
            color:gray;
        }
        .videos {
            display: grid;
            grid-template-columns: 2.4fr 2.4fr 2.4fr 2.4fr 2.4fr;
        }
        .videos iframe {
            width: 210px;
        }
        .card-footer {
            padding-top: 20px;
        }
        .card-body{
            padding-top: 10px;
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="bi bi-justify"></span>
            <img src="./images/youtube-logo.jpg" width="100">
        </div>
        <div class="search-container">
            <div class="search-bar"> <span>Search</span> <span class="bi bi-search"></span> </div>
            <span class="bi bi-mic-fill"></span>
        </div>
        <div>
            <span class="bi bi-three-dots-vertical"></span>
            <span class="btn-signin"> <span class="bi bi-person-circle"></span> Sign in </span>
        </div>
    </header>
    <section>
        <nav>
          <div class="nav-item">
             <span class="bi bi-house-door nav-icon"></span>
             <br>
             <span class="nav-text">Home</span>
          </div>
          <div class="nav-item">
            <span class="bi bi-camera-video nav-icon"></span>
            <br>
            <span class="nav-text">Videos</span>
         </div>
         <div class="nav-item">
            <span class="bi bi-play-btn nav-icon"></span>
            <br>
            <span class="nav-text">Subscription</span>
         </div>
         <div class="nav-item">
            <span class="bi bi-person-circle nav-icon"></span>
            <br>
            <span class="nav-text">Profile</span>
         </div>
        </nav>
        <main>
            <img class="banner" src="./images/channel-banner.jpg" width="90%">
            <article>
                <div>
                    <img class="logo" src="./images/nit-logo.jpg">
                </div>
                <div>
                    <div class="article-title">Naresh i Technologies</div>
                    <div class="article-subtitle">
                        @NareshIT• 1.32M subscribers • 3.4K videos
                    </div>
                    <div class="article-text">
                        We are one of the software training organization With a library of 200+ courses
                    </div>
                    <div>
                        <a href="instagram.com/nareshitech">instagram.com/nareshitech</a> and 7 more links
                    </div>
                    <div>
                        <span class="btn-subscribe"> <span class="bi bi-bell-fill"></span> Subscribe</span>
                    </div>
                </div>
            </article>
            <div class="services">
                <div class="services-menu">
                    <span>Home</span>
                    <span>Videos</span>
                    <span>Shorts</span>
                    <span>Live</span>
                    <span>Playlists</span>
                    <span>Posts</span>
                    <span class="bi bi-search"></span>
                </div>
                <hr noshade width="95%" size="0.5" color="gray">
                <div class="live-video">
                    <div>
                        <iframe src="https://www.youtube.com/embed/F_LARJNfJz4"></iframe&gt;
                    </div>
                    <div>
                        <div class="live-title">Playwright Automation | Mr. Sumanth | Naresh IT</div>
                        <div class="live-subtitle">
                            Naresh i Technologies • 14 watching
                        </div>
                        <div class="live-text">
                            https://chat.whatsapp.com/K5VsfaOdAO0BYgLe7JgnFd Introduction to Playwright Automation | Mr. Sumanth ** For Online Training Registration: https://goo.gl/r6kJbB ► Call: +91-8179191999 ...
                        </div>
                    </div>
                </div>
                <h3>Videos</h3>
                <div class="videos">
                    <div class="video-card">
                        <div class="card-header">
                            <iframe src="https://www.youtube.com/embed/HDte6jsic0U"></iframe&gt;
                        </div>
                        <div class="card-body">
                            Mastering Centralized Cloud Networking with AWS
                        </div>
                        <div class="card-footer">
                            <span class="bi bi-eye-fill"> 900 views</span>
                            <span> 5 days ago </span>
                        </div>
                    </div>
                    <div>
                        <iframe src="https://www.youtube.com/embed/OzltVfNBKt4"></iframe&gt;
                    </div>
                    <div>
                        <iframe src="https://www.youtube.com/embed/F_LARJNfJz4"></iframe&gt;
                    </div>
                    <div>
                        <iframe src="https://www.youtube.com/embed/F_LARJNfJz4"></iframe&gt;
                    </div>
                    <div>
                        <iframe src="https://www.youtube.com/embed/F_LARJNfJz4"></iframe&gt;
                    </div>
                </div>
            </div>
        </main>
    </section>
</body>
</html>

15/04
=====
Tables in HTML
- Tables are used to design Grid components.
- Grid is a collection of rows and columns.
- Data Grid is a component that is used for presenting and manipulating data.
- HTML table elements are

        <table>
        <caption>
        <thead>
        <tbody>
        <tfoot>
        <tr>
        <th>
        <td>
        <colgroup>

Table Attributes:

1. Frame, Rules & Border
   
     frame : It sets a frame for table. It have values: box, void, above, below, rhs, lhs.

            <table frame="box | void..">

             It can take only one value for attribute. Hence you can't apply multiple.

         
    rules  : It sets rules [lines] for rows, columns and groups.
            It have values : all, rows, cols, groups, none.

            <table rules="all | rows | cols.. ">

    border: It sets border for cells. It can have values 0=false, 1=true.

             <table border="1">
           
            You can't display border if rules attribute is defined for table.
            Make sure that rules attribute is removed from table.

2. Cell Space and Padding

    cellspacing    : It sets space between cells.
    cellpadding    : It sets space between border and content inside cell.

Syntax:
    <table cellspacing="5"  cellpadding="5" border="1">

3. Align Horizontal & Vertical

    align            : It aligns content left, center, right or justified horizontally.
    valign        : It aligns content top, center or bottom vertically.

Syntax:
    <table align="center">
    <tbody align="center">
    <tr align="center">
    <td align="center" valign="top">

4. Back color & Image

    bgcolor        : It sets background color for table, group, row, or cell.
    background    : It sets background image for table, group, row or cell.

Syntax:
    <table bgcolor="yellow">
    <tr background="./images/pic.jpg">

5. Width & Height

    width        : It is defined only for table, td or th.
                  It sets to entire column.

    height        : It is defined only for  tr & td.
                   It sets to entire row.

Syntax:
    <th width="20">
    <tr height="30">


6. Merging rows & columns

    colspan        : It merges specified number of cells into one cell.
                  It is used to merge all columns into one column.

    rowspan        : it is used to merge all rows into one row.

Note: You can apply only for td or th.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <table border="1" width="100%">
        <thead>
            <tr>
                <th colspan="2">Name</th>
                <th colspan="3">Address</th>
            </tr>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>City</th>
                <th>State</th>
                <th>Postal Code</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td rowspan="7" align="center"> D<br>E<br>L<br>H<br>I </td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" align="center">&copy; copyright 2025</td>
            </tr>
        </tfoot>
    </table>
</body>
</html>

 Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Table</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        table {
            font-family: Arial;
        }
        caption {
            text-align: left;
            margin-bottom: 10px;
            font-weight: bold;
            color:gray;
        }
        .img-team {
            width: 20px;
            padding-right: 10px;
        }
        .won {
            display: inline-block;
            width: 15px;
            height: 15px;
            border-radius: 15px;
            border: 1px solid green;
            padding: 5px;
            text-align: center;
            font-size: 14px;
            color:green;
        }
        .lost {
            display: inline-block;
            width: 15px;
            height: 15px;
            border-radius: 15px;
            border: 1px solid red;
            padding: 5px;
            text-align: center;
            font-size: 14px;
            color:red;
        }
    </style>
</head>
<body>
    <table width="100%"  border="0" rules="rows" frame="void" cellspacing="5" cellpadding="10">
        <caption>IPL Points Table</caption>
        <colgroup span="11"></colgroup>
        <thead>
            <tr>
                <th colspan="12">IPL - 2025</th>
            </tr>
            <tr >
                <th width="20">POS</th>
                <th>&nbsp;</th>
                <th>TEAM</th>
                <th>P</th>
                <th>W</th>
                <th>L</th>
                <th>NR</th>
                <th>NRR</th>
                <th>FOR</th>
                <th>AGAINST</th>
                <th>PTS</th>
                <th width="150">RECENT FORM</th>
            </tr>
        </thead>
        <tbody >
            <tr align="center" valign="center">
                <td>1</td>
                <td><span class="bi bi-dash"></span></td>
                <td> <img src="./images/GT.png" align="left" class="img-team"> <span>GT</span> </td>
                <td>6</td>
                <td>4</td>
                <td>2</td>
                <td>0</td>
                <td>1.081</td>
                <td>1148/114.3</td>
                <td>1069/119.3</td>
                <td>8</td>
                <td align="center">
                    <span class="lost">L</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                </td>
            </tr>
            <tr align="center" valign="center">
                <td>2</td>
                <td><span class="bi bi-dash"></span></td>
                <td> <img src="./images/DC.png" align="left" class="img-team"> <span>DC</span> </td>
                <td>5</td>
                <td>4</td>
                <td>2</td>
                <td>0</td>
                <td>1.081</td>
                <td>1148/114.3</td>
                <td>1069/119.3</td>
                <td>8</td>
                <td align="center">
                    <span class="lost">L</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                    <span class="won">W</span>
                </td>
            </tr>
            <tr align="center" valign="center">
                <td>3</td>
                <td><span class="bi bi-dash"></span></td>
                <td> <img src="./images/RCB.png" align="left" class="img-team"> <span>RCB</span> </td>
                <td>6</td>
                <td>4</td>
                <td>2</td>
                <td>0</td>
                <td>1.081</td>
                <td>1148/114.3</td>
                <td>1069/119.3</td>
                <td>8</td>
                <td align="center">
                    <span class="lost">L</span>
                    <span class="won">W</span>
                    <span class="lost">L</span>
                    <span class="won">W</span>
                    <span class="lost">L</span>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="12">
                    <div>W  - Won</div>
                    <div>L  - Lost</div>
                    <div>NR - No Result</div>
                    <div>NRR- Net Run Rate</div>
                </td>
            </tr>
        </tfoot>
    </table>
</body>
</html>

16/04
=====

Note: You can create nested table, but make sure that the child table is inside
      <td> element.

Syntax:
        <table>
            <tr>
             <td>
                      <table>
                   ........
                 </table>
            </td>
            </tr>
           </table>

Ex: Nested Tables

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <table width="100%" border="1" frame="void" cellspacing="10" cellpadding="10">
        <tr height="400">
            <td>
                <table width="100%" border="0" frame="void" height="400">
                    <thead>
                        <tr>
                            <th colspan="2">Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                            <td> <img src="./images/a2.jpg" width="100%"></td>
                        </tr>
                        <tr>
                            <td><img src="./images/a3.jpg" width="100%"></td>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2">More</td>
                        </tr>
                    </tfoot>
                </table>
            </td>
            <td>
                <table width="100%" border="0" frame="void" height="400">
                    <thead>
                        <tr>
                            <th colspan="2">Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                            <td> <img src="./images/a2.jpg" width="100%"></td>
                        </tr>
                        <tr>
                            <td><img src="./images/a3.jpg" width="100%"></td>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2">More</td>
                        </tr>
                    </tfoot>
                </table>
            </td>
            <td>
                <table width="100%" border="0" frame="void" height="400">
                    <thead>
                        <tr>
                            <th colspan="2">Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                            <td> <img src="./images/a2.jpg" width="100%"></td>
                        </tr>
                        <tr>
                            <td><img src="./images/a3.jpg" width="100%"></td>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2">More</td>
                        </tr>
                    </tfoot>
                </table>
            </td>
            <td>
                <table width="100%" border="0" frame="void" height="400">
                    <thead>
                        <tr>
                            <th colspan="2">Title</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                            <td> <img src="./images/a2.jpg" width="100%"></td>
                        </tr>
                        <tr>
                            <td><img src="./images/a3.jpg" width="100%"></td>
                            <td><img src="./images/a1.jpg" width="100%"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="2">More</td>
                        </tr>
                    </tfoot>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>

www.telerik.com

                                   Forms in HTML
- Form is a generic container.
- It provides an UI for user, so that user can view, input, edit or delete values in a data store.
- It allows to handle various interactions by using different elements like
        button
        textbox
        checkbox
        radio
        listbox
        dropdown  etc.

- The <form> container is used to create an UI for handling CRUD.

        C    Create
        R    Read
        U    Update
        D    Delete

- Form is a generic container with validation, actions and methods pre-defined.

Syntax:
        <form>
            ... elements ...
        </form>

Form Attributes:

1. id                ]
2. name            ]   used for reference in CSS, JavaScript etc.
3. class            ]

Syntax:
        <form  id="frmLogin"  name="LoginForm"  class="form-group">

        </form>

4. method        : It defines the actions to be performed.
                  It defines the functionality to configure.
                  HTML form can be configured for 2 requests
                    a) GET
                    b) POST

                  GET submits to fetch data from server.
                  POST submits to save data on server.

                       
                        GET  vs   POST
GET
- It is a request method to submit data for fetching.
- It submits data as "Query String".
- Query string is appended into URL and displayed in browser address bar.

            page.html ?key1=value1&key2=value2

- Query is a key and  value collection appended with ? mark and &.
- Everyone can view the values.
- It is easy to hack the values.
- It is not safe.
- It is stored in browser logs. [history]
- It can be bookmarked. [favorites]
- You can't submit complex data, like binary type data.
- There is a limit for data, max 2048 chars as per standards.

POST:
- It is a request method to submit and save data on server.
- It submits the data as "Form Body".
- It is not stored in browser logs.
- It can't be bookmarked.
- It is safe when compared to GET.
- It is not easy to hack your data.
- It allows complex formats of data.
- There is no limit for data.


FAQ: If GET is not good for saving on server, then why form allows to save on GET?
Ans: GET request can cache the data. Hence it can save round trips to server.
     
Note: POST can't cache the data.
      It is mandatory to define the target location while configuring POST action.






5. action            : It specifies the target location for submitting form data.
                   Typically it is a client side or server side page.

Syntax:
        <form method="get"  action="./page.html | php | jsp">


6. novalidate        : It disables the default HTML 5 validations.

Syntax:
        <form method="get"  action="./page.html"  novalidate>

           
                    Form Elements

17/04
=====

Form Attributes
- id
- name
- class
- method
- action
- novalidate
Form Elements:

                                TextBox
- It is an input that allows user to view, input and edit value.
- It is handles a string type data.
- String is a literal with group of characters like alphabet, number and special chars.
- Form <input> element allows to input a value.
- However HTML 5 introduces types for input data. So that it can set validation.

    Syntax:
        <input type="text">            => handle string

Attributes:
1. id            ]
2. name        ]  used for reference
3. class        ]

Note: A form can't submit the value of any element if "name" is not defined.
      Every form element must have a name attribute.

      <input type="text"  name="txtName">

      Names are defined using camel case. [ prefixSuffix ]

4. value        : It specifies the default value to display in textbox.

Syntax:
     <input type="text" name="txtName"  value="john">

5. readonly    : It will not allow to modify the value in textbox, but it allows to submit
              the value.

6. disabled     : It will not allow to modify & submit value.

Syntax:
      <input type="text"  name="txtName"  value="John"  disabled>
      <input type="text"  name="txtName"  value="John"  readonly>

7. placeholder : It defines the watermark text to display for textbox.
              You can see placeholder only when value is not defined.


Syntax:
    <input type="text" name="txtMobile"  placeholder="+91 90000000011">


8. autofocus    : It sets focus for textbox automatically on load.

Syntax:
    <input type="text" name="txtMobile"  autofocus>

9. size        : It sets width for textbox, the default width is 20.
              It is not limit for chars, it is just size of textbox.

Syntax:
    <input type="text" name="txtOTP"  size="5">
    <input type="text" name="txtComments" size="40">

10. maxlength : It specifies the maximum limit of characters in textbox.
              It sets restriction for number of characters.

Syntax:
    <input type="text" name="txtOTP size="5" maxlength="5">

11. minlength    : It sets validation for minimum number of chars in a textbox.

Syntax
    <input type="text" name="txtName" minlength="4" maxlength="10">

    - You can't type more than 10 chars     : it is restriction
    - You can type less than 4 chars button it will not accept :  It is validation

12. required    : It is used for mandatory fields. It will not allow to submit empty.
              It is used to ensure that value is defined in a textbox.


Syntax:
    <input type="text" name="txtName"  required>

Note:  Minlength verifies the length of chars if entered. It will not verify the required
       condition. Hence textbox needs both required and minlength.

13. list        : It is used to configure a datalist for textbox.
             Form datalist is a set of options that are displayed as auto complete text.

Syntax:
       <input type="text"  name="txtCourse"  list="courses">
       <datalist id="courses">
        <option> Java </option>
        <option> JavaScript </option>
       </datalist>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form</title>
</head>
<body>
    <form>
         <dl>
            <dt>User Name</dt>
            <dd><input type="text"  name="txtName" required minlength="4" maxlength="10" placeholder="Name in block letters"></dd>
            <dt>Mobile</dt>
            <dd><input type="text" autofocus name="txtMobile" placeholder="US: +1(000) 0000-000"></dd>
            <dt>OTP</dt>
            <dd><input type="text" name="txtOTP" size="4"  maxlength="4"></dd>
            <dt>Your Course</dt>
            <dd>
                <input type="text" name="txtCourse" list="courses">
                <datalist id="courses">
                    <option>Java</option>
                    <option>JavaScript</option>
                    <option>Oracle</option>
                    <option>AWS</option>
                    <option>UI Front End</option>
                    <option>UI Full Stack</option>
                    <option>Azure</option>
                </datalist>
            </dd>
         </dl>
         <button>Submit</button>
    </form>
</body>
</html>

14. pattern        : It is used to verify the format of input value.
                  Format is verified by using a regular expression.
                  Regular Expression is built by using meta characters & quantifiers.

18/04
=====

Attributes for Textbox
1. id
2. name
3. class
4. value
5. readonly
6.disabled
7. size
8. autofocus
9. minlength
10. maxlength
11. required
12. list
13. placeholder
14. pattern

Meta character        Description
--------------------------------------------------------------------------------------------------------

    ?                zero or one occurrence of a character.

                    Syntax:
                    pattern="colou?r"      => color, colour

    *                zero or more occurrences of a character.

                    Syntax:
                    pattern="colou*r"    => color, colour, colouur, colouuur..

    +                one or more occurrences of a character
   
                    Syntax:
                    pattern="colou+r"    => colour, colouur, colouuur..

    .  (dot)            any single character [alphabet, number or special]

                    Syntax:
                    pattern=".at"    => cat, bat, 2at, $at ..

    |   (or)            It refers to logical or in pattern where you can configure
                    multiple and it can match with any one of them.

                    Syntax:
                    pattern="red | green | blue"     => red, green, blue

    \                It is used as an escape sequence character.
                    It can transform meta character to normal & vice versa.

                    Syntax:
                    pattern="gmail.com"    => gmail2com, gmail$com...
                    pattern="gmail\.com"    => gmail.com
   
    [ ]                It configures a set of values in random or range.

                    [a,d,s]        => only specified chars allows                                    [A,a,d,D,s,S]    => both lower can uppercase of specified set
                    [a-m,A-M]    => any char with in specified range
                    [0-9]            => any numeric
                    [4-5]            => any number with in specified range
                    [4,7,9]        => only specified numbers
                    [a-z,A-Z,0-9]    => all alphabet & numbers
                    [$,%,&,@]    => only specified special chars allowed.

                    Syntax:
                    pattern= "[A-Z][0-9][a-z]"        => B4u
                    pattern= "[0-9][0-9]"        => 31, 24, 66
                    pattern="[0-9][0-9]?"        => 3, 31
                    pattern="[0-9][A-Z]?[0-9]        => 4A5,  52
                   
    [^]                It is used to exclude the specified set of value.
                    It allows all other than the specified.

                    [^a,d,s]            => a,d,s not allowed
                    [^A-Z, a-z, 0-9]    => all special chars allowed

    ( )                It is used for a union of expression.


    \d                It refers to any number from 0 to 9.

    \D                It excludes number and allow all others.

                    Syntax:
                    pattern="\D\d"        => a5, A5, $5                
                    pattern="\d\d?"    => one or two digits number

    \w                It refers words chars, which include alphabet, number &
                    underscore.  [a-z,A-Z,0-9, _ ]
                   
    \W                It refers to non-word chars. All special chars except "_".

                    Syntax:
                    pattern="\W\d\D"        $4A, $4a, $4#

    \s                It refers to blank space. You should not use a manual blank
                    space in pattern. It is always defined with "\s".

                    Syntax:
                    pattern="\d\s[A-Z]"        4 A,  5 H

    \i                It ignores the capitalization of text in expression.

                    Syntax:
                    pattern="colou?r\i"        color, Color, Colour

    \^                It refers expression starts with.

    $                It refers expression ends with.

                    Syntax:
                    pattern="\^ ....expression... $"


    Quantifier             Description
-----------------------------------------------------------------------------------------
      { 4 }                    exactly specified number of chars.

     { 4, 10 }                minimum 4 and maximum 10 chars.

     { 4,  }                minimum 4 and maximum any chars.

    Syntax:
   
    pattern = "\d{10}"                    exactly 10 digits number
    pattern = "\d{2}[A-Z]{3}\s\W{2}"        32HYD $#

    Query: Write a pattern for Indian mobile format  +91 and 10 digits number.

    pattern= "\+91\d{10}"
    pattern="\+91[0-9]{10}"

    Query: Write a patter for US mobile format as shown below
           
                +(1)(000) 000-0000

            pattern="\+\(1\)\(\d{3}\)\s\d{3}-\d{4}"


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form>
        Pattern : <input type="text" placeholder="+(1)(000) 000-0000" pattern="\+\(1\)\(\d{3}\)\s\d{3}-\d{4}" name="pattern"> <button>Submit</button>
    </form>
</body>
</html>

19/04
=====

Built-in patterns:

    (?=.*[A-Z])         At least one uppercase letter
    (?=.*[0-9])        At least one numeric
    (?=.*[a-z])        At least one lower case letter
    (?=.*[!@#$%&])    At least one special character

- You have to use the expression individually even when you are referring to multiple.

    (?=.*[A-Z,0-9])                // Not Good
    (?=.*[A-Z])(?=.*[0-9])        // Good

- Avoid using meta characters like \d, \w etc.

    (?=.*[\d])                    // Not Good
    (?=.*[0-9])                // Good


Query: Write a pattern to validate user name 4 to 15 chars alpha numeric.
        Special chars not allowed. Uppercase & Lower case allowed.

       Syntax:
        pattern="[a-z,A-Z,0-9]{4,15}"


Query: Write a pattern to validate User name alpha numeric with _ allowed.
        between 4 to 14 chars. But it must start with uppercase letter.

    Syntax:
        pattern="[A-Z]\w{4,14}"

Query: Write a pattern to validate user name alpha number with underscore
         4 to 15 chars with at least one uppercase letter.

        Note: Always write the priority first.

    Syntax:
        pattern="(?=.*[A-Z])\w{4,15}"

Query: Write a pattern to validate user name alpha numeric with underscore and
        special chars. But at least one uppercase, one number & one special char
        is required. [ 4 to 15 ]

    Syntax:    
        pattern="(?=.*[A-Z])(?=.*[0-9])(?=.*[\W])[\w,\W]{4,15}"


                         Password Input

- It is a string input that can mask the chars with "*".
- All attributes are same as textbox.
- Only "list" attribute is not recommended for password.

Syntax:
    <input type="password" name="Password" required pattern="">

                        Number Input
- It allows to input numeric value.
- It can set step value and range for number.

Attributes:
    a) min
    b) max
    c) step

Syntax:
  <input type="number" name="rate"  min="10.45" max="20.45" step="0.01" value="12.45" required autofocus>

                        Range Input

- It similar to a number input, but contains a slider to select value.
- It will not allow to enter a value.
- It allows only to choose a value.

Syntax:
    <input type="range"  name="rate"  min="1" max="100" value="50" step="5">

                        Color Input

- It shows a color picker that allows to select color from panel.
- Color value must be a 6 chars hexadecimal.

Syntax:
  <input type="color" name="color" value="#ff0000">

                        Email Input

- It a string with default email validation.
- It ensures that the string contains "@" character.

Syntax:
    <input type="email"  autofocus  required  name="Email">


                        URL Input
- It validates a string in URL format.
- URL must have a protocol and proper domain extension.

         www.amazon.in            // invalid
        https://www.amazon.in        // valid
        http://www.amazan.in        // valid

Syntax:
    <input type="url" name="URL" required autofocus>

21/04
=====
- Textbox
- Password
- Number
- Range
- Email
- Url
- Color

                           Date & Time Input

- HTML provides following input types for handling date & time values

        a) date
        b) time
        c) datetime-local
        d) week
        e) month
       
Syntax:
    <input type="date">
    <input type="datetime-local">
    <input type="week">

- HTML date picker will not allow to select a range of dates.
- You can restrict the date selection by using "min & max" attributes.
- The date format for developer is always "year-month-day".

Syntax:
 <input type="date" name="dept"  min="2025-04-21"  max="2025-05-09">


                         File Input
- It is a file browser.
- It allows to browse and select files on client device.

Syntax:
    <input type="file" name="photo">

- You can set filter for specific file type by using "accept" attribute.
- Filter is not a permanent restriction for files, it can be changed dynamically.

Syntax:
    <input type="file" name="photo" accept=".jpg">
    <input type="file" name="resume" accept=".pdf, ".docx">

Note: You can restrict the file types, you can set only filters for file types.

- You can allow selection of multiple files by using "multiple" attribute.

Syntax:
    <input type="file" name="photo" accept=".jpg" multiple>

                        Radio Buttons

- Radio allows to select one or multiple options from a group of choices.
- Radio once checked can't be unchecked.
- Developers use radios with "Mutex" mechanism. [ Mutual Exclusion ]
- Mutex configures multiple tasks to one thread.
- Hence process will allow only one task from a thread.
 
Syntax:
    <input type="radio">  Text1        => both radios are individual
    <input type="radio">  Text2    

- To implement mutex you have to define same name for all radios in a category.

Syntax:
    <input type="radio" name="gender"> Male
    <input type="radio" name="gender"> Female

- You can make any radio selected by using "checked".

Syntax:
    <input type="radio" name="gender" checked> Male

- Radios submit "ON" as default value.
- Hence every radio must be defined with a value attribute.

Syntax:
    <input type="radio" name="gender" value="Male" checked> Male

- Value is an attribute used to submit content. It is not for UI caption.
- Radios and other form elements can have a bound caption by using "<Label>" element.

Syntax:
  <input type="radio" name="gender" value="male"> <label for="gender"> Male </label>

- "for" is an attribute to bind label with relative form element. It must always map to name of element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form>
        <dl>
            <dt>Gender</dt>
            <dd>
                <input type="radio" checked value="Male" name="gender"> <label for="gender">Male</label>
                <input type="radio" value="Female" name="gender"> <label for="gender">Female</label>
            </dd>
        </dl>
        <button>Submit</button>
    </form>
</body>
</html>


                              Checkbox
- It is similar to radio but allows to check and uncheck any option dynamically.
- It requires name & value.
- It can be selected using checked.

Syntax:
    <input type="checkbox" name="course" value="HTML" checked>
    <label for="course"> HTML </label>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
</head>
<body>
    <form>
        <dl>
            <dt>User Name</dt>
            <dd>
                <input type="text" class="user" placeholder="User Name">
            </dd>
            <dt>Courses</dt>
            <dd>
                <input type="checkbox" checked value="HTML" name="Course"> <label for="Course"> HTML </label>
                <br><br>
                <input type="checkbox" checked value="CSS" name="Course"> <label for="Course"> CSS </label>
            </dd>
        </dl>
        <button>Submit</button>
    </form>
</body>
</html>

                             Dropdown List
- A dropdown is technically combo box.
- It provides a set of options and allows user to select any one from group of choices.
- The elements used for dropdown are

    <select>            configures a dropdown
    <option>            defines an item in dropdown
    <optgroup>        it groups a set of options under one label.

Syntax:
    <select>
       <option> Text </option>
       <optgroup label="category-name">
        <option> Item-1 </option>
        <option> Item-2 </option>
       </optgroup>
    </select>

- Every option comprises of 3 attributes

        a) value            It defines the value to submit
        b) selected        It keeps the option selected on page load
        c) disabled        It will not allow to select option

Syntax:
    <option  value="to_submit"> text_to_show </option>
    <option  selected>  Text </option>
    <option disabled> Text </option>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
</head>
<body>
    <form>
        <dl>
            <dt>User Name</dt>
            <dd>
                <input type="text" class="user" placeholder="User Name">
            </dd>
            <dt>Courses</dt>
            <dd>
                <input type="checkbox" checked value="HTML" name="Course"> <label for="Course"> HTML </label>
                <br><br>
                <input type="checkbox" checked value="CSS" name="Course"> <label for="Course"> CSS </label>
            </dd>
            <dt>Departure</dt>
            <dd>
                <select name="Airport">
                    <option>Select City</option>
                    <optgroup label="International">
                        <option disabled>London</option>
                        <option>Newyork</option>
                    </optgroup>
                    <optgroup label="Domestic">
                        <option value="RGI">Hyderabad</option>
                        <option selected value="BOM">Mumbai</option>
                    </optgroup>
                </select>
            </dd>
        </dl>
        <button>Submit</button>
    </form>
</body>
</html>

22/04
=====

Datetime
Color
Range
Textbox
Password
Url
Email
Number
Radio
Checkbox
Dropdown

                               List Box
- You can transform a dropdown into list box by using the attributes
    a) size
    b) multiple
- List box allows to select one or multiple options from a group of choices.

Syntax:
      <select size="3" multiple>

- Options and Select are RC type elements.
- RC type allows alphabet, number & special chars.

Syntax:
       <select size="4" multiple>
          <optgroup label="title">
          <option> Text </option>
          </optgroup>
      </select>

Ex: Checkbox List

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        ul {
            list-style: none;
            border: 1px solid gray;
            padding: 10px;
            width: 100px;
            height: 50px;
            overflow: auto;
        }
    </style>
</head>
<body>
    <form>
         <ul>
            <li> <input type="checkbox"> <label>HTML</label> </li>
            <li> <input type="checkbox"> <label>CSS</label> </li>
            <li> <input type="checkbox"> <label>Bootstrap</label> </li>
            <li> <input type="checkbox"> <label>jQuery</label> </li>
            <li> <input type="checkbox"> <label>JavaScript</label> </li>
         </ul>
    </form>
</body>
</html>

                               Textarea
- It allows user to input multiline text.
- You can control textarea using
    a) rows
    b) cols
    c) readonly
    d) disabled
- It is RC type element, will not allow rich formats of text.

Syntax:
    <textarea rows="4" cols="40" readonly | disabled>

        ... your text optional ...

    </textarea>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       
    </style>
</head>
<body>
    <form>
        <dl>
            <dt>Your Comments</dt>
            <dd><textarea rows="4" cols="40"></textarea></dd>
            <dt>Terms of Service</dt>
            <dd>
                <textarea disabled rows="4" cols="40"> Lorem ipsum dolor sit amet consectetur adipisicing elit. Delectus officiis doloribus corporis enim voluptatum. Nostrum ut voluptatibus velit soluta voluptatum amet adipisci neque alias vel consequatur voluptate esse, consectetur vitae? Lorem ipsum dolor sit amet consectetur adipisicing elit. Saepe, nam autem quidem nostrum itaque earum temporibus, facere aut ex veniam mollitia esse quos tenetur minima maiores debitis blanditiis expedita totam. </textarea>
            </dd>
            <dd><input type="checkbox"> <label>I Accept</label></dd>
        </dl>
        <button>Post Comments</button>
    </form>
</body>
</html>

                        Meter & Progress Bar
- Meter is used to show grade meter.
- Progress bar is used to display status of any task performed in page.
- Meter comprises of attributes
    a) min
    b) max
    c) value
    d) low
    e) high

- If low and high value are set to zero or not defined then meter show green color.

Syntax:
        <meter min="1" max="5" value="5"> </meter>                    Green
        <meter min="1" max="5" value="5" low="0" high="0"> </meter>        Green

- Low value must be above min and below max.
- High value must be above value and below max.
            (or)
- High value must be above low and below max.

Note: If range between low & high is zero => Red
      If range between low & high is less  => Red
      If range between low & high is more => yellow
      if low & high are zero                   => Green
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       ul {
        list-style: none;
       }
       meter {
        width: 200px;
        height: 20px;
       }
    </style>
</head>
<body>
    <form>
        <ul>
            <li> <span>5 <span class="bi bi-star-fill"></span> </span> <meter min="1" max="5" value="5"></meter> </li>
            <li> <span>4 <span class="bi bi-star-fill"></span> </span> <meter min="1" max="5" value="3"></meter> </li>
            <li> <span>2 <span class="bi bi-star-fill"></span> </span> <meter min="1" max="100" value="100" low="40" high="80"></meter> </li>
            <li> <span>1 <span class="bi bi-star-fill"></span> </span> <meter min="1" max="100" value="100" low="60" high="80"></meter> </li>
        </ul>
    </form>
</body>
</html>

- Progress is similar to meter but can't configure colors.
- It is a standard progress of actions performed.

Syntax:
     <progress min="1" max="100" value="40">  </progress>  40% completed

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       progress {
        width: 200px;
        height: 20px;
       }
    </style>
</head>
<body>
    <form>
        <dl>
            <dt>Preparing for download</dt>
            <dd><progress></progress></dd>
            <dt>40% Downloaded</dt>
            <dd>
                <progress min="1" max="100" value="40"></progress>
            </dd>
        </dl>
    </form>
</body>
</html>

                                 Buttons

- Buttons are used to confirm user actions.
- Buttons in HTML are categorized into 2 types

    a) Generic Buttons
    b) Non Generic Buttons

- Generic Buttons have predefined functionality.

    a) HTML 4
        <input type="submit">
        <input type="reset">

    b) HTML 5
        <button type="submit"> Text | Image | Icon </button>
        <button type="reset"> Text | Image | Icon </button>

Note: Submit allows to submit the form data as query string on GET and
      form body on POST.
      Reset allows to reset a form to the default state.

- Non Generic button are static buttons without any pre-defined functionality

    a) HTML 4
        <input type="button" value="any">
   
    b) HTML 5
        <button type="button"> Text | Image | Icons </button>

Note: If button type is not defined in HTML 5, the default is submit type.

        <button> Text </button>        => Submit

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       progress {
        width: 200px;
        height: 20px;
       }
    </style>
</head>
<body>
    <form>
        <dl>
           <dt>Name</dt>
           <dd><input type="text" name="Name"></dd>
           <dd>
              <input type="submit" value="Register">
              <input type="reset" value="Cancel">
              <input type="button" value="Print">
           </dd>
           <dd>
             <button type="submit"> <span class="bi bi-person-fill"></span> Register </button>
             <button type="reset"> <img src="./images/a5.jpg" width="40" height="20"> Cancel</button>
             <button type="button"> <span class="bi bi-printer-fill"> Print </span> </button>
           </dd>
        </dl>
    </form>
</body>
</html>

Ex: Login Form

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .user {
            border-left: none;
            border-right: none;
            border-top: none;
            outline: none;
        }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       body {
          display: flex;
          justify-content: center;
          font-family: Arial;
       }
       form {
          width: 300px;
          border:1px solid gray;
          padding: 30px;
          border-radius: 5px;
       }
       .title {
        font-weight: bold;
        font-size: 30px;
       }
       .form-group {
          margin-top: 15px;
          margin-bottom: 15px;
       }
       .form-label {
          font-weight: bold;
          margin-bottom: 5px;
          display: block;
       }
       .form-control, .form-select {
           font-size: 20px;
           width: 95%;
           padding: 5px;
       }
       .btn-login {
          background-color: gold;
          border:none;
          font-size: 20px;
          padding: 10px;
          width: 100%;
          border-radius: 10px;
       }
       a {
        text-decoration: none;
       }
    </style>
</head>
<body>
    <form>
        <div class="bi bi-person-fill title"> User Login </div>
        <div class="form-group">
            <label class="form-label" for="UserName"> User Name </label>
            <div>
                <input type="text" placeholder="Name in Block Letters" name="UserName" class="form-control">
            </div>
        </div>
        <div class="form-group">
            <label class="form-label" for="Password"> Password </label>
            <div>
                <input type="password" placeholder="One Uppercase letter" name="Password" class="form-control">
            </div>
        </div>
        <div class="form-group">
            <label class="form-label" for="City"> Your City </label>
            <div>
                <select class="form-select" name="City">
                    <option>Select Your City</option>
                    <option>Delhi</option>
                    <option>Hyd</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            By continuing, you agree to Amazon's <a href="#">Conditions of Use</a> and <a href="#">Privacy Notice</a>.
        </div>
        <div>
            <button type="submit" class="btn-login">Login</button>
        </div>
    </form>
</body>
</html>



                          CSS Form Classes
23/04
=====

CSS Form Classes

Element State Classes:

            :hover         on mouse over
            :active         on mouse down
            :focus         on focus [ element gets focus  when you click inside ]
            :read-only     when read-only attribute is set
            :disabled          when disable attribute is set
            :checked         when radio or checkbox is checked
            :target         when element is target of any hyperlink
            :visited          when link is in visited state

FAQ: What is a class?
Ans:  Class is a program template in computer programming.
     You can customize and implement according to requirements.

Ex-1: hover, active

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        button {
            border:none;
            border-radius: 5px;
            background-color: rgb(202, 202, 0);
        }
        button:hover {
            background-color: yellow;
            cursor: grab;
        }
        button:active {
            box-shadow: 3px 3px 2px black;
        }
    </style>
</head>
<body>
    <button> Login </button>
</body>
</html>


Ex-2: Focus

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .UserName+div {
            display: none;
        }
        .UserName:focus+div {
            display: block;
            font-size: 12px;
            color:red;
        }
        .UserName:focus {
            border:1px solid red;
            box-shadow: 2px 2px 2px red;
            outline: none;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd>
            <input type="text" value="John" class="UserName" placeholder="Name in Block Letters">
            <div>Name in Block Letters</div>
        </dd>
    </dl>
</body>
</html>

Ex-3: read-only, disabled

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        input:read-only {
            cursor: not-allowed;
            background-color: lightgray;
        }
        input:disabled {
            background-color: lightyellow;
        }
    </style>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd>
            <input type="text" readonly value="John" class="UserName">
        </dd>
        <dt>Mobile</dt>
        <dd>
            <input type="text"  disabled value="+9198765554321" class="Mobile">
        </dd>
    </dl>
</body>
</html>

Ex-4: Checked

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .terms+label {
            color:red;
        }
        .terms:checked+label {
            color:green;
        }
        .terms~button {
            display: none;
        }
        .terms:checked~button {
            display: block;
        }
        .preview+img {
            display: none;
        }
        .preview:checked+img {
            display: block;
        }
    </style>
</head>
<body>
    <dl>
        <input type="checkbox" class="preview"> Preview
        <img src="./images/iphone-white.jpg" width="100" height="100">
       <dt>Terms of Service</dt>
       <dd>
         <textarea rows="4" cols="40" disabled>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Qui enim repellendus voluptatem aspernatur minima eveniet distinctio reiciendis, libero vitae mollitia et exercitationem tempora, dolores quibusdam ratione nulla odit! Nam, neque. Lorem ipsum dolor, sit amet consectetur adipisicing elit. At aspernatur repudiandae illum corporis atque quis, in nobis similique iusto officiis. Sapiente, vel magni. Quod repellat nesciunt voluptate quisquam harum facilis.</textarea>
       </dd>
       <dd>
          <input type="checkbox" class="terms"> <label> I Accept </label>
          <br><br>
          <button>Submit</button>
       </dd>
    </dl>
</body>
</html>

Validation State Classes:

           
            :required            when element set with required attribute
            :optional             when element is not having required attribute
            :in-range            when value is with in specified range
            :out-of-range        when value is not within the specified range.
            :valid            on validation pass
            :invalid            on validation fail
   
Note: "required" class is just to verify weather the attribute is defined or not.
      "required" satisfied on not is verified by using "invalid & valid" class.

       Input elements can use "placeholder" class for configuring placeholder effects.

            ::placeholder        

Syntax:
        input :: placeholder {

            // styles

        }    

                        Multimedia

24/04
=====

Multimedia Elements
- Multimedia refers to animation, audio and video content.
- HTML provides elements for handling multimedia

    a) <marquee>        [ obsolete - deprecated ]
    b) <audio>
    c) <video>
    d) <embed>         [ obsolete for video & audio ]

Marquee:
- It sets scrolling and sliding content in page.
- You can control speed, direction and style.

Syntax:
    <marquee>    ... your content ... </marquee>

Attributes:
   
 1. scrollamount        : It controls marquee scrolling speed from 1 to 100.
 2. direction            : You can set scrolling direction left, right, up & down.
 3. behavior            : It changes the scrolling to sliding using "alternate" as value.
 4. width & height        : It sets width and height for marquee area.
 5. bgcolor            : It sets background color for marquee area
 6. loop                : It specifies the number of times to display.

Syntax:
    <marquee  scrollamount="20" loop="3" direction="right" width="400" bgcolor="yellow">

        .... your content ....
        </marquee>

    <marquee behavior="alternate"> </marquee>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <marquee scrollamount="20" loop="3" bgcolor="yellow">
        Summer Sale Stars 1<sup>st</sup> May 2025 <img width="50" height="50" src="./images/iphone-white.jpg">
    </marquee>
</body>
</html>

Video & Audio:
- HTML supports video of type
    a) avi
    b) mp4
    c) mkv
    d) mov
    e) ogg etc..
- HTML support audio of type
    a) mp3
    b) wav
    c) midi etc..
- It is not recommended to embed them directly into page in modern web designing.
- You can upload into any podcasting site and embed its content into your page.

Syntax:
    <audio src=""  width="" height="" controls  poster="" autoplay> </audio>
    <video src=""  .... > </video>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
   <video src="./videos/js-class.mp4" poster="./images/data sci.png" controls width="300" height="200"></video>
</body>
</html>

25/04
=====

1. Inline
2. Embedded
    - Where to embed
    - Can we have multiple style containers
    - If multiple are defined then how priority works.
    - MIME type
    - Media

3. External File
- You can configure styles in a separate style sheet.
- It can cascade over HTML.
- Hence they are known as Cascading Style Sheets.
- You can implement styles across pages.
- Using an external style sheet will increase the number of requests for a page, which increases the page load time.

Ex:
1. Add a new style sheet into   "src/styles/home.css"

2. style attributes are directly defined as style object.

        h1
        {
          color: red;
        }

3. Link the style sheet to your HTML page.

    <link rel="stylesheet"  href="../src/styles/home.css">

Ex:
home.css

.ticket {
    background-color: yellow;
    padding: 20px;
    border:4px double red;
}
dt {
    font-weight: bold;
    background-color: red;
    color:white;
    width: 200px;
}

home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../src/styles/home.css">
</head>
<body>
   <div class="ticket">
        <h2>Your Ticket</h2>
        <aside>
            <img src="./images/a1.jpg" width="100" height="100">
        </aside>
        <dl>
            <dt>Departure</dt>
            <dd>Hyderabad</dd>
            <dt>Arrival</dt>
            <dd>Delhi</dd>
            <dt>Date</dt>
            <dd>25-April-2025</dd>
        </dl>
        <button onclick="window.print()">Print Ticket</button>
   </div>
</body>
</html>

FAQ: If styles are defined using all three techniques the which set of styles will apply?
Ans:
        1st Priority        Inline
        2nd Priority        Depends on which one is last configured.

      If same attribute is defined, then it uses priority.
      If different attributes are defined then all will apply.


FAQ: What is minification?
Ans:  Minification is a coding technique followed by developers to reduce the file size.

      It is the process of removing optional code snippets, line breaks, blank spaces
      and using all possible shortcuts to implement functionality.

      https://www.toptal.com/developers/cssminifier

FAQ: What is difference between uncompressed and minified?
Ans :  Uncompressed is heavy and occupies more memory.
       Minified is light weight and faster in render.

       Uncompressed is good for Development environment.
       Minified is good for Production environment. [ Go Live ]

Ex:
1. Copy your actual CSS code

2. Go to the minifier website  " https://www.toptal.com/developers/cssminifier "

3. Paste the actual code

4. Click Minify button

5. Copy the minified code

6. Go to your project and add  a new file  "home.min.css"

7. Paste minified code

8. Link the minified file to your page.

    <link rel="stylesheet" href="../src/styles/home.min.css">


                            CSS Selectors

- Selectors are required when you are configuring styles embedded or in external file.
- They are used to select your HTML elements to apply specified styles.

Syntax:    
        <h1 style="color:red">          without a selector

        <style>
            selector
           {
             color: red;
           }
        </style>

- CSS provides various types of selectors to select HTML elements.
- Officially CSS doesn't provide any set of categories for selectors however the popularly known categories in developers community are

    1. Primary Selectors
    2. Relational or Rational Selectors
    3. Attribute Selectors
    4. Dynamic Pseudo Classes
    5. Structural Classes
    6. Element State Classes
    7. Validation State classes
    8. Universal Selector
    9. Root Selector
    10. Language Selector etc..


Primary Selectors:
1. Type Selector
2. ID Selector
3. Class Selector

Type Selector:
- It refers to the element name.
- It configures styles to every occurrence of element in page.
- You can't ignore styles for any specific occurrence.

Syntax:
        h1, p, div, span {

        }

ID Selector:
- Every element can have a reference ID.
- CSS can access the ID and configure styles.
- You can choose elements that have to use the specified styles.

Syntax:
          #text-style
          {
         color: red;
          }

         <h1  id="text-style">
         <p id="text-style">
         <div id="text-style">

- Every element can have only one ID reference.
- You can't define multiple categories styles to one element using ID selector.

Class Selector:
- Class is configure with a set of styles under reference name starting with "."
- Every element can implement multiple classes.
- You can apply multiple categories of styles for one element.

Syntax:
        .text-style {
   
        }
   
        <h2 class="text-style">

- Multiple classes a separated with space delimiter.

        <h2 class="class1 class2  class3 ..">

28/04
=====

Primary Selectors
- Type Selector
- ID
- Class

FAQ: If styles are defined using all three primary selectors, then which set will apply?
Ans:
        1st Priority        ID selector
        2nd                Class selector
        3rd                Type selector

       If different styles attributes are defined then all will apply.

FAQ: If ID selector is defined embedded and form external file, then which one will
     apply?

Ans: Which ever style is latest that will apply. LIFO [Last In-First Out]

2. Rational / Relational Selectors

        Child selector            parent  child {  }
        Direct Child Selector    parent > child { }
        Adjacent Selector        parent + adjacent { }
        All Siblings             parent ~ sibling { }



  - Child selector applies styles to all child elements at level of hierarchy inside parent.
 
         .container  p {  }

   - Direct child applies styles to only direct elements not any nested element.

        .container > p {  }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
   
    <style>
        .container > p {
            color:red;
        }
    </style>

</head>
<body>
    <div class="container">
        <p>Para-1</p>
        <p>Para-2</p>
        <div><p>Para-3</p></div>
        <p>Para-4</p>
    </div>
</body>
</html>

 - Adjacent select immediately after the specified
            parent + adj { }

 - Siblings select all occurrences after the specified but within specified scope.
            parent ~ sibling { }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
   
    <style>
        h1~p {
            color:red;
        }
    </style>

</head>
<body>
    <div>
        <h1>Heading</h1>
        <p>Para-1</p>
        <p>Para-2</p>
        <p>Para-3</p>
        <p>Para-4</p>
        <p>Para-5</p>
    </div>  
    <p>Para-6</p>
</body>
</html>

3. Attribute Selectors
- It allows to select element based on attributes and their value.
- You can select by only attribute or by using both attribute & value.

Syntax: Verifying only attribute
   
            token[attribute]       only attribute

Syntax:  Verifying both attribute & value

            token[attribute=value]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
   
    <style>
        input[type="button"] {
            background-color: yellow;
        }
       
    </style>

</head>
<body>
    <form>
        <dl>
            <dt>User Name</dt>
            <dd><input type="text"></dd>
            <dt>Mobile</dt>
            <dd><input type="text"></dd>
        </dl>
        <input type="button" value="Submit">
        <input type="button" value="Cancel">
    </form>
</body>
</html>
       
EX:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        p[id] {
            color:red;
        }        
    </style>
</head>
<body>
    <p id>Para-1</p>
    <p>Para-2</p>
    <p id="p3">Para-3</p>
    <p>Para-4</p>
    <p id="p5">Para-5</p>
    <p>Para-6</p>

</body>
</html>

Attribute Conditions:

            [attribute=value]        exact match
            [attribute^=value]        starts with
            [attribute$=value]        ends with
            [attribute|=value]        must start with specified and can have "-"
                                delimiter when defined with others.
            [attribute~=value]        any occurrence separated with blank space.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        p[class~="Effects"] {
            color:red;
        }        
    </style>
</head>
<body>
    <p class="Effects">Para-1</p>
    <p class="ParaEffects">Para-2</p>
    <p class="Para-Effects">Para-3</p>
    <p class="Effects-Para">Para-4</p>
    <p class="Para Effects Text">Para-5</p>
    <p class="Text Para Effects">Para-6</p>
    <p class="Effects Para">Para-7</p>
    <p class="Para Effects">Para-8</p>

</body>
</html>

Note: You have group the selectors.
      CSS will not allow to group attributes.

Syntax:
        select[size], select[multiple]
        {
        }

        select[size, multiple]        // invalid
        {
        }

        p, h1, div {                // selects all to define same style

        }

        p, .bg-style, #text-style        // select all specified
        {
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       select[size], select[multiple] {
           font-size: 20px;
           background-color: yellow;
       }
    </style>
</head>
<body>
   <select>
    <option>Delhi</option>
    <option>Hyd</option>
   </select>
   <select size="2">
    <option>Delhi</option>
    <option>Hyd</option>
   </select>
   <select multiple>
    <option>Delhi</option>
    <option>Hyd</option>
   </select>
</body>
</html>

4. Structural Pseudo Classes

        :first-child                    first child element
        :last-child                    last child element
        :nth-child()                specific child or even & odd occurrences
        :nth-of-type()                It can configure every nth-occurrence from start
        :nth-last-of-type()            It can configure every nth from end.

Syntax:
    li : nth-child(3) { }            3rd element
    li : nth-child(even){ }        all even occurrences
    li : nth-of-type(3n){ }        every third start from top 3rd.
    li : nth-of-type(3n+2){ }        every third starting from top 2nd.
    li : nth-last-of-type(3n+2){}    every third starting from bottom 2nd.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       ul {
        list-style: none;
       }
       li {
         width: 100px;
         border:1px solid gray;
         padding: 5px;
         margin-top: 10px;
         margin-bottom: 10px;
       }
       li:nth-last-of-type(3n+2) {
          background-color: yellow;
       }
     
    </style>
</head>
<body>
   <ul>
      <li>Item-1</li>
      <li>Item-2</li>
      <li>Item-3</li>
      <li>Item-4</li>
      <li>Item-5</li>
      <li>Item-6</li>
      <li>Item-7</li>
      <li>Item-8</li>
      <li>Item-9</li>
      <li>Item-10</li>
   </ul>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        tbody tr:nth-child(even){
            background-color: rgb(144, 224, 144);
        }
        tbody tr:nth-child(odd){
            background-color: rgb(217, 252, 217);
        }
        thead, tfoot tr {
            background-color: green;
            color:white;
        }
    </style>
</head>
<body>
    <table border="1" width="100%">
        <thead>
            <tr>
                <th colspan="2">Name</th>
                <th colspan="3">Address</th>
            </tr>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>City</th>
                <th>State</th>
                <th>Postal Code</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td rowspan="7" align="center"> D<br>E<br>L<br>H<br>I </td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" align="center">&copy; copyright 2025</td>
            </tr>
        </tfoot>
    </table>
</body>
</html>

5. Dynamic Element State Classes
6. Validation State Classes
7. Behavioral and occurrence classes

        ::first-letter
        ::first-line
        ::before
        ::after
        ::placeholder
        ::selection

CSS Units, CSS Colors, Inheritance, Rules

29/04
=====

8. Universal Selector
 - It is used to select all elements in page.

        * {

        }

- "*" is a meta character that refers to zero or more occurrences of element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            font-family: Arial;
        }
    </style>
</head>
<body>
    <h1>Heading</h1>
    <p>Para</p>
    <div>Div</div>
    <span>Span</span>
    <input type="checkbox"> <label>Checkbox</label>
</body>
</html>


9. Root Selector
- It is used to select the root element in shadow DOM.

Syntax:
        :root {
              // styles
        }

10. Language Selector
- It is used to configure styles based on language.
- It is applicable to multilingual pages.

Syntax:
    :lang("name")
    {
       // styles
    }

Summary
- CSS Integration
- CSS Selectors
- CSS Rules

                           CSS Inheritance

- Inheritance is a mechanism where the child elements implements some of the parent features.
- You can control the inheritance by using following CSS values

        a) inherit
        b) initial
        c) unset

- "inherit" implements the parent styles.
- "initial"  ignores the parent styles.
- "unset" ignores or removes the default styles.

Syntax:
        child {
            attribute : inherit;
            attribute: initial;            
            attribute: unset;
        }

        child {
            all : inherit | initial | unset;
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .container {
            border: 3px double red;
            padding: 20px;
            color:red;
        }
        h1 {
            border:inherit;
            padding: inherit;
            color:initial;
            font-weight: unset;
        }
    </style>
</head>
<body>
    <div class="container">
         Container Text
         <h1>Welcome</h1>
    </div>
</body>
</html>

                              CSS Colors
- CSS can configure colors using
    1. color name
    2. shade name
    3. hexadecimal
    4. rgb()
    5. rgba()
    6. hsl()
    7. hsla()
    8. linear-gradient ]
    9. radial-gradient ]   background-image

                            CSS Units
- Units are requires for measurement.
- You can control the size, orientation and location using units.
- CSS units are categorized into 2 types
    a) Absolute Units
    b) Relative Units

- Absolute units doesn't depend on other elements in page.
- CSS absolute units are
    cm
    mm
    Q
    in
    pc
    pt
    px
   
- Relative units depend on relative elements like parent, root or adjacent etc.
- CSS relative units are

    a) em  [element]
    b) rem [root element]
    c) %
    d) vh  [viewport height]
    e) vw [viewport width]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .container {
            font-size: 40px;
            border: 1px solid black;
            padding: 10px;
        }
        .msg {
            font-size: 0.5em;
        }
        .body-msg {
            font-size: 0.5rem;
        }
    </style>
</head>
<body>
    body text
    <div class="container">
        Container text  
        <div class="msg">Div in container</div>
        <div class="body-msg">Body relative text</div>
    </div>
</body>
</html>

Note: "em & rem" are used relative to chars size, and not the container size.
       You have to use "%" that sets by ratio of parent.

Syntax:
     .child {
        width : 50%;
        height: 50%;
      }

Note: "vh & vw" depends on the current view port height and width.
       Viewport refers to device screen height and width.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .parent {
            width: 200px;
            height: 200px;
            border: 3px solid red;
            padding: 10px;
        }
        .child {
            border:2px dotted blue;
            height: 50vh;
            width: 50vw;
        }
    </style>
</head>
<body>
   <div class="parent">
     <div class="child">

     </div>
   </div>
</body>
</html>

Summary
- CSS Integration
- CSS Selectors
- CSS Units
- CSS Colors
- CSS Rules
- CSS Inheritance


                        CSS Box Model
1. Margins
2. Padding
3. Border
4. Border Radius
5. Width
6. Height

Margin Shorthand

        margin:  top  right  bottom left ;

        {
          margin: 20px 0px 20px 0px;
        }

        {
          margin : 20px;
        }

Padding Shorthand

        padding: top  right  bottom left;

        {
          padding : 20px 0px 20px 0px;
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .parent {
        border: 4px solid black;
        margin : 100px 50px 0px 50px;
        padding: 40px 0px 40px 0px;
       }
    </style>
</head>
<body>
   <div class="parent">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quidem libero deserunt deleniti nihil dolorem nesciunt quam quaerat quisquam exercitationem itaque, consequuntur nam enim expedita quasi voluptatibus harum fugiat tempora suscipit?
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Explicabo similique, praesentium unde cupiditate aliquam blanditiis alias, earum accusantium itaque veniam iusto architecto officiis, reprehenderit iure labore sit at dolore soluta.
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quisquam, alias error aut laudantium perferendis quia delectus obcaecati consequuntur sit, dolor omnis reprehenderit optio voluptatum! Quas temporibus reprehenderit minima magni quasi.
   </div>
</body>
</html>

30/05
=====

CSS Box Model
1. Margins
2. Padding
3. Border
4. Border Radius
5. Width
6. Height
7. Border Image

Border Styles:
       
        border        : short hand for style, size and color
        border-style    : double, dotted, solid, groove, dashed ..
        border-width    : size in pixels  or other units
        border-color    : any CSS color

        border-left    : short hand for left
        border-left-style
        border-left-width
        border-left-color
        ... similarly for other directions...

Border Radius:

        border-radius    :  all directions
        border-top-left-radius
        border-top-right-radius
        border-bottom-left-radius
        border-bottom-right-radius

Border Image:

        border-image  :  It sets URL, offset and style.
                       Style can be stretch or space.
                       Offset can be a value between 1 to 100.

Note: You can apply border image, only when border is set.

Syntax:
        {
         border : 10px solid transparent;
         border-image: url("path")  stretch | space  70;
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .parent {
         border : 20px solid transparent;
        border-image: url("../public/images/border.gif") stretch 80;
        padding: 30px;
       }
    </style>
</head>
<body>
   <div class="parent">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quidem libero deserunt deleniti nihil dolorem nesciunt quam quaerat quisquam exercitationem itaque, consequuntur nam enim expedita quasi voluptatibus harum fugiat tempora suscipit?
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Explicabo similique, praesentium unde cupiditate aliquam blanditiis alias, earum accusantium itaque veniam iusto architecto officiis, reprehenderit iure labore sit at dolore soluta.
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Quisquam, alias error aut laudantium perferendis quia delectus obcaecati consequuntur sit, dolor omnis reprehenderit optio voluptatum! Quas temporibus reprehenderit minima magni quasi.
   </div>
</body>
</html>
       
                         CSS Positions
1. Static
2. Absolute
3. Relative
4. Fixed
5. Sticky

Static
- It keeps element according to normal flow of document.
- It will not allow element to move using top, left, right & bottom attributes.
- It is the default position for element.

Absolute:
- It removes element from normal flow of document.
- It allows to move element using left, right, top and bottom.
- It keeps element with regard to content in page.
- It moves along with the content.

Fixed:
- It removes element from normal flow of document.
- It allows to move element using left, right, top and bottom.
- It keeps element with regard to browser window not with content in page.

Sticky
- It keeps element according to normal flow of document.
- It allows to scroll up to specified units, and can lock scrolling after reaching the designated position.

Relative
- It is defined for parent element.
- It allows to keep child element with regard to the parent.
- It requires child elements configured with "absolute" position only.

Syntax:
    .parent {
       position : relative;
     }
    .child {
        position : absolute;
     }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      .men-fashion {
         background-image: url("../public/images/men-fashion.jpg");
         background-size: cover;
         width: 600px;
         height: 400px;
         border:1px solid blue;
         position: relative;
      }
      .offer{
         background-color: red;
         color:white;
         width: 80px;
         height: 80px;
         border-radius: 80px;
         text-align: center;
         padding: 10px;
         font-size: 28px;
         font-weight: bold;
         position: absolute;
         top: 20px;
         right: 20px;
      }
      nav {
         margin: 30px 0px 30px 0px;
      }
      button {
         font-size: 25px;
         padding: 10px;
         position: relative;
         border:none;
         background-color: yellow;
         border-radius: 10px;
      }
      .badge {
         display: inline-block;
         width: 15px;
         height: 15px;
         background-color: red;
         color:white;
         padding: 5px;
         font-size: 12px;
         border-radius: 20px;
         position: absolute;
         top: -10px;
         right: -10px;
      }
   </style>
   <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
   <nav>
      <button class="bi bi-cart4"> <span class="badge">2</span> </button>
   </nav>
   <div class="men-fashion">
      <div class="offer">Save<br>40%</div>
   </div>
</body>
</html>

                            CSS Z-Index

- It is used to control the overlapping elements.
- It can send back or backward.
- It can bring front or forward.
- Index starts with "0" which refers to element at bottom.

Syntax:
       {
         z-index: 0;
       }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      .women-fashion {
         background-image: url("../public/images/women-fashion.jpg");
         background-size: cover;
         width: 500px;
         height: 300px;
         z-index: 0;
      }
      .men-fashion {
         background-image: url("../public/images/men-fashion.jpg");
         background-size: cover;
         width: 400px;
         height: 200px;
         top: 150px;
         left: 400px;
         z-index: 2;
      }
      .kids-fashion {
         background-image: url("../public/images/kids-fashion.jpg");
         background-size: cover;
         width: 300px;
         height: 200px;
         left: 300px;
         top: 0px;
         z-index: 1;
      }
      div {
         box-shadow: 5px 5px 2px black;
         border-radius: 20px;
         position: absolute;
         transition: 5s;
      }
      div:hover {
         z-index: 2;
         left: 600px;
         transition: 5s;
      }
   </style>
</head>
<body>
   <div class="women-fashion">

   </div>
   <div class="men-fashion">

   </div>
   <div class="kids-fashion">

   </div>
</body>
</html>

                           CSS Display

1. none            : It hides the element and removes allocated space from page.

FAQ: To hide element in page we can use "visibility: hidden", then what is difference between display & visibility ?
Ans:  Visibility will hide element without removing the allocated space.
      Display will hide element and remove allocated space.

2. block            : It transforms an inline element into block level element.

3. inline            : It transforms an block level element into inline element.

4. inline-block        : It keeps element in same line and configures block style to
                  defines various styles.

Note: Few elements can't adapt the styles if they are not block level.
      Hence you have to define "inline-block".

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      span {
         display:inline-block;
         background-color: yellow;
         width: 100px;
         text-align: center;
      }
      div {
         display: inline;
      }
   </style>
</head>
<body>
    <div>Welcome</div> to CSS.
    <span>Home</span> Welcome to Home Page.
</body>
</html>

5. flex
02/06
=====

Array Purpose
Array Configuration
Meta Character & Constructor
 [ ]  , Array()
Array Elements & Properties

Reading Array Elements:

1. toString()        returns all array elements separated with "," delimiter.


2. join()            returns all array elements separated with custom delimiter.


Syntax:
    var values = ["A", "B", "C"];
    values.toString();                //    A,B,C
    values.join(' > ' );                //    A > B > C

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     document.write(menu.join( " / "));
</script>


3. forEach()        returns all array elements using synchronous technique.
                It is an iterator with value and index.

Syntax:
    data.forEach(function(value, index){
   
        // use value & index

    })

4. map()            It returns all array elements using async technique.
                It uses unblocking technique.

Syntax:
    data.map(function(value, index){
   
        // use value & index

    })

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     menu.map(function(value, index){
          document.write(`<li> [${index}]${value}</li>`);
     })
</script>



5. You can use explicit iterators
   
    a) for..in        It reads and returns every property
    b) for..of        It reads and returns every value


Syntax:
    for(var property in data)
    {
    }

    for(var value of data)
    {
    }

Ex:
<script>
     var menu = ["Home", "Electronics", "Mobiles", "Apple"];
     for(var property in menu){
          document.write(`[${property}] ${menu[property]}<br>`);
     }
</script>

6. You can read and return conditional data using
    a) find()
    b) filter()

    - find() returns the first occurrence value that matches given condition.
    - filter() returns all values that match the given condition.

Syntax:
     data.find(function(value){

        returns  condition;    

    })

    data.filter(function(value){

        returns condition;
   
    })

Ex:
<script>
     var sales = [45000, 70000, 24500, 67000, 25000];

     var result = sales.filter(function(value){
          return value >= 60000;
     });

     document.write(result);
</script>

Adding elements into array:

1. push()            Adds new element(s) as last item(s).

2. unshift()        Adds new element(s) as first item(s).

3  splice()        Adds new element(s) at specified position.

Syntax:
    data.push("item1", "item2");
    data.unshift("item1", "item2");
    data.splice(startIndex, deleteCount,  Item1, Item2,..);

Note: Delete count for slice must be zero, while adding elements without removing
      existing elements.

Ex:
<script>
     var categories = ["Kids","Women"];

     categories.splice(1, 1 ,"Men", "Mobiles");
     categories.map(function(category, i){
          document.write(`[${i}] : ${category}<br>`);
     })
     
</script>

Removing elements from array:

1. pop()        It removes and returns the last item.

2. shift()        It removes and returns the first item.

3. splice()    It removes specific item(s) from given index.

4. slice()        It extracts items between specified index without removing.

Syntax:
    data.pop()
    data.shift()
    data.splice(startIndex,deleteCount)
    data.slice(startIndex, endIndex)


Sorting Array elements

1. sort()        It arranges elements in ascending order.

2. reverse()    It arranges elements in reverse order.

Syntax:
    data.sort().reverse()

Note: Array sorts in a string format, it requires explicit methods to convert into number
     and sort.


Array de-structure:
- It is the process of separating array elements into individual reference.
- De-structure can be defined by using spread operator "..."

Syntax:
    var list1 = [ "A", "B"];
    var list2 = [ "C", "D"];
 
    var list3 = [ list1, list2] ;        // 2 elements
    var list3 = [ ...list1, list2];        // 3 elements     [A, B, [C, D]];
    var list3 = [ ...list1, ...list2];    // 4 elements      [A,B,C,D]

Dynamically adding elements into page:

1. Create html element by using  the document method   "createElement()".

    Syntax:
        document.createElement("p, h2, div, span, img, ...");

2. Configure a reference for dynamically created element.

    Syntax:
   
        var ref = document.creatElement("img");

3. Configure the properties for element
       
    Syntax:
            ref.property = value;

4. Append element into page, you can append to body and any container in body.

    Syntax:
        document.querySelector("body").appendChild(ref);
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function UploadClick(){
               var img = document.createElement("img");
               img.width = "200";
               img.height = "200";
               img.src = "../public/images/women-fashion.jpg";
               document.querySelector("div").appendChild(img);
          }
     </script>
</head>
<body>
     <button onclick="UploadClick()">Upload Photo</button>
     <br><br>
     <div>
     
     </div>
</body>
</html>

3/06
====

Ex: Presenting array elements

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var categories = ["All", "Electronics", "Footwear", "Kids Fashion", "Women Fashion"];
        function bodyload(){
            categories.map(function(category){
                  var li = document.createElement("li");
                  li.textContent = category;
                  document.querySelector("ol").appendChild(li);

                  var option = document.createElement("option");
                  option.text  = category;
                  option.value =  category;
                  document.querySelector("select").appendChild(option);

                  var navItem = document.createElement("span");
                  navItem.innerHTML = `<a href='${category}.html'> ${category} </a>`;
                  navItem.style.marginRight = "30px";

                  document.querySelector("nav").appendChild(navItem);

                  var ulLi = document.createElement("li");
                  ulLi.innerHTML = `<input type="checkbox"> <label>${category}</label>`;
                  document.querySelector("ul").appendChild(ulLi);

            })
        }
    </script>
</head>
<body onload="bodyload()">
    <ol>

    </ol>
    <select>

    </select>
    <nav>
        <h2>Amazon</h2>
    </nav>
    <ul>

    </ul>
</body>
</html>

Ex: Array Manipulations

1. src/scripts/array.js


var movies = [
    "MISSION : IMPOSIBLE",
    "FINAL DESTINATION"
];

function LoadMovies(){
    document.getElementById("lstMovies").innerHTML = "";
    movies.map(function(movie){
         var option = document.createElement("option");
         option.text  = movie;
         option.value = movie;
         document.getElementById("lstMovies").appendChild(option);
    })
    document.getElementById("lblCount").innerHTML =  `Total Count of Movies : ${movies.length}`;
}

function AddClick(){
    var movieName = document.getElementById("txtMovie").value;
    if(movies.indexOf(movieName.toUpperCase())===-1) {
         movies.push(movieName.toUpperCase());
        alert(`${movieName} Added to list`);
        LoadMovies();
        document.getElementById("txtMovie").value  = "";
    } else {
        alert(`${movieName} Exists`);
    }
}

function SortAsc(){
    movies.sort();
    LoadMovies();
}
function SortDsc(){
    movies.sort();
    movies.reverse();
    LoadMovies();
}
function DeleteClick(){
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);
    var choice = confirm(`Delete ${selectedMovieName}\nAre you sure want to delete?`);
    if(choice===true){
        movies.splice(selectedMovieIndex, 1);
        LoadMovies();
    }
}
function ClearAll(){
    movies.length = 0;
    LoadMovies();
}
function EditClick(){
    var movieName = document.getElementById("lstMovies").value;
    document.getElementById("txtEditMovie").value = movieName;
}
function SaveClick(){
    var newMovieName = document.getElementById("txtEditMovie").value;
    var selectedMovieName = document.getElementById("lstMovies").value;
    var selectedMovieIndex = movies.indexOf(selectedMovieName);

    movies[selectedMovieIndex] = newMovieName;
    LoadMovies();
}

2. array-manipulation.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script src="../src/scripts/array.js"></script>
</head>
<body class="container-fluid" onload="LoadMovies()">
    <h2 class="bi bi-ticket text-center text-danger"> Book My Show - Admin Dashboard</h2>
    <div class="w-25 mt-4">
        <h2>Manage Movies</h2>
        <div class="my-2 input-group">
            <input class="form-control" id="txtMovie" type="text" placeholder="New Movie"> <button onclick="AddClick()" class="btn btn-primary">Add Movie</button>
        </div>
        <div class="mt-4">
            <div class="my-2">
                <button onclick="SortAsc()" class="btn btn-success bi bi-sort-alpha-down"></button>
                <button onclick="SortDsc()" class="btn btn-success bi bi-sort-alpha-up mx-3"></button>
            </div>
            <select size="3" id="lstMovies" class="form-select"></select>
            <div class="mt-2">
                <span id="lblCount" class="fw-bold"></span>
            </div>
            <div class="mt-4">
                <button onclick="EditClick()" data-bs-target="#edit" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill"> Edit </button>
                <div class="modal fade" id="edit">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3>Edit Movie</h3>
                            </div>
                            <div class="modal-body">
                                <input type="text" class="form-control" id="txtEditMovie">
                            </div>
                            <div class="modal-footer">
                                <button onclick="SaveClick()" data-bs-dismiss="modal" class="btn btn-success">Save</button>
                                <button data-bs-dismiss="modal" class="btn btn-danger mx-2">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                <button onclick="DeleteClick()" class="btn btn-danger mx-3 bi bi-trash-fill"> Delete </button>
                <button onclick="ClearAll()" class="btn btn-outline-danger bi bi-trash"> Clear </button>
            </div>
        </div>
    </div>
</body>
</html>


Ex: Tasks

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
        <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>
        var tasks = [];
        function LoadTasks(){
            tasks.map(function(task){
                 
                 var div = document.createElement("div");
                 div.className = "alert alert-dismissible alert-success";
                 div.innerHTML = `<div class="d-flex justify-content-between"> <span>${task}</span> <button class="bi bi-trash btn btn-danger"></button> </div>`;
                 document.getElementById("tasksContainer").appendChild(div);
            });
        }
        function AddClick(){
            var task = document.getElementById("txtTask").value;
            tasks.push(task);
            LoadTasks();
            document.getElementById("txtTask").value = "";
        }
    </script>
</head>
<body class="container-fluid" onload="LoadTasks()">
    <div class="w-50">
        <h3>Add Task</h3>
        <div class="input-group">
            <input type="text" id="txtTask" class="form-control" placeholder="New Task">
            <button class="btn btn-primary" onclick="AddClick()">Add</button>
        </div>
        <div class="mt-4" id="tasksContainer">

        </div>
    </div>
</body>
</html>

                              Object Type

4/06
====

Object Type

- Object in computer programming is used to keep all relative data and logic together.
- It enables easy reusability, extensibility and separation.
- "Alan kay" introduced the concept of object in early 1960's.
- JavaScript object is a key and value collection enclosed in a block { }.

        {
          key: value,
          key: value
        }

- Key is always string type and value can be any type.

Syntax:
    var obj = {
              id : 1,
              name: "TV",
              cities: [ "Delhi", "Hyd" ],
              stock: true,
              rating: { rate: 3.5, count: 500 },
                  total : function() { }
            }

- You can access the values inside object using "this" keyword and outside object using object name.

        obj.id
        obj.total()

Ex:
<script>
    var product = {
        Name : "Samsung TV",
        Price : 45000,
        Qty : 1,
        Total: function(){
            return this.Qty * this.Price;
        },
        Print: function(){
            document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}<br>`);
        }
    }
    product.Print();
    document.write("<hr>");
    product.Name = "iPhone 16";
    product.Price = 70000;
    product.Qty = 2;
    product.Print();
</script>

- If object comprises of only data representation without any logic then it is referred as "JSON". [JavaScript Object Notation].

- JSON formatted data is
    a) Light weight
    b) Faster in communication
    c) Not infected with virus
    d) Not blocked by firewalls
    e) Safe and secured

Object Manipulations:

1. How to read all keys from object?
A.
    a) Object.keys()        : It returns array of all keys in specified object
    b) for..in                : It is an explicit iterator to read all keys

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.2
    }
    for(var key in product)
    {
        document.write(`${key}: ${product[key]}<br>`);
    }
</script>

Ex:
<script>
    var product = {
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })
</script>

2. How to hide any key?
A. By using JavaScript primitive data type "symbol".
    Key is hidden over iterations, but accessible individually.

Syntax:
      var  id  = Symbol();
   
      var product = {
        [id] : 1,
        name: "TV"
       }

       Symbol type keys are defined in "[ ]".

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

3. How to remove a key from object?
A. By using JavaScript "delete" operator.

Syntax:
        delete  object.Key;

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    delete product.Rating;
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessign product with Id=${product[Id]}`);
</script>

4. How to find a key?
A. By using JavaScript "in" operator.

Syntax:
        if ("key"  in object)        => returns true if object contains given key.

Ex:
<script>
    var Id = Symbol();
    var product = {
        [Id]: 2,
        Name: "TV",
        Price: 45000,
        Stock: true,
        Rating: 4.9
    }
    // delete product.Rating;
    if("Rating" in product){
        console.log(`Rating=${product.Rating}`);
    } else {
        console.log(`Rating not found`);
    }
    Object.keys(product).map(function(key, index){
         document.write(`${key}: ${product[key]}<br>`);
    })

    document.write(`You are accessing product with Id=${product[Id]}`);
</script>

Note: You can't delete the built in properties or keys of JavaScript.

        delete  name.length;        // invalid
        delete  Math.PI;            // invalid


                              JavaScript  Ajax

- Ajax is "Asynchronous JavaScript And XML".
- It allows browser to load new details into your page without reloading the complete page.
- It enables "Partial Post Back".
- It can post only specific portion of page, without posting entire page.
- It improves the performance of application.
- JavaScript AJAX request from browser is made by using "XMLHttpRequest" object of browser window.

1. Configure the request by using XMLHttpRequest object

    var  http = new XMLHttpRequest();

2. Open the request by defining target content location & request type.

     http.open("method", "url", async:true);

     method     => GET, POST, PUT, PATCH, DELETE

3. Send the request to process

      http.send();

4. Execute the request in process by using "onreadystatechange()" function.

       http.onreadystatechange = function() {


        }

5. Execution of Ajax request in done in 4 phases
   
        1        Initial
        2        Success
        3        Complete
        4        Ready

6. You have to access data when it is ready[4].

7. The response data is returned in HTML, Text or XML format.

        http.responseText
              .responseXML

8. If your data is in any another format then you have to convert the data in to native format from text.

          JSON.parse(string);

Ex:
1. Create a new folder "data"

2. Add a new file "db.json"

{
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 69999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
}

<script>
    var http = new XMLHttpRequest();

    http.open("get", "../data/db.json", true);
    http.send();

    http.onreadystatechange = function(){

         if(http.readyState===4){
              console.log(JSON.parse(http.responseText));
         }

    }
</script>












Ex:
Ajax-demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            var http = new XMLHttpRequest();
            http.open("get", "../data/db.json", true);
            http.send();

            http.onreadystatechange = function(){

                 if(http.readyState===4){
                     product = JSON.parse(http.responseText);
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })


                 }

            }

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

5/06
=====

Object
Object Manipulations
JSON Type
AJAX Request using XHMLHttpRequest  object

Issues with XMLHttpRequest:

- It not async implicitly.
- It requires explicitly async to configure.
- It returns data in text or xml format.
- It requires explicit parsing for other type of data.
- It is not good in error handling.
- It have CORS issues. [Cross Origin Resource Sharing]
- It have security issues like XSRF. [Cross Site Request Forgery]


                           Fetch API

- JavaScript ES5+ versions introduced a "fetch()" API.
- It is a JavaScript promise to make XMLHttpRequest.
- Promise is async by default.
- It provides data in binary format.
- You have to convert the binary into required format.  [parsing required]
- It is good in handling XSRF & CORS.
- It is better in error handling.

Syntax:
    fetch("url")
    .then(function(response){
        // on success
    })
    .catch(function(error){
        // on error
    })
    .finally(function(){
        // executes always
    })

- Promise comprises of 2 actions
    a) resolve
    b) reject

- Resolve defines actions to perform when request is success.  
- Reject defines actions to perform when request fails.

        then()        Resolve
        catch()        Reject
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function bodyload(){
            var product = {title:'', price:0, image:'', rating:{ratings:0, rate:0, reviews:0}, offers:[]};

            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(data){
                product = data;
                     document.getElementById("imgProduct").src = product.image;
                     document.getElementById("lblTitle").innerHTML= product.title;
                     document.getElementById("lblRating").innerHTML = product.rating.rate;
                     document.getElementById("lblReviews").innerHTML = `${product.rating.ratings.toLocaleString()} ratings & ${product.rating.reviews} reviews`;
                     document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-in', {style:"currency", currency:"INR", minimumFractionDigits:0});

                     product.offers.map(function(offer){
                          var li = document.createElement("li");
                          li.className = "bi bi-tag-fill text-success my-2";
                          li.innerHTML = ` <span class="text-secondary">${offer}</span>`;
                          document.getElementById("offers").appendChild(li);
                     })

            })
            .catch(function(error){
                console.log(error);
            })
            .finally(function(){
                console.log(`Request End`);
            })
           

        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <div class="mt-4 row">
            <div class="col-3">
                <img id="imgProduct" width="100%">
            </div>
            <div class="col-9">
                <div class="fw-bold fs-4" id="lblTitle"></div>
                <div class="mt-2">
                    <span class="badge bg-success"> <span id="lblRating"></span> <span class="bi bi-star-fill"></span> </span>
                    <span id="lblReviews" class="text-secondary fw-bold"></span>
                </div>
                <div class="fs-1 mt-4 fw-bold" id="lblPrice">

                </div>
                <div class="mt-4">
                    <ul class="list-unstyled" id="offers">

                    </ul>
                </div>
            </div>
    </div>
</body>
</html>

Ex:
1. data/db.json

[
    {
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79999,
    "rating": {"rate":4.8, "ratings":26988, "reviews":317 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   },
   {
    "title": "Apple iPhone 16 (White, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-white.jpg"
   },
   {
    "title": "Apple iPhone 16 (Pink, 128 GB)",
    "price": 60999,
    "rating": {"rate":4.6, "ratings":16988, "reviews":717 },
    "offers": [
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C",
        "Bank Offer5% Unlimited Cashback on Flipkart Axis Bank Credit CardT&C",
        "Special PriceGet extra ₹9901 off (price inclusive of cashback/coupon)T&C"
    ],
    "image": "../public/images/iphone-pink.jpg"
   }
]


2. demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch("../data/db.json")
            .then(function(response){
                return response.json();
            })
            .then(function(mobiles){
                 mobiles.map(function(mobile){
                     var div = document.createElement("div");
                     div.className="row my-4 border border-4 p-3 m-4";
                     div.innerHTML = `
                        <div class="col-2">
                            <img src=${mobile.image} width="100%">
                        </div>
                        <div class="col-8">
                            <div class="fs-4 fw-bold">${mobile.title}</div>
                            <div class="my-2"> <span class="badge bg-success rounded rounded-1 text-white"> ${mobile.rating.rate} <span class="bi bi-star-fill"></span> </span> </div>
                        </div>
                        <div class="col-2">
                            <div class="fs-2 fw-bold">${mobile.price}</div>
                        </div>
                     `;
                     document.querySelector("section").appendChild(div);
                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header>
        <h1>iPhone 16</h1>
    </header>
    <section>

    </section>
</body>
</html>

Nasa API : [api.nasa.gov]

1. Open   api.nasa.gov

2. Register and get a key to your email.

3. Browse API's and select  "Mars Rover Photos"

https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY

4. Replace DEMO_KEY with your API key. [sent to your email]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){
                      var tr = document.createElement("tr");

                      var tdId = document.createElement("td");
                      var tdPreview = document.createElement("td");
                      var tdCamera = document.createElement("td");
                      var tdRover = document.createElement("td");

                      tdId.innerHTML = photo.id;
                      tdPreview.innerHTML = `<a href=${photo.img_src} target="_blank"><img src=${photo.img_src} width="100" height="100"></a>`;
                      tdCamera.innerHTML = photo.camera.full_name;
                      tdRover.innerHTML = photo.rover.name;

                      tr.appendChild(tdId);
                      tr.appendChild(tdPreview);
                      tr.appendChild(tdCamera);
                      tr.appendChild(tdRover);

                      document.querySelector("tbody").appendChild(tr);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <table class="table table-hover">
       <thead>
          <tr>
            <th class="bi bi-card-text"> Photo Id</th>
            <th class="bi bi-card-image"> Preview</th>
            <th class="bi bi-camera"> Camera Name</th>
            <th class="bi bi-rocket"> Rover Name</th>
          </tr>
       </thead>
       <tbody>

       </tbody>
    </table>
</body>
</html>

Nasa Data in Card Style

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function bodyload(){
            fetch('https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&api_key=DEMO_KEY&#39;)
            .then(function(response){
                 return response.json();
            })
            .then(function(marsObj){
                 marsObj.photos.map(function(photo){

                        var div = document.createElement("div");
                        div.className = "card m-2 p-2";
                        div.style.width = "200px";
                        div.innerHTML = `
                          <img class="card-img-top" src=${photo.img_src} height="100">
                          <div class="card-header">
                             <h3>${photo.id}</h3>
                          </div>                  
                          <div class="card-body">
                            <dl>
                                 <dt>Camera</dt>
                                 <dd>${photo.camera.full_name}</dd>
                                 <dt>Rover</dt>
                                 <dd>${photo.rover.name}</dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                              <a href=${photo.img_src} target="_blank" class="btn btn-dark w-100">Preview</a>
                          </div>
                        `;
                        document.querySelector("section").appendChild(div);

                 })
            })
        }
    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <h2>Mars Rover Photos</h2>
    <section class="d-flex flex-wrap">

    </section>
</body>
</html>

9/06
====

Weather App

1. Visit   https://openweathermap.org/api

2. Register a new free account

3. Go to "API DOCS" in current weather data category

4. Select the option "Built-in API request by city name"

5. Copy the API URL that can query by city name

    https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}

6. API Key is provided in your profile details.  [ My API Keys ]

    1318ca6725c69160d346c41fc0612596

  https://api.openweathermap.org/data/2.5/weather?q=Hyderabad&appid=    1318ca6725c69160d346c41fc0612596

        { city name }         => Hyderabad
        { API Key }         => Your API key

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <style>
        .bg-style {
            background-image: url("../public/images/weather.jpg");
            background-size: cover;
        }
    </style>
    <script>
        function SearchClick(){
            var cityName = document.getElementById("txtCity").value;
            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=1318ca6725c69160d346c41fc0612596&units=metric`)
            .then(function(response){
                 return response.json();
            })
            .then(function(weatherObj){
                document.getElementById("lblCity").innerHTML = weatherObj.name;
                document.getElementById("lblTemp").innerHTML = `${weatherObj.main.temp} &deg; <sup>c</sup>`
                document.getElementById("lblDescription").innerHTML = `[${weatherObj.weather[0].description}]`;
            })
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height:100vh">
   <div class="border bg-style w-50 border-2 border-warning rounded rounded-2" style="height:300px">
      <div class="mt-4 d-flex justify-content-center">
         <div class="input-group w-50">
              <input type="text" id="txtCity" class="form-control" placeholder="Your city name">
              <button onclick="SearchClick()" class="btn btn-warning bi bi-search"></button>
         </div>
      </div>
      <div class="mt-2 p-4">
          <div id="lblCity" class="fs-3 text-center text-white fw-bold"></div>
          <div id="lblDescription" class="text-center text-white"></div>
          <div class="mt-3">
              <div id="lblTemp" class="fs-1 fw-bold text-center text-warning"></div>
          </div>
      </div>
   </div>
</body>
</html>

                         
                                  Fakestore API
                        (https://fakestoreapi.com)

API Routes [ end points ]

    GET        /products                        [ ] array of products     [ { }, { } ]

    GET        /products/1                    product object             {   }
                                        by id
   
    GET        /products/categories            [ ] of all categories         [ " " ]

     GET    /products/category/electronics    [ ] of specific category  [ { }, { } ]
                                            products
Fakestore Product

     {
        id: 0,
        title: " ",
        price: 0,
        image: " ",
        description: " ",
        category: " ",
        rating: { rate:0, count: 0 }
     }

Ex: Fakestore API

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(response){
                 return response.json();
            })
            .then(function(categories){
                categories.unshift("all");
                categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(response){
                return response.json();
            })
            .then(function(products){
                 products.map(function(product){

                        var card = document.createElement("div");
                        card.className = "card m-2 p-2";
                        card.style.width = "200px";
                        card.innerHTML = `
                          <img class="card-img-top" src=${product.image} height="120">
                          <div class="card-header overflow-auto" style="height:100px">
                             ${product.title}
                          </div>
                          <div class="card-body">
                            <dl>
                                <dt>Price</dt>
                                <dd>${product.price}</dd>
                                <dt>Rating</dt>
                                <dd>${product.rating.rate} <span class="bi bi-star-fill text-success"></span> </dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                            <button class="btn btn-warning w-100 bi bi-cart4"> Add to Cart </button>
                         </div>
                        `;

                        document.querySelector("main").appendChild(card);
 
                 })
            })
        }

        function bodyload(){
            LoadCategories();
            LoadProducts(`https://fakestoreapi.com/products`);
        }

        function CategoryChange(){
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName==="all"){
                LoadProducts(`https://fakestoreapi.com/products`);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }

    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex mt-1 justify-content-between border border-2 p-3">
        <div class="fw-bold fs-4">Fakestore</div>
        <div class="fs-5">
            <span><a>Home</a></span>
            <span class="mx-4"><a>Electronics</a></span>
            <span><a>Jewelery</a></span>
            <span class="mx-4"><a>Men's Fashion</a></span>
            <span><a>Women's Fashion</a></span>
        </div>
        <div>
            <button class="btn btn-warning bi bi-cart4"></button>
        </div>
    </header>
    <section class="row mt-4">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold"> Select Category </label>
                <div>
                    <select onchange="CategoryChange()" class="form-select" id="lstCategories">

                    </select>
                </div>
            </div>
        </nav>
        <main class="col-10 overflow-auto d-flex flex-wrap" style="height:450px">

        </main>
    </section>
</body>
</html>

10/06
=====

Ex: Fakestore API

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script>

        function LoadCategories(){
            fetch("https://fakestoreapi.com/products/categories&quot;)
            .then(function(response){
                 return response.json();
            })
            .then(function(categories){
                categories.unshift("all");
                categories.map(function(category){
                      var option = document.createElement("option");
                      option.text = category.toUpperCase();
                      option.value = category;
                      document.getElementById("lstCategories").appendChild(option);
                })
            })
        }

        function LoadProducts(url){
            document.querySelector("main").innerHTML = "";
            fetch(url)
            .then(function(response){
                return response.json();
            })
            .then(function(products){
                 products.map(function(product){

                        var card = document.createElement("div");
                        card.className = "card m-2 p-2";
                        card.style.width = "200px";
                        card.innerHTML = `
                          <img class="card-img-top" src=${product.image} height="120">
                          <div class="card-header overflow-auto" style="height:100px">
                             ${product.title}
                          </div>
                          <div class="card-body">
                            <dl>
                                <dt>Price</dt>
                                <dd>${product.price}</dd>
                                <dt>Rating</dt>
                                <dd>${product.rating.rate} <span class="bi bi-star-fill text-success"></span> </dd>
                            </dl>
                          </div>
                          <div class="card-footer">
                            <button value=${product.id} onclick="AddToCartClick(this.value)" class="btn btn-warning w-100 bi bi-cart4"> Add to Cart </button>
                         </div>
                        `;

                        document.querySelector("main").appendChild(card);
 
                 })
            })
        }

        function bodyload(){
            LoadCategories();
            LoadProducts(`https://fakestoreapi.com/products`);
            GetCartItemsCount();
        }

        function CategoryChange(){
            var categoryName = document.getElementById("lstCategories").value;
            if(categoryName==="all"){
                LoadProducts(`https://fakestoreapi.com/products`);
            } else {
                LoadProducts(`https://fakestoreapi.com/products/category/${categoryName}`);
            }
        }
        var cartItems = [];
        function GetCartItemsCount(){
            document.getElementById("lblCount").innerHTML = cartItems.length;
        }
        function AddToCartClick(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(response){
                 return response.json();
            })
            .then(function(product){
                 cartItems.push(product);
                 alert(`${product.title}\nAdded to Cart`);
                 GetCartItemsCount();
            })
        }

       
        function ShowCartClick(){
            var total = 0;
            document.querySelector("tbody").innerHTML ="";
            cartItems.map(function(item){

                var tr = document.createElement("tr");
                var tdTitle = document.createElement("td");
                var tdPrice = document.createElement("td");
                var tdImage = document.createElement("td");

                tdTitle.innerHTML = item.title;
                tdImage.innerHTML = `<img width="50" height="50" src=${item.image}>`;
                tdPrice.innerHTML = item.price;

                tr.appendChild(tdTitle);
                tr.appendChild(tdImage);
                tr.appendChild(tdPrice);

                document.querySelector("tbody").appendChild(tr);

            })

            for(var item of cartItems){
                total += item.price;
            }
            document.getElementById("lblTotal").innerHTML = `${total}`.fontsize(4).fontcolor('red').bold();

        }

    </script>
</head>
<body class="container-fluid" onload="bodyload()">
    <header class="d-flex mt-1 justify-content-between border border-2 p-3">
        <div class="fw-bold fs-4">Fakestore</div>
        <div class="fs-5">
            <span><a class="text-decoration-none" href="javascript:LoadProducts('https://fakestoreapi.com/products')">Home</a></span&gt;
            <span class="mx-4"><a class="text-decoration-none" href="javascript:LoadProducts('https://fakestoreapi.com/products/category/electronics')">Electronics</a></span&gt;
            <span><a>Jewelery</a></span>
            <span class="mx-4"><a>Men's Fashion</a></span>
            <span><a>Women's Fashion</a></span>
        </div>
        <div>
            <button onclick="ShowCartClick()" data-bs-target="#cart" data-bs-toggle="offcanvas" class="btn btn-warning bi bi-cart4 position-relative"><span id="lblCount" class="badge bg-danger rounded rounded-circle position-absolute"></span></button>
            <div class="offcanvas offcanvas-end" id="cart">
                <div class="offcanvas-header">
                    <h4>Your Cart Items</h4>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Preview</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>
                        <tfoot>
                            <tr>
                                <td align="center" colspan="2" class="fw-bold fs-4">Total</td>
                                <td id="lblTotal"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </header>
    <section class="row mt-4">
        <nav class="col-2">
            <div>
                <label class="form-label fw-bold"> Select Category </label>
                <div>
                    <select onchange="CategoryChange()" class="form-select" id="lstCategories">

                    </select>
                </div>
            </div>
        </nav>
        <main class="col-10 overflow-auto d-flex flex-wrap" style="height:470px">

        </main>
    </section>
</body>
</html>

FAQ: What are the issues with object data type?
- It comprises of only string type keys.
- It requires lot of explicit operators for manipulation.
- Hence it is slow in rendering.


                              Map Type
- It is a key and value collection.
- Key can be any type.
- It provides all implicit methods to handle operations.
- It is faster when compared to object.
- It is schema less. [structure less]

Syntax:
    var data = new Map();

    data.set(key,value)                Add a new key with value
        .get(key)                    Returns the value in key
        .delete(key)                Removes a key and its value
        .has(key)                    Verifies the existence of key
        .keys()                    Returns all keys
        .values()                    Returns all values
        .entries()                    Returns all entries [keys and values]
        .clear()                    Removes all keys
        .size                        Returns count of keys

Ex:
<script>
    var data = new Map();
    data.set(1, "TV");
    data.set("Mobile", "Apple iPhone 16 Pro");
    data.set(2, ["Delhi", "Hyd"]);

     data.delete(2);

    if(data.has(2)){
        document.write(data.get(2));
    } else {
        alert('2 Not Found');
    }

    document.write(`${data.get("Mobile")}<br>`);

    for(var item of data.entries()){
        document.write(`${item}<br>`);
    }

    document.write(`Total Count of Keys : ${data.size}`);
</script>


FAQ: What is difference between object & map data types?
Ans:
        Object                Map
        ----------------------------------------------
        Structured                 Structure Less
        Explicit methods        Implicit Methods
        Slow                          Fast
        Keys only string        Keys can be any type

                   
                            Date Type
- Date type values are stored in memory by using "Date()" constructor.
- It allocates memory to handle date type.

Syntax:
    var now = new Date();        It stores current date and time into memory reference.


- You can store specific date and time by using the following format

    "year-month-day hours:minutes:seconds.milliSeconds"

Syntax:
    var mfd = new Date("2025-04-22 15:30:42.774");

- JavaScript provides various date and time methods to read date & time values.

    getHours()            It returns hours number 0 to 23
    getMinutes()            0 to 59
    getSeconds()            0 to 59
    getMilliSeconds()        0 to 999
    getDate()                1 to 28, 29, 30, 31
    getDay()                It returns weekday number 0=Sunday
    getMonth()            It returns month number 0=January
    getFullYear()            It returns full year.
    toLocaleString()        It returns both date & time
    toDateString()            
    toLocaleDateString()
    toTimeString()
    toLocaleTimeString()

Ex:
<script>
    var mfd = new Date("2025-04-22 15:30:24.876");
   
    var weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

    var months = ["Jan", "Feb", "March", "April", "May", "June", "July", "August"];

    document.write(`${weekdays[mfd.getDay()]} ${mfd.getDate()} , ${months[mfd.getMonth()]} ${mfd.getFullYear()}`)
</script>;

- Showing date & time values requires 3rd party libraries like
    a) dayjs
    b) moment
    c) luxon  etc..

- JavaScript provides setter methods to set date and time value
   
    setHours()
    setMinutes()
    setSeconds()
    setMilliSeconds()
    setDate()
    setTime()
    setMonth()
    setFullYear()
    etc..

Ex:
<script>
    var now = new Date();
   
    now.setHours(19)

    var hrs = now.getHours();
   
    if(hrs>=0 && hrs<=12) {
        document.write(`Good Morning !!<br><img src="../public/images/morning.gif" width="200" height="200">`);
    }
    else if(hrs>=13 && hrs<=16) {
        document.write(`Good Afternoon <br><img src="../public/images/afternoon.gif" width="200" height="200">`);
    } else {
        document.write(`Good Evening ! <br><img src="../public/images/evening.gif" width="200" height="200">`);
    }
</script>

11/06
=====

Date Type
- get & set function
- formatting date

                        Timer Events
1. setTimeout()
2. clearTimeout()
3. setInterval()
4. clearInterval()


setTimeout()
- It is used to handle "debounce".
- Debounce allows to delay any task by specified duration.
- It loads task into memory and locks the task or keeps it inactive for specific duration.
- So that it can allow other tasks to perform.

Syntax:
    setTimeout(function(){ }, interval)

clearTimeout()
- It is used to clear the task from memory.
- You can remove task from memory before it is released into process.


Syntax:
    clearTimeout(refName);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>

        function v1(){
            document.getElementById("lblVolume").innerHTML = "Increased by 20%";
        }
        function v2(){
            document.getElementById("lblVolume").innerHTML = "Increased by 70%";
        }

        function v3(){
            document.getElementById("lblVolume").innerHTML = "Volume Full";
        }

        var t1, t2, t3;
        function IncreaseVolume(){
            t1 = setTimeout(v1, 3000);
            t2 = setTimeout(v2, 8000);
            t3 = setTimeout(v3, 15000);
        }
        function CancelClick(){
            clearTimeout(t2);
        }
    </script>
</head>
<body>
    <button onclick="IncreaseVolume()" class="bi bi-volume-up"></button>
    <button onclick="CancelClick()">Cancel 70%</button>
    <br><br>
    <span id="lblVolume"></span>
</body>
</html>

setInterval()
- It is used to control "throttle".
- "Throttle" is a mechanism of executing given task repeatedly at regular time intervals.
- It is used to configure continuous operations.

Syntax:
    setInterval(function(){ }, interval)

clearInterval()
- It is used to stop throttle.
- It removes the task from memory.
- It requires a memory reference name.

Syntax:
    clearInterval(refName);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function Time(){
            var now = new Date();
            var time = now.toLocaleTimeString();
            document.querySelector("h1").innerHTML = time;
        }
        var thread;
        function bodyload(){
           thread = setInterval(Time,1000);
        }
        function StartClick(){
            thread = setInterval(Time,1000);
        }
        function StopClick(){
            clearInterval(thread);
        }
    </script>
</head>
<body onload="bodyload()">
    <h1 align="center"></h1>
    <button onclick="StartClick()">Start</button>
    <button onclick="StopClick()">Stop</button>
</body>
</html>


Ex: Stop Watch

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            display: flex;
            justify-content: center;
        }
        .container {
            width: 600px;
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
            height: 60px;
            margin-top: 200px;
        }
        .container div {
            border:1px solid gray;
            padding: 20px;
            font-family: Arial;
            font-size: 30px;
            color:gray;
        }
    </style>
    <script>
        var ms = 0;
        var s = 0;
        var m = 0;
        var h = 0;
        function StopWatch(){
            ms++;
            if(ms===999){
                s++;
                ms=0;
            }
            if(s===59){
                m++;
                s=0;
            }
            if(m===59){
                h++;
                m=0;
            }
            document.getElementById("lblMilliSec").innerHTML = ms + "ms";
            document.getElementById("lblSec").innerHTML = s + "s";
            document.getElementById("lblMin").innerHTML = m + "m";
            document.getElementById("lblhrs").innerHTML = h + "h";
        }
        var thread;
        function StartClick(){
           thread = setInterval(StopWatch,1);
        }
        function ClearClick(){
            clearInterval(thread);
            s=0;
            ms=0;
            h=0;
            m=0;
            document.getElementById("lblMilliSec").innerHTML = ms + "<sub>ms</sub>";
            document.getElementById("lblSec").innerHTML = s + "<sub>s</sub>";
            document.getElementById("lblMin").innerHTML = m + "m";
            document.getElementById("lblhrs").innerHTML = h + "h";
        }
    </script>
</head>
<body>
    <div>
        <div class="container">
        <div>
            <span  id="lblHrs">00 <sub>h</sub></span>
        </div>
        <div >
            <span id="lblMin">00<sub>m</sub></span>
        </div>
        <div >
            <span id="lblSec">00<sub>s</sub></span>
        </div>
        <div >
            <span id="lblMilliSec">000<sub>ms</sub></span>
        </div>
       </div>
       <br><br>
       <button onclick="StartClick()">Start</button>
       <button onclick="ClearClick()">Clear</button>
    </div>
</body>
</html>

Ex: setInterval

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        var i=1;
        function StartProgress(){
            i++;
            document.getElementById("progress").value = i;
            document.getElementById("lblStatus").innerHTML = `${i}% completed`;
            if(i===100){
                document.getElementById("imgContainer").style.display = "block";
                document.getElementById("progressContainer").style.display = "none";
                clearInterval(thread);
            }
        }
        var thread;
        function LoadClick(){
            document.getElementById("btnContainer").style.display = "none";
            document.getElementById("progressContainer").style.display = "block";
            thread = setInterval(StartProgress,100);
        }

    </script>
    <style>
        @keyframes Fade {
            from {
                opacity: 0;
                transform: scale(0.1) rotate(0deg);
            }
            to {
                opacity: 1;
                transform: scale(1) rotate(360deg);
            }
        }
        img {
            animation-name: Fade;
            animation-duration: 5s;
        }
    </style>
</head>
<body class="container-fluid d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div id="btnContainer">
            <button class="btn btn-primary" onclick="LoadClick()">Load Image</button>
        </div>
        <div id="progressContainer" style="display: none;">
            <progress id="progress" min="1" max="100" style="width: 400px; height: 30px;"></progress>
            <p id="lblStatus"></p>
        </div>
        <div id="imgContainer" style="display: none;">
            <img src="../public/images/women-fashion.jpg" width="400" height="400">
        </div>
    </div>
</body>
</html>

12/06
=====

setTimeout
clearTimeout
setInterval
clearInterval

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>

        function LoadProduct(id){
            fetch(`https://fakestoreapi.com/products/${id}`)
            .then(function(response){
                return response.json();
            })
            .then(function(product){
                document.getElementById("lblTitle").innerHTML = product.title;
                document.getElementById("imgProduct").src = product.image;
                document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-us',{style:'currency', currency:'USD'});
            })
            document.getElementById("lblStatus").innerHTML = "(Slide Show - Manual)";
        }
        function LoadProductAuto(){
            productId++;
             fetch(`https://fakestoreapi.com/products/${productId}`)
            .then(function(response){
                return response.json();
            })
            .then(function(product){
                document.getElementById("lblTitle").innerHTML = product.title;
                document.getElementById("imgProduct").src = product.image;
                document.getElementById("lblPrice").innerHTML = product.price.toLocaleString('en-us',{style:'currency', currency:'USD'});
            })
            document.getElementById("lblStatus").innerHTML = "(Slide Show - Auto)";
            document.getElementById("trackBar").value = productId;
        }
        var productId = 1;
        function NextClick(){
            productId++;
            LoadProduct(productId);
            document.getElementById("trackBar").value = productId;
           
        }
        function PrevClick(){
            productId--;
            LoadProduct(productId);
            document.getElementById("trackBar").value = productId;
        }
        function TrackbarChange(){
            LoadProduct(document.getElementById("trackBar").value);
            productId = document.getElementById("trackBar").value;
        }
        var thread;
        function PlayClick(){
            thread = setInterval(LoadProductAuto, 5000);
            document.getElementById("lblStatus").innerHTML = "(Slide Show - Playing)";
        }
        function PauseClick(){
            clearInterval(thread);
            document.getElementById("lblStatus").innerHTML = "(Slide Show - Paused)";
        }
    </script>
</head>
<body onload="LoadProduct(1)" class="container-fluid d-flex justify-content-center">
    <div class="card p-2 mt-4 w-50">
        <div class="card-header text-center">
            <div id="lblTitle"></div>
            <div id="lblStatus"></div>
        </div>
        <div class="card-body row" >
            <div class="col-1 d-flex flex-column justify-content-center align-items-center">
                <button onclick="PrevClick()" class="btn btn-dark bi bi-chevron-left"></button>
            </div>
            <div class="col-10 position-relative">
                <div id="lblPrice" class="badge p-2 bg-danger text-white top-0 end-0 rounded rounded-circle position-absolute"></div>
                <img height="300" id="imgProduct" width="100%">
                <div class="mt-3">
                    <input type="range" onchange="TrackbarChange()" value="1" min="1" max="20" class="form-range" id="trackBar">
                </div>
                <div class="mt-3 text-center">
                    <button onclick="PlayClick()" class="btn btn-success mx-2 bi bi-play"></button>
                    <button onclick="PauseClick()" class="btn btn-danger bi bi-pause"></button>
                </div>
            </div>
            <div class="col-1 d-flex flex-column justify-content-center align-items-center">
                <button onclick="NextClick()" class="btn btn-dark bi bi-chevron-right"></button>
            </div>
        </div>
    </div>
</body>
</html>

Summary
- Variables
- Data Types
    a) Primitive
        number, string, Boolean, null, undefined, symbol, big int.
    b) Non Primitive
        array, object, map

- Date & Date Methods
- Timer Events
- Regular Expression Type  " /   / "


                        JavaScript Operators
1. Arithmetic Operators

        +         Addition
        -        Subtraction
        *        Multiplication
        /        Division
        %        Modulus Division
        **        Exponent
        ++        Increment
        --        Decrement

2. Comparison & Logical Operators

        ==        Equal
        ===        Strict Equal / Identical Equal
        !=        Not Equal
        !==        Not Identical
        >        Greater than
        >=        Greater than or equal
        <        Less than
        <=         Less than or equal

        &&        AND
        ||        OR
        !        NOT


3. Assignment Operators

        +=        Add and Assign
        -=        Subtract and Assign
        *=        Multiply and Assign
        /=        Divide and Assign
        %=        Modulus and Assign

Note: JavaScript provides following methods to access multiple elements.

        a) document.getElementsByTagName()
        b) document.getElementsByClassName()
        c) document.getElementsByName()

      These methods return an array [ ] of elements.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       
        function SubmitClick(){
            var courses = "";
            var checkboxes = document.getElementsByName("Course");
            for(var checkbox of checkboxes){
                if(checkbox.checked){
                    courses += checkbox.value + "<br>";
                }
            }
            document.getElementById("lblList").innerHTML = courses;
        }
    </script>
</head>
<body>
    <div>
        <div><input type="checkbox" name="Course" value="HTML"> <label>HTML</label> </div>
        <div><input type="checkbox" name="Course" value="Java"> <label>Java</label> </div>
        <div><input type="checkbox" name="Course" value="Python"> <label>Python</label> </div>
        <div><input type="checkbox" name="Course" value=".NET"> <label>.NET</label> </div>
    </div>
    <button onclick="SubmitClick()">Submit</button>
    <p id="lblList"></p>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       
        function SubmitClick(){
            var courses = "";
            var checkboxes = document.getElementsByName("Course");
            for(var checkbox of checkboxes){
                if(checkbox.checked){
                    courses += checkbox.value + "<br>";
                }
            }
            document.getElementById("lblList").innerHTML = courses;
        }
    </script>
</head>
<body>
    <div>
        <div><input onchange="SubmitClick()" type="checkbox" name="Course" value="HTML"> <label>HTML</label> </div>
        <div><input onchange="SubmitClick()" type="checkbox" name="Course" value="Java"> <label>Java</label> </div>
        <div><input onchange="SubmitClick()" type="checkbox" name="Course" value="Python"> <label>Python</label> </div>
        <div><input onchange="SubmitClick()" type="checkbox" name="Course" value=".NET"> <label>.NET</label> </div>
    </div>
    <button onclick="SubmitClick()">Submit</button>
    <p id="lblList"></p>
</body>
</html>




Ex: Add and Assign data from checkboxes

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       
        function SubmitClick(){
            var courses = "";
            var courseFee = 0;
            var checkboxes = document.getElementsByName("Course");
            for(var checkbox of checkboxes){
                if(checkbox.checked){
                    courses += checkbox.value + "-" + checkbox.id +  "<br>";
                    courseFee += parseInt(checkbox.id) ;
                }
            }
            document.getElementById("lblList").innerHTML = `Selected Courses : <br> ${courses} <br>Total Fee Amount : ${courseFee}`;
        }
    </script>
</head>
<body>
    <div>
        <div><input id="1200" onchange="SubmitClick()" type="checkbox" name="Course" value="HTML"> <label>HTML</label> </div>
        <div><input id="4000" onchange="SubmitClick()" type="checkbox" name="Course" value="Java"> <label>Java</label> </div>
        <div><input id="2000" onchange="SubmitClick()" type="checkbox" name="Course" value="Python"> <label>Python</label> </div>
        <div><input id="5000" onchange="SubmitClick()" type="checkbox" name="Course" value=".NET"> <label>.NET</label> </div>
    </div>
    <button onclick="SubmitClick()">Submit</button>
    <p id="lblList"></p>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        var position = 1;
        function MoveRight(){
            position *= 2;
            var img = document.querySelector("img");
            img.style.marginLeft = position + "px";
        }
         function MoveLeft(){
            position /=2;
            var img = document.querySelector("img");
            img.style.marginLeft = position + "px";
        }
    </script>
</head>
<body>
    <button onclick="MoveLeft()"> < </button>
    <button onclick="MoveRight()"> > </button>
    <br><br>
    <img src="../public/images/women-fashion.jpg" width="200" height="200">
</body>
</html>



4. Special Operators

   
 a) Ternary Operator "?:"

        (condition) ? true : false

 b) Delete operator    : It removes a key from object.

        delete   object.key;

 c) In operator    : It finds a key in object.

        "key"  in  object;        // true if found

 d) New operator:  It is dynamic memory allocating operator.

        var ref  = new Array();

 e) TypeOf Operator:  It returns the data type of a reference.

        var  x = 10;
        var  y = true;

        typeof  x;        // number
        typeof  y;        // boolean

Ex:
<script>
     fetch(`https://fakestoreapi.com/products/1`)
     .then(function(response){
        return response.json();
     })
     .then(function(product){
          Object.keys(product).map(function(key){
               document.write(`${key} [${typeof product[key]}] <br>`);
          })
     })
</script>
       
                        JavaScript Statements
1. Selection Statements
    if, else, switch, case, default

2. Jump Statements
    return, break, continue

3. Iteration Statements
    for..in, for..of

4. Looping Statements
    for, while, do while

5. Exception Handling
    try, catch, throw, finally

13/06
=====

Looping Control Statements

- Looping is the process of executing a set of statement repeatedly based on given condition.
- You can create loops using
    a) for
    b) while
    c) do while

The "For" loop:
- It is a looping control statement used when we are sure about the number of iterations and iteration counter will not change dynamically.
- It requires initialization, condition and counter.

Syntax:
    for (initialization; condition; counter)
    {
       statements;
    }

Ex:
    for(var i=1;  i<=10; i++)
    {
         console.log(i);
    }

EX:
    var i=1;
    for(  ; i<=10; i++)            for( i<=10; i++) { }        // invalid
    {
    }

Syntax:    
    var values = ["A", "B", "C", "D"];

    for(var i=0; i<values.length; i++)
    {
        console.log(values[i] + "<br>");
    }
   
Task1: Write a function that takes any number input and print a multiplication table for that number.

        function MultiplicationTable(n)
        {
            for(var i=1; i<=10; i++)
            {
                document.write(`${n} X ${i} = ${n*i}<br>`);
            }            
        }
        MultiplicationTable(5);

        // Output

        5 X 1 = 5
        5 X 2 = 10
        ...
        5 X 10 = 50

Ex:
<script>
     function MultiplicationTable(n){
          for(var i=1; i<=10; i++){
               document.write(`${n} X ${i} = ${n*i}<br>`);
          }
     }
     MultiplicationTable(parseInt(prompt("Enter Number")));
</script>


Task-2: Write a program to print all even numbers between 1 to 20.
              even is calculated   n%2===0

        function PrintEven()
        {
            for(var i=1; i<=20; i++){
                  if(i%2===0) {
                    document.write(i + "<br>");
                }
            }            
        }
        PrintEven();


Task-3: Write a program to print the factorial of given number
           
        5!  => 5 x 4 x 3 x 2 x 1
        var fact = 1;
        function Factorial(n)
        {
            // logic
        }

        Factorial(5);

        Output:
            Factorial is 120    

Ex:
<script>
     var fact = 1;
     function Factorial(n)
     {
          for(var i=1; i<=n; i++){
               fact*=i;
          }
          document.write(`Factorial of ${n} is ${fact}`);
     }
     Factorial(parseInt(prompt("Enter number")));
</script>

Ex:
<script>
     var str = "Welcome to JavaScript Language";
     var count = 0;
     for(var i=0; i<str.length; i++){
          if(str[i]==="e"){
               count++;
          }
     }
     document.write(`Total number of occurrence for "e" char is ${count}`);
</script>

EX:
 // Write a program to count the vowels in given string. a,e,i,o,u

     var str = "Welcome to JavaScript Language";
     // var vowels = ["a", "e", "i", "o", "u"];
     var count = 0;
     for(var i=0; i<str.length; i++){
          if(str[i]==="a"||str[i]==="e"||str[i]==="i"||str[i]==="o"||str[i]==="u"){
               count++;
          }
     }
     document.write(`Total number of vowels in string are ${count}`);

Ex:
<script>
     /*
         *
         *  *
         *  *  *
         *  *  *  *
     */
     function PrintPattern(n){
          for(var i=1; i<=n; i++){
               for(var j=1; j<=i; j++){
                 document.write(`*&nbsp;&nbsp;`);    
               }
               document.write("<br>");
          }
     }
     PrintPattern(parseInt(prompt("Enter Number")));
</script>

14/06
======

Jump Statements in Loop:

    a) break        It ends the current block but continue to execute the function.

    b) return        It terminates the block and execution

    c) continue    It skips the current counter and continue to next.

Ex:
<script>
     for(var i=1; i<=10; i++){
          if(i===5 || i===8) {
               continue;
          }
          document.write(`${i}<br>`);

     }
</script>

Ex:
<script>
     fetch(`https://fakestoreapi.com/products`)
     .then(function(response){
           return response.json();
     })
     .then(function(products){
          for(var i=0; i<products.length; i++){
               if(products[i].category==="electronics" || products[i].category==="jewelery"){
                    continue;
               }
               document.write(`${products[i].title} - <b>${products[i].category}</b><br>`);
          }
     })
</script>

Ex:
<script>
     var values = [[10, 20, 30], [40, 50, 60]];

     /*
        Print the values in martix format using for

        10      20      30              values[0][0]      values[0][1]   values[0][2]

        40      50      50              values[1][0]      values[1][1]   values[1][2]

     */

      for(var i=0; i<values.length; i++){

           for(var j=0; j<values[i].length; j++){
                document.write(`${values[i][j]}&nbsp;&nbsp;`)
           }
           document.write("<br><br>");
      }

</script>

Ex: using map

<script>
     var values = [[10, 20, 30], [40, 50, 60]];

     /*
        Print the values in martix format using map

        10      20      30              values[0][0]      values[0][1]   values[0][2]

        40      50      50              values[1][0]      values[1][1]   values[1][2]

     */

     values.map(function(value){
         value.map(function(item){
            document.write(`${item}&nbsp;&nbsp;&nbsp;`);
         })
         document.write("<br><br>");
     })

</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          var data = [
               {Category:"Electronics", Products:["TV", "Mobile"]},
               {Category:"Footwear", Products:["Casuals", "Boots", "Sneakers"]}
          ];

          function bodyload(){
               data.map(function(item){
                    var li = document.createElement("li");
                    li.innerHTML = item.Category;
                    item.Products.map(function(product){
                         var ul = document.createElement("ul");
                         ul.type = "square";
                         var ul_li = document.createElement("li");
                         ul_li.innerHTML = product;
                         ul.appendChild(ul_li);
                         li.appendChild(ul);
                         document.querySelector("ol").appendChild(li);
                    })
               })
          }
     </script>
</head>
<body onload="bodyload()">
     <ol>

     </ol>
</body>
</html>

Ex:

<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          var data = [
               {Category:"Electronics", Products:["TV", "Mobile"]},
               {Category:"Footwear", Products:["Casuals", "Boots", "Sneakers"]}
          ];

          function bodyload(){
              for(var i=0; i<data.length; i++)
              {
                   var li = document.createElement("li");
                   li.innerHTML = data[i].Category;
                   for(var j=0; j<data[i].Products.length;j++){
                        var ul = document.createElement("ul");
                        ul.type = "square";
                        var ul_li = document.createElement("li");
                        ul_li.innerHTML = data[i].Products[j];
                        ul.appendChild(ul_li);
                        li.appendChild(ul);
                        document.querySelector("ol").appendChild(li);
                   }

              }
          }
     </script>
</head>
<body onload="bodyload()">
     <ol>

     </ol>
</body>
</html>

Task: Create a pin verification screen.

        Pin : [ textbox ] [submit]      => actual pin = 3456

        1st time =>  3223        => O/P  Invalid PIN 2 attempts left
        2nd time => 4223        => O/P  Invalid PIN 1 attempt left
        3rd  time => 5602        => O/P  Card Blocked

        from 1st to 3rd any time Pin=3456  => Verified successfully..

The While Loop:
- It you are not sure about number of iterations and the counter may change dynamically the you can use the while.
- It executes statements only when the given condition evaluates to true.

Syntax:
    while(condition)
    {
       statements;
       counter;
    }
Ex:
    var i = 1;
    while(i<=10)
    {
       console.log(i);
       i++;
    }

The "do" statement:
- It is similar to while but ensures that statements will execute at least once
  even when the condition evaluates to false.

Syntax:
    do {
        statements;
    } while (condition);

Ex:
    var i = 1;
    do {
           console.log(i);
        i++;
     } while(i<=10);

16/06
=====

Exception Handling Statements

- Computer program encounters 2 types of errors

    1. Compile Time Errors
    2. Runtime Errors

- Compile time errors are syntactical or block level errors, due to which a program fails to run.
- Runtime errors occur while using the application, It is the disability of compiler to understand instructions of client at run time of application.
- If compiler is unable understand the instructions then it leads to abnormal termination of application.
- Exception handling is required to avoid abnormal termination.
- Exception handling statements are
        a) try
        b) catch
        c) throw
        d) finally
- "try" is monitoring block that contains statements to execute.
- "catch" will catch the exception and report the error.
- "throw" is used to throw any exception explicitly.
- "finally" contains statements to execute always. [on success or on failure]

Syntax:
    try {
        // statements to execute    - you can "throw" exception
    }
    catch(error)
    {
         // report error
    }
    finally
    {
        // action to perform always
    }

Ex:
<script>
    try {
      var a = parseInt(prompt("Enter number-1"));
      var b = parseInt(prompt("Enter number-2"));
      if(b===0) {
         throw "Can't Divide By Zero";
      }
      if(b>a) {
         throw "Can't divide with a larger number";
      }
      var c = a/b;
      document.write(`Division=${c}<br>`);
    }
    catch(error){
      document.write(error);
    }
    finally {
      console.log('Program End');
    }
</script>

Summary:
1. Selection
2. Iteration
3. Jump
4. Looping
5. Exception Handling

   
                        JavaScript Functions

- Function is used to refactor the code.
- "Refactor" is the process of extracting a set of statements into a function or file.
- It allows to cleanly separate, reuse and extend code.

Function Configuration:
- A function can be configured in 2 ways

    a) Declaration
    b) Expression

Syntax: Declaration

    function Name()
    {
      statements;
    }

Syntax: Expression

    let  Name = function() {
       statements;
    }

Ex:
<script>
    var password = prompt("Enter Password");
    function Hello(){
       document.write("Hello ! JavaScript<br>");
    }

   
    let Welcome = function(){
       document.write("");
    }

    if(password==="admin"){
         Welcome = function(){
            document.write("Login Success..");
         }
    } else {
         Welcome = function(){
            document.write("Invalid Password");
         }
    }

    Hello();
    Welcome();
</script>

FAQ: What is difference between function expression and declaration?
Ans:   Declaration allocates memory for function where it configures same functionality
      every time.

      Expression allocates memory where you can change the functionality
      according to state and situation. You can assign a new functionality.

Function Syntax:
- A function declaration comprises of

    a) Declaration
    b) Signature
    c) Definition

   
    function  PrintNumbers(n)
    {

    }

    function PrintNumbers(n)            => Declaration
    PrintNumbers(n)                    => Signature
    { }                                => Definition

    Signature is used to access a function.
    Definition specifies the action performed.

Function Parameters:
- Function can be parameter less or parameterized.
- A parameterized function can change the functionality.
- Parameters allows to modify the function.

Syntax:
    function  Name(formal_param)
    {
    }

    Name(actual_value);

- The parameters defined in declaration are known as formal parameters.
- The parameters defined while calling function are known as actual parameters.

     formal_param = actual_value;

- Formal Parameter is a memory where you can store any type value
    a) Primitive
    b) Non Primitive
    c) Function

Ex:
<script>
     function PrintNumbers(HowMany){
         for(var i=1; i<=HowMany; i++){
             document.write(`${i}<br>`);
         }
     }
     PrintNumbers(5);
     PrintNumbers(10);
</script>

FAQ: What are higher order functions?
Ans:  A function that takes another function as parameter is known as Higher order function.

Syntax:
      function Name(ref)
      {
           ref();
      }

      Name(function() { });

     Higher order functions are mostly used in callback mechanism.

Ex:
<script>
     function Validate(success){
        success();
     }
     Validate(function(){document.write("Validation Success..")});
</script>

17/06
=====

Function Configuration
    a) Declaration
    b) Expression
Function Signature
Function Definition
Function Parameters
Formal Parameters
Actual Parameters
Higher order function

Multiple Parameters:

- A function can have multiple parameters.
- Every parameter is a required parameter.
- All parameters have order dependency.
  [ you have to use in the same order how they are defined ]

Ex:
<script>
     function Details(id, name, price, stock){
         if(price){
            document.write(`Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
         } else {
            document.write(`Id=${id}<br>Name=${name}<br>Stock=${stock}`);
         }
         
     }
     Details(1, "TV", undefined,true);
</script>

Default Parameters:

- Every formal parameter can be defined with a default value.
- It value is not defined while calling the function then it uses the default value instead of using "undefined".

Syntax:
    function Name(param1, param2=value, param3=value)
    {

    }

- If value is set to zero then it identifies as undefined.
- If you defined as undefined then it takes the default value.

Ex:
<script>
     function Details(id, name, price=100, stock){
         if(price){
            document.write(`Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
         } else {
            document.write(`Id=${id}<br>Name=${name}<br>Stock=${stock}`);
         }
         
     }
     Details(1, "TV",undefined,true);
</script>

Ex:
<script>
     function Details(id=1, name='', price=100, stock=false){
         if(price){
            document.write(`Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
         } else {
            document.write(`Id=${id}<br>Name=${name}<br>Stock=${stock}`);
         }
         
     }
     Details();
</script>

Rest Parameter:

- A function can have max 1024 parameters according to programming standards.
- Having too many parameters will lead to security issues.
- JavaScript ES5+ version introduced "Rest" parameter defined using "...param".
- A single rest parameter can handle multiple values.
- Rest parameter is array type.

Syntax:
        function Name(...param)
        {
        }

        param[ ]

        Name(1, "TV", 34000);

        param[0] = 1,
        param[1] = "TV"
        param[2] = 34000

Ex:
<script>
     function Details(...product){
      var [id, name, price, stock] = product;
      document.write(`Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
     }
     Details(1, "TV", 45000, true);
</script>

- Every function can have only one "rest" parameter.
- You can define other parameters with rest parameter.
- But rest parameter must be the last parameter in formal list.

Syntax:
    function Name(param1, ...args)
    {

    }
    Name(value1, value2, value3, value4);

    param1=value1
    args[ ]   = [value2, value3, value4]

Ex:
<script>
     function Details(title, ...product){
      var [id, name, price, stock] = product;
      document.write(`<h2>${title}</h2>Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
     }
     Details("Product Details", 1, "TV", 45000, true);
</script>

Spread Approach:
- JavaScript allows to spread values of one argument into multiple parameters.
- The argument type must be array.
- It can spread by using "..." operator.

Syntax:
    function Name(param1, param2, param3)
    {
    }

    Name( ...[value1, value2, value3] )

    param1=value1,
    param2=value2
    param3=value3

Ex:
<script>
     function Details(id, name, price, stock){
     
      document.write(`Id=${id}<br>Name=${name}<br>Price=${price}<br>Stock=${stock}`);  
     }
     var product = [1, "TV", 45000, true];

     Details(...product);
</script>

FAQ: What is difference between rest & spread?
Ans:  Rest is about single parameter that allows multiple arguments.
     Spread is about single argument of array type spreads into multiple parameters.

     Rest is about formal parameter.
     Spread is about actual parameter.

Anonymous Function:

- A function without name is known as anonymous function.
- It is mostly used in callback mechanism.
- Callback allows to execute a function according to state and situation.
- You have enclose the anonymous function using "()".
- It is accessed and invoked by using IIFE pattern.
  [Immediately Invoked Function Expression]

Syntax:
    (
      function(){ }
    )();

Ex:
<script>
    (function()
    {
       document.write("Anonymous Function");
    })();
</script>

Function with Return:
- Every function by default is "void" type.
- It removes the memory allocated for function after the end of function.
- "return" is a jump statement that keep the memory alive even after the end of function.
- The memory allocated for function can handle the functionality and the values returned by actions in function.

Syntax:
      function Name()
      {
          return  value;
      }

- A function can return any type of data
    a) Primitive
    b) Non Primitive
    c) Function

Ex:
<script>
    function Addition(a, b)
    {
      return a + b;
    }
    function PrintResult()
    {
      document.write(`Addition=${Addition(40,20)}`);
    }
    PrintResult();
</script>

Ex:
<script>
    function GetList(){
        return ["Electronics", "Fashion", "Footwear"];
    }
    GetList().map(function(item){
       document.write(`${item}<br>`);
    })
</script>

- If a function returns another function, then it is referred as function currying.

Syntax:
    function Name()
    {
      return function(){ }
    }

    Name()();

Ex:
<script>
    function Demo(){
       return function(uname){
           document.write(`Hello ! ${uname}`);
       }
    }
    Demo()('John');
</script>

Ex:
<script>
    function Demo(){
       return function(a, b){
           return a + b;
       }
    }
    document.write(`Addition=${Demo()(40,50)}`);
</script>

- A function can be configured with multiple return statements, which execute according to the state and situation.

- It can be referred as conditional rendering.

Ex:
<script>
    function Validate(isValid)
    {
         if(isValid===true){
             return  "Your form is valid and submitted to server";
         } else {
             return  "Invalid Form Data - Please verify your details";
         }
    }
    document.write(Validate(false));
</script>

18/06
=====

Parameters
Rest
Spread
Higher Order Function
Function Currying
Function Return
Anonymous Function

Function Callback & Promise
- Callback is a technique where a set of functions are defined to execute.  
- However functions execute according to state and situation.
- It uses "Synchronous" technique, where all other functions are blocked while executing specified function.

Syntax:    
    function Name(callback)
    {
    }
    Name(function(){ })

Ex: Callback
<script>
    function FetchData(url, success, failure){
          if(url==="fakestore"){
               success('Data Fetched Successfully..');
               function GetData(){
                  console.log([{Name:'TV', Price:24000}, {Name:'Mobile', Price:5000}])
               }
               GetData();
               console.log('Response presented successfully..');
          } else {
               failure('Invalid URL - Unable to fetch data');
          }
    }
    FetchData(
        prompt("Enter URL"),
        function(response) {
            console.log(`${response}`);
        },
        function(error) {
            console.log(`${error}`);
        }
    )
</script>

- Promise is an alternative for callback.
- Promise is asynchronous, it used unblocking technique.
- It can perform the given task without blocking other tasks in process.
- It is just like are real life promise that have
    a) resolve
    b) reject
- Resolve executes on success
- Reject executes on failure

Syntax:
    var  ref = new Promise(function(resolve, reject){
       
            resolve(value);
            reject(error);
    })

- Every promise comprises of 3 methods
    a) then()
    b) catch()
    c) finally()

- "then()" executes on resolve and collects the response.
- You can configure multiple then blocks on success.
- "catch()" executes on reject.
- "finally()" executes always.

Syntax:
    ref.then(function(response){}).catch(function(error){}).finally(function(){});

Ex:
<script>
    var FetchData = new Promise(function(resolve, reject){
       
         var url = prompt("Enter URL");

         if(url==="fakestore"){
             resolve([{Name:'TV', Price:5000}, {Name:'Mobile', Price:5500}]);
         } else {
             reject('Invalid URL - Unable to Fetch Data');
         }
    })
    FetchData.then(function(response){
         console.log(response);
    })
    .then(function(){
        console.log('Response Presented Successfully..');
    })
    .catch(function(error){
         console.log(error);
    })
    .finally(function(){
        console.log('End of Program');
    })
</script>

Async Functions:
- You can configure a function explicitly as asynchronous that awaits to perform the given task.
- It can execute without blocking other requests in process.
- JavaScript implicitly identifies Async functions as promises.

Syntax:
      function Name()
      {
         return  [ ]
      }
      Name();            // returns array

     async function Name()
     {
         return await [ ];
     }
     Name();            // returns promise
     Name().then().catch().finally()

Ex:
<script>
    async function GetData(){
        return await ["A", "B", "C", "D", "E"]
    }

    GetData().then(function(data){
        data.map(function(item){
             document.write(`${item}<br>`);
        })
    })
</script>

Note: You can configure async functions explicitly in a promise.  It allows to present
      the response data without blocking.

Syntax:
      data.map(async function(item){
        await document.write(item);
     })

Ex:
<script>
     fetch(`https://fakestoreapi.com/products/categories`)
     .then(async function(response){
         return await response.json();
     })
     .then(function(categories){
          categories.map(async function(category){
              await document.write(`<li>${category}</li>`);
          })
     })
     
</script>

Function Generator:
- Generator is function used to create iterators.
- Iterator is a software design pattern used to read elements from a collection in sequential order.

Syntax:
    function* Name()
    {
       yield  value,
       yield  value
    }

- Generator "*" refers to zero or more occurrences.
- It executes zero or more times.
- It provides an object that returns
    a) next()        read and continue
    b) return        to stop

- next() returns
    a) value          value it contains
    b) done        true if it is end of list.

Syntax:
     var obj = GeneratorName();
     obj.next().value
     obj.next().done

Ex:
<script>
    function* GetList(){
        yield  10,
        yield  ["A", "B"],
        yield  true,
        yield  {rating:4.5}
    }
    var obj = GetList();
    console.log(obj.next());
    console.log(obj.next());
    console.log(obj.next());
    console.log(obj.next());
    console.log(obj.next());
</script>

19/06
=====

Function Callback
Function Promise
Async Function
Function Generator

Function Recursion:
- Recursion is a technique of calling a function within the context of same function.
- It creates a indefinite loop which executes statements repeatedly based on given condition.

Syntax:
    function f1()
    {
      f1();
    }

Ex:
<script>
    function Factorial(n){
        if(n===1){
            return 1;
        } else {
            return n * Factorial(n-1);
        }
    }

    document.write(`Factorial of 6 is ${Factorial(6)}`);
</script>

Task:
  - Write a function with recursion to print number from 1 to 10.
  - Write a function with recursion to print all even numbers between 1 to 20.
  - Write a function with recursion to print multiplication table for given number.

Arrow Functions:

- Arrow is a short hand technique of writing function expression.
- It can minify the code and improve the performance.

    ()          function

    =>          return

    =>{ }          definition

Syntax:
     const  hello = function() {
        document.write("Hello !");
     }

     const hello = () =>  document.write("Hello !");

     
     const add = function(a,b) {
        return a + b;
      }

      const add = (a,b) => a + b;
      add(10, 20);

      const hello = function(uname) {

        document.write(`Hello ! ${uname}`);

       }

      const hello = uname => document.write(`Hello ! ${uname}`);

Ex:
<script>
    fetch(`https://fakestoreapi.com/products/categories`)
    .then(response => response.json())
    .then(categories => {
        categories.map(category=>{
             document.write(`<li>${category}</li>`);
        })
    })
</script>

Ex:
<script>
    var data = [{Name:'TV', Price:45000}, {Name:'Mobile', Price:34000}, {Name:'Watch', Price: 50000}];

   /*
    var products = data.filter(function(item){
         return item.Price >= 40000;
    })

    products.map(function(product){
         document.write(`${product.Name} - ${product.Price}<br>`);
    })
    */

     var products = data.filter(item=> item.Price>=40000);
     products.map(product=> document.write(`${product.Name}-${product.Price}<br>`));
     
</script>

Summary:
- Function Declaration
- Function Expression
- Function Signature
- Function Definition
- Function Parameters
- REST & Spread
- Function Return
- Function Callback
- Function Promise
- Async Function
- Anonymous Function
- Higher Order Function
- Function Currying
- Arrow Function
- Function Generator
- Function Closure

FAQ: What is a closure?
Ans:  It is a mechanism where the members of outer function are accessible to inner, but inner members are not accessible to outer.

Ex:
<script>
    function Outer(){
         var x = 10;
         function Inner(){
            var y = 20;
            return x + y;
         }
         document.write(`Addition=${Inner()}`);
    }
    Outer();
</script>

FAQ: What is function Chaining?
Ans:  It is a mechanism of accessing a function with reference of another function.

        string.bold().italic().fontsize(4).fontcolor('red');

        array.sort().reverse()

Task:
       function A(){ }

        A().B().C();
        A().C().B()

Ex:
<script>
    function A(){
        return {
            B(){
              document.write(`B<br>`);
              return this;
            },
            C(){
              document.write(`C<br>`);
              return this;
            }
        }
    }
    A().C().B();
</script>

Ex: Object Reference

<script>
    function A(){
        return {
            B(){
              document.write(`B<br>`);
              return this;
            },
            C(){
              document.write(`C<br>`);
              return this;
            }
        }
    }
    let obj = A();
    obj.B().C();
</script>

Task:
    Calculator.Add(10, 20).Sub(5).Mul(2)  

        30 - 5  = 25 * 2 = 50


                        JavaScript Events
1. What is Event?
 - Event is a message sent by sender to its subscriber in order to notify change.
 - Event follows a software design pattern called "Observer".
 - Event uses delegate mechanism, which is function pointer mechanism.

    function InsertClick()         => Subscriber
    {
    }

    onclick="InsertClick()"        => Sender

 - Subscriber defines the actions to perform.
 - Sender sends a notification to subscriber.
 - Sender triggers an action, which notifies the subscriber.

20/06
=====

Events
1. What is Event?
    - Sender
    - Subscriber
    - Observer
    - Delegate

2. What is Event Handler?
- Every element can use an event.
- If you are configuring event for element while designing then it requires a handler name starting with "on" keyword.

Syntax:
        <button onclick="InsertClick()">

          onclick=InsertClick()        => Handler Name
          onclick                    => Handler Event Name
          click                    => Event Name

3. What is Event Listener?
- Event listener allows to configure event for element dynamically.
- You can use the method "addEventListener()".

Syntax:
    document.querySelector("button").addEventListener("event", function(){

   })        

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            var btn = document.createElement("button");
            btn.textContent = "Insert";
            btn.addEventListener("click",()=>{
                 document.write("Record Inserted..");
            })
            document.getElementById("container").appendChild(btn);

            document.getElementById("btnDelete").addEventListener("click",()=>{
                document.write("Record Deleted..");
            })
        }
    </script>
</head>
<body onload="bodyload()">
   <div id="container">
     <button id="btnDelete">Delete</button>
   </div>
</body>
</html>

4. What are Event Arguments?
 - Event arguments carry payload from sender to subscriber.
 - Payload is the data about event and element.
 - There are 2 default event arguments

    a) this
    b) event

  - "this" sends information about current element, which includes element details like
    id, name, className, href, width, height, src etc..

  - "event" sends information about current event, which includes details like
    clientX, clientY, keyCode, charCode, which, shiftKey, ctrlKey, etc.

Syntax:
    <button onclick="Clicked(this)">

     function Clicked(obj)
     {
          obj.id, obj.name, obj.value, obj.className..
     }

Ex:
<!DOCTYPE html>
<html lang="en">
 <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function Player(obj){
            var para = document.querySelector("p");

            switch(obj.name){
                case "Play":
                para.innerHTML = "Playing..";
                break;
                case "Pause":
                para.innerHTML = "Paused";
                break;
                case "Stop":
                para.innerHTML = "Stopped";
                break;    
            }
        }
    </script>
</head>
<body>
    <button onclick="Player(this)" name="Play" class="bi bi-play"></button>
    <button onclick="Player(this)" name="Pause" class="bi bi-pause"></button>
    <button onclick="Player(this)" name="Stop" class="bi bi-stop"></button>
    <p></p>
</body>
</html>

Syntax:
     <button onclick="Clicked(event)">

     function Clicked(e)
     {
       e.clientX, e.clientY, e.ctrlKey ..
     }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        .box {
            width: 200px;
            height: 200px;
            background-color: black;
        }
    </style>
    <script>
        function BoxClick(e){
             document.querySelector("p").innerHTML = `
                 X Position : ${e.clientX} <br>
                 Y Position : ${e.clientY} <br>
                 Ctrl Key   : ${e.ctrlKey}
             `;
        }
    </script>
</head>
<body onclick="BoxClick(event)">
    <div class="box" >

    </div>
    <p></p>
 
</body>
</html>

 Syntax:
     <button onclick="InsertClick(this, event)">

     function InsertClick(obj, e)
     {
     }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function InsertClick(obj, e){
          console.log(`
                Button Id : ${obj.id}\n
                Button Name: ${obj.name}\n
                X Position : ${e.clientX}
          `)
       }
    </script>
</head>
<body>
    <button id="btnInsert" onclick="InsertClick(this, event)" name="Insert"> Insert </button>
</body>
</html>

Syntax:
     <button onclick="InsertClick(this.id, event.clientX)">

      function InsertClick(buttonId, xPosition)
      {
      }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function InsertClick(id, x){
          console.log(`
                Id = ${id} \n
                X = ${x}
          `)
       }
    </script>
</head>
<body>
    <button id="btnInsert" onclick="InsertClick(this.id, event.clientX)" name="Insert"> Insert </button>
</body>
</html>

- You can send custom arguments of any type
- You can use Rest parameters or spread approach.
- You can send custom arguments along with default arguments.

Syntax:
    <button onclick="Clicked(1, 'TV', [ ], { })">

     function Clicked(id, name, cities, rating) { }
     function Clicked(...product) { }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function InsertClick(obj,...product){
          var [id, name, price, cities, rating] = product;
          console.log(`
              Button Id : ${obj.id}\n
              Id : ${id}\n
              Name: ${name}\n
              Price: ${price}\n
              Cities: ${cities}\n
              Rating: ${rating.Rate}
          `)
       }
    </script>
</head>
<body>
    <button id="btnInsert" onclick="InsertClick(this, 1, 'TV', 45000, ['Delhi', 'Hyd'], {Rate:4.2})" name="Insert"> Insert </button>
</body>
</html>

23/06
=====
Event Handler
Event Listener
Event Args
    this
    event

Note: Event listener can have only one argument that refers to "event".
      However listener event allows both element and event details
           
Syntax:
        .addEventListener("event", (e) =>{

              e.clientX, e.clientY, e.ctrlKey;

              e.target.id,  e.target.name, e.target.href, e.target.className;
       
        })

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function bodyload(){
            document.getElementById("btnInsert").addEventListener("click", (e)=>{

                  console.log(`X Position : ${e.clientX}\nButton Value: ${e.target.value}`);

            })
       }
    </script>
</head>
<body onload="bodyload()">
    <button id="btnInsert" value="Insert">Insert</button>
</body>
</html>

5. What is Event Bubbling or Event Propagation?
A. Propagation is a mechanism where the child element event may trigger the parent
    events. You can stop propagation by using the event method "stopPropagation()".

Syntax:
     function childEvent(e)
     {
         e.stopPropagation();
     }

    <button onclick="childEvent(event)">

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       nav {
         border:1px solid black;
         padding: 20px;
       }
    </style>
    <script>
        function NavClick(){
             alert("Navbar Clicked");
        }
        function SearchClick(e){
            e.stopPropagation();
            alert("Search Clicked");
        }
    </script>
</head>
<body onload="bodyload()">
    <nav onclick="NavClick()">
         <h2>Amazon</h2>
         <button onclick="SearchClick(event)">Search</button>
    </nav>
</body>
</html>

6. How to stop the default events?
A. Several HTML generic elements have pre-defined functionality.
     When you configure explicit functionality then it performs both default and explicit.
     You can avoid execution of default functionality by using the event method
     "preventDefault()"

Syntax:
    <form onsubmit="SubmitClick(event)">

     function SubmitClick(e)
     {
       e.preventDefault();
     }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function RegisterClick(e){
           e.preventDefault();
           alert("Form Submitted Successfully..");
       }
    </script>
</head>
<body>
    <form onsubmit="RegisterClick(event)">
         Name <input type="text" name="UserName"> <button>Submit</button>
    </form>
</body>
</html>

7. What is Event Loop?
A.  It is an implicit concept of JavaScript where it can perform the given task along with
    the micro task in an async technique.
     It requires promises or timer events to handle event loop.
     It is non-blocking technique of executing tasks.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
     
    </style>
    <script>
       function GetData(){
           console.log(["A", "B", "C", "D"]);
       }
       function GetClick(){
          console.log("Request Started");

          setTimeout(GetData, 3000);

          console.log("Request End");
       }
    </script>
</head>
<body>
    <button onclick="GetClick()">Get Data</button>
</body>
</html>
     

8. What is Event Profiling?
A. Event profiling is a technique used by developers to track the performance and identify the issues in events.
    You can profile using developer tools.

    - Open Browser developer tools  [ right click => inspect ]
    - Go to performance category
    - Click on Record to start profiling
    - Record your activities by clicking or changing etc.
    - Stop profiling
    - You can examine the "call-tree" and "events stack".

9. What are various browser events?
A. Browser events are the members of browser "window" object.
    You can configure to various elements.
    They are categorized into different groups

    a) Mouse Events
    b) Keyboard Events
    c) Button Events
    d) Clipboard Events
    e) Element State Events
    f) Form Events
    g) Timer Events
    h) Touch Events etc.

Mouse Events:
    onmouseover
    onmouseout
    onmousedown
    onmouseup
    onmousemove

Mouse Event Args:

        e.clientX
        e.clientY
        e.ctrlKey
        e.shiftKey
        e.altKey etc.


Ex: Down and Up

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       body {
         display: flex;
         justify-content: center;
         align-items: center;
       }
       @keyframes Spin {
           from {
              transform: rotate(0deg);
           }
           to {
             transform: rotate(360deg);
           }
       }
    </style>
    <script>
       function MouseDown(){
            var img = document.querySelector("img");
            img.style.animationName = "Spin";
            img.style.animationDuration = "3s";
            img.style.animationIterationCount = "infinite";
            img.style.animationTimingFunction = "linear";
       }
       function MouseUp(){
            var img = document.querySelector("img");
            img.style.animationName = "Spin";
            img.style.animationDuration = "10s";
            img.style.animationIterationCount = "1";
       }
    </script>
</head>
<body>
   <img onmousedown="MouseDown()" onmouseup="MouseUp()" src="../public/images/wheel.png" width="200" height="200">
</body>
</html>

Ex: mover over and out

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <marquee scrollamount="20" onmouseover="this.stop()" onmouseout="this.start()">
        <img src="../public/images/a1.jpg" width="200" height="200">
        <img src="../public/images/a2.jpg" width="200" height="200">
        <img src="../public/images/a3.jpg" width="200" height="200">
        <img src="../public/images/a4.jpg" width="200" height="200">
        <img src="../public/images/a5.jpg" width="200" height="200">
        <img src="../public/images/a6.jpg" width="200" height="200">
    </marquee>
</body>
</html>

Ex: Mouse Move

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function MouseMove(e){
            var flag = document.querySelector("img");
            flag.style.position = "fixed";
            flag.style.left = e.clientX + "px";
            flag.style.top = e.clientY + "px";
        }
    </script>
</head>
<body onmousemove="MouseMove(event)">
   <div style="height:1000px">
      Move mouse pointer to test.
   </div>
   <img src="../public/images/flag.gif" width="50" height="50">
</body>
</html>

Button Events:
     onclick                single click
     ondblclick            double click
     oncontextmenu         right click
     onselectstart            button drag to select text

FAQ: How to disable right click in page?
Ans:  By using a function that returns false.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        document.oncontextmenu = function(){
             alert("Right Click not allowed");
             return false;
        }
        function DoubleClick(){
            window.open('../public/images/women-fashion.jpg','Fashion','width=400 height=500');
        }
    </script>
</head>
<body>
    <img ondblclick="DoubleClick()" src="../public/images/women-fashion.jpg" width="100" height="100">
    <p>Double Click to view large</p>
    <h2>Right Click not allowed</h2>
</body>
</html>

Ex: Disable selection

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        document.oncontextmenu = function(){
             alert("Right Click not allowed");
             return false;
        }
        function DoubleClick(){
            window.open('../public/images/women-fashion.jpg','Fashion','width=400 height=500');
        }

        document.onselectstart = function(){
             return false;
        }
    </script>
</head>
<body>
    <img ondblclick="DoubleClick()" src="../public/images/women-fashion.jpg" width="100" height="100">
    <p>Double Click to view large</p>
    <h2>Right Click not allowed</h2>
</body>
</html>

24/06
======

JavaScript OOP
Mouse Events
Button Events
Timer Events
    setTimeout()
    clearTimeout()
    setInterval()
    clearInterval()

Keyboard Events:
    onkeyup
    onkeydown
    onkeypress

- Keyup & Key down are used to verify the chars.
- Key press is good for verifying the ASCII code of chars.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyUser(e){
            console.log(`Key Code : ${e.charCode}`);
            var userid = document.getElementById("txtId").value;
            var lblError = document.getElementById("lblError");
            fetch(`../data/users.json`)
            .then(response=> response.json())
            .then(users => {
                 for(var user of users)
                 {
                     if(user.UserId===userid){
                          lblError.innerHTML = "User Id Taken - Try Another".fontcolor('red');
                          break;
                     } else {
                         lblError.innerHTML = "User Id Available".fontcolor('green');
                     }
                 }
            })
        }
        function VerifyCaps(e){
            var pwdBlock = document.getElementById("pwdBlock");

            if(e.keyCode>=65 && e.keyCode<=90){
                pwdBlock.style.display = "block";
                pwdBlock.style.color = "goldenrod";
            } else {
                pwdBlock.style.display = "none";
            }
        }
    </script>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <h3>Register User</h3>
    <dl>
        <dt>User Id</dt>
        <dd><input type="text" onkeyup="VerifyUser(event)" id="txtId"></dd>
        <dd id="lblError"></dd>
        <dt>Password</dt>
        <dd>
            <input type="password" onkeypress="VerifyCaps(event)" id="txtPwd">
        </dd>
        <dd id="pwdBlock" style="display: none;"> <span class="bi bi-exclamation-triangle"> Warning CAPS ON</span> </dd>
    </dl>
</body>
</html>

Clipboard Events
   
    oncut
    oncopy
    onpaste

- Clipboard is the temporary memory of your OS.
- The content that you cut or copy is kept on clipboard.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyUser(e){
            console.log(`Key Code : ${e.charCode}`);
            var userid = document.getElementById("txtId").value;
            var lblError = document.getElementById("lblError");
            fetch(`../data/users.json`)
            .then(response=> response.json())
            .then(users => {
                 for(var user of users)
                 {
                     if(user.UserId===userid){
                          lblError.innerHTML = "User Id Taken - Try Another".fontcolor('red');
                          break;
                     } else {
                         lblError.innerHTML = "User Id Available".fontcolor('green');
                     }
                 }
            })
        }
        function VerifyCaps(e){
            var pwdBlock = document.getElementById("pwdBlock");

            if(e.keyCode>=65 && e.keyCode<=90){
                pwdBlock.style.display = "block";
                pwdBlock.style.color = "goldenrod";
            } else {
                pwdBlock.style.display = "none";
            }
        }
    </script>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <h3>Register User</h3>
    <dl>
        <dt>User Id</dt>
        <dd><input type="text" oncopy="alert('User Id Copied')" onkeyup="VerifyUser(event)" id="txtId"></dd>
        <dd id="lblError"></dd>
        <dt>Password</dt>
        <dd>
            <input type="password"  onkeypress="VerifyCaps(event)" id="txtPwd">
        </dd>
        <dd id="pwdBlock" style="display: none;"> <span class="bi bi-exclamation-triangle"> Warning CAPS ON</span> </dd>
        <dt>Verify Password</dt>
        <dd>
            <input type="password" onpaste="return false">
        </dd>
    </dl>
</body>
</html>

Element State Events
     
    onchange
    onblur
    onfocus

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username=="john") {
                lblName.innerHTML = "User Name Taken - Try Another".fontcolor('red').fontsize(2);
            } else {
                lblName.innerHTML = "User Name Available".fontcolor('green').fontsize(2).bold().italics();
            }
        }
        function ChangeCase(){
            var code = document.getElementById("txtCode").value;
            document.getElementById("txtCode").value = code.toUpperCase();
              document.getElementById("lblStatus").innerHTML = "";    
        }
        function SetStatus(){
            document.getElementById("lblStatus").innerHTML = "eg: IDFC00392";
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
        <dt>Bank IFSC Code</dt>
        <dd><input type="text" id="txtCode" onfocus="SetStatus()" onblur="ChangeCase()"></dd>
        <dd id="lblStatus"></dd>
    </dl>
</body>
</html>

Form Events

    onsubmit
    onreset

 - Events used for <form> element.
 - Define actions to perform when form is submitted or reset.

Syntax:    
    <form  onsubmit="submit()"     onreset="reset()">

    </form>

Touch Events

    ontouchstart
    ontouchend
    ontouchmove

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function GetDetails(msg){
             document.querySelector("h2").innerHTML = msg;
        }
    </script>
</head>
<body>
    <img ontouchstart="GetDetails('Women Fashion 20% SALE')" src="../public/images/women-fashion.jpg" width="200" height="200">
    <img ontouchstart="GetDetails('Men Fashion SALE Starts on 30 JUNE')" src="../public/images/men-fashion.jpg" width="200" height="200">
    <img ontouchstart="GetDetails('Kids Accessories SALE Ends Soon')" src="../public/images/kids-fashion.jpg" width="200" height="200">

    <h2></h2>
</body>
</html>

                         JavaScript OOP

- Real world application development uses different programming systems.
   
    1. POPS
    2. OBPS
    3. OOPS

POPS
 - Process Oriented Programming System
 - It supports low level features.
 - It can directly interact with hardware services.
 - It uses less memory.
 - It is faster in interactions.

Ex: C, PASCAL

 - Reusability issues
 - No dynamic memory
 - Not easy to extend
 
OBPS
 - Object Based Programming System
 - It supports reusability
 - It supports separation
 - It supports dynamic memory

Ex: JavaScript, VB

 - Limited extensibility
 - No code level security

OOPS
- Object Oriented Programming System
- Code reusability
- Code extensibility
- Code separation
- Code level security

Ex: C++, Java

- It is complex in configuration
- It uses more memory
- It is tedious.

Note: JavaScript is not an OOP language. It supports only few features of OOP.


                             Modules in OOP
- Application uses library with "Legacy" type.
- Legacy will load all functions into memory even when they are not in use.
- Modular approach allows to load only what is required for the situation.
- It makes application light weight and faster.
- To use modules in JavaScript you need various module systems to install.
- There are various module systems like
    a) ESModule
    b) UMD (Universal Module Distribution)
    c) AMD (Asynchronous Module Distribution)
    d) Common JS
    etc.

- Browser uses "ES Module" system but you have to enable by using <script> type set as "module".

Syntax:
    <script type="module">

    </script>

- Every JavaScript file is considered as a module.
- Every members of module can be exported to another location. But they must be marked with "export".

        export var name = value;
        export function name() { }
        export class name { }

- You can import only what is required from module

        import  { varName, functionName, className } from  "./file.js";

Ex:
demo.js
 
export function Addition(a, b){
    return a + b;
}

export function Hello(){
    return "Hello ! JavaScript";
}

export function Multiply(a,b){
    return a * b;
}

demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
         import { Hello, Addition } from "./demo.js";
         document.querySelector("h1").innerHTML = Hello();
         document.querySelector("p").innerHTML = Addition(10, 30);
    </script>
</head>
<body>
    <h1></h1>
    <p></p>
</body>
</html>

25/06
=====

OOP
- Modules
    a) export
    b) import

Default Export:
- Every module can have only one default export.
- If define an expression or variable, you can't directly export as it leads to strict issues.
- It requires default export.
- If you want to configure a function or variable and export later then mark as default.

Syntax:
          const  name =  () => { } ;

          export default name;

- If any member is marked as "default" then you have to import without block.

          import  name  from "./module";
          import  name { others } from "./module";

Ex:
demo.js

export function Addition(a, b){
    return a + b;
}

export function Hello(){
    return "Hello ! JavaScript";
}

const Multiply = (a,b) => a * b;

export default Multiply;

demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
         import Multiply, { Hello, Addition} from "./demo.js";
         document.querySelector("h1").innerHTML = Hello();
         document.querySelector("p").innerHTML =`Addition=${Addition(10,50)}<br>Multiply=${Multiply(5,2)}`;
    </script>
</head>
<body>
    <h1></h1>
    <p></p>
</body>
</html>

FAQ: Can we import components from multiple modules ?
Ans : Yes.

FAQ: How to handle ambiguity ?
Ans:  Ambiguity is the issue of having same name members in different module and
     you are importing into same location.

     You can reduce ambiguity issues by aliasing.

Syntax:
        import   { name as ref  } from  "module";

Ex:
1. add files
   
    module1.js
    module2.js

2. module1.js

export function Hello(){
     return "Hello ! from Module-1";
}

3. module2.js

export function Hello(){
    return "Hello from Module-2";
}

4. demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
        import { Hello } from "./module1.js";
        import { Hello as M2Hello } from "./module2.js";

        document.querySelector("p").innerHTML = `${Hello()}<br>${M2Hello()}`;
    </script>
</head>
<body>
    <h1></h1>
    <p></p>
</body>
</html>


FAQ: How to import all members from a module?
Ans:  By using "*" as aliasing reference.

Syntax:
       import * as ref from "module";

       ref.f1();
       ref.f2();

Ex:
demo.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="module">
        import { Hello } from "./module1.js";
        import  * as lib from "./module2.js";

        document.querySelector("p").innerHTML = `${Hello()}<br>${lib.Hello()}`;
    </script>
</head>
<body>
    <h1></h1>
    <p></p>
</body>
</html>

                           Class in OOP
- Class is a program template.
- It provides pre-defined data and logic.
- It is referred as a Model when it is mapping with data requirements.
- It is referred as an Entity when it is mapping with business requirements.
- It enables separation and easy reusability.

Configuring Class:
1. You can define as expression or use a declaration.

    class Name               => declaration
    {
    }

       const Name = class {     => expression

    }    

2. Expression allows to change according to the situation.


Class Members:
- A class member can be any one of the following

    a) Property
    b) Accessor
    c) Method
    d) Constructor

- You can't define variable or function as class member, but you can configure them inside class.
- Class allows only mutable members. Variable and functions are immutable.

Property:
 - It is used to store data.
 - You can store any type of data in a property.
 - Property is mutable.
 - It is controlled by using accessors.

Syntax:
    class Name
    {
       property = value;
    }

 - A property can be static or non static.
 - If property is static it is accessible inside and outside class by using class name.
 - If property is non-static then it is accessible inside class using "this" and outside class by using "instance of class".

Syntax:
      let obj = new ClassName();
      obj.Property;

Ex:
<script>
     class Product
     {
         Id = 1;
         Name = "TV";
         Cities = ["Delhi", "Hyd"];
         Rating = { Rate: 4.2 }
     }
     let obj = new Product();
     document.write(`Id=${obj.Id}<br>Name=${obj.Name}<br>Cities=${obj.Cities}<br>Rating=${obj.Rating.Rate}`);
</script>

FAQ: What is difference between static and non-static?
Ans:  Static refers to continuous memory.
      Memory allocated for first object will continue to next.

      Non Static refers to discreet memory.
      Memory is newly allocated for every object.

      Static members are declared by using "static" keyword.
      Default without static keyword all members are non-static.

Ex:
<script>
     class Demo
     {
         static s = 0;
         n = 0;
         constructor(){
            Demo.s = Demo.s + 1;
            this.n = this.n + 1;
         }
         Print(){
            document.write(`s=${Demo.s} n=${this.n}<br>`);
         }
     }
     let obj1 = new Demo();
     obj1.Print();

     let obj2 = new Demo();
     obj2.Print();

     let obj3 = new Demo();
     obj3.Print();
</script>

FAQ: What are the new Prefix for class members?
Ans:  
        #        to configure private
        _         to define internal access

       If any member is defined with "#" prefix then it is not accessible outside class.
       The prefix "_" is just a rule to define the accessibility inside.

Ex:
<script>
    class Product
    {
         Name = "Samsung TV";
         #Price = 45000;            // Private
         _Stock = true;                // Marked to access inside
    }
    let obj = new Product();
   
</script>

Accessors:
- Accessor is used to configure a fine grained control over the property.
- It controls read and write operations on property.
- There are 2 accessors

    a) Getter    get()        
    b) Setter    set()

- Getter is used to read and return value of a property.

    get Name()
    {
       return value;
    }

- Setter is used to set and a new value into property

    set  Name(newname)
    {
        property = newname;
    }

Ex:
<script>
   var username = prompt("Enter User Name");
   var role = prompt("Enter your role", "admin|customer");
   var productname = prompt("Enter Product Name");
   class Product
   {
       _productName;

       get ProductName(){
          return this._productName;
       }

       set ProductName(newname){
           if(role==="admin"){
            this._productName = newname;
           } else {
              document.write(`Hello ! ${username} you are not authorized to set product name`);
           }
       }

   }
   let obj = new Product();
   obj.ProductName = productname;
   if(obj.ProductName)
   {
       document.write(`Product Name : ${obj.ProductName}`);
   }
</script>

26/06
======

Class Members
- Property
- Accessor
- Static & Non Static
- Private

Method:
- It is just like a function.
- It can return a value or perform any specified functionality.

Syntax:
      class Name
      {
         Method() {

          }
      }

     let obj = new Name();
     obj.Method();

- Method can be parameterized or parameter less.
- It can be void or with return.
- It is mutable. [ function is immutable ].

Ex:
<script>
   class Product
   {
       Name = "Samsung TV";
       Price = 56000;
       Qty = 2;
       Total(){
          return this.Qty * this.Price;
       }
       Print(){
          document.write(`Name=${this.Name}<br>Price=${this.Price}<br>Qty=${this.Qty}<br>Total=${this.Total()}`)
       }
   }
   let tv = new Product();
   tv.Qty = parseInt(prompt("Enter Qty"));
   tv.Print();
</script>

Constructor:
- It is used to for instantiation.
- It is responsible for creating an object for class.
- Every class have a default constructor.
- You can define explicitly constructor to specify the actions to perform while creating object for class.
- JavaScript constructor is anonymous.
- It is defined using constructor keyword.

Syntax:
    class Name
    {
       constructor() { }
    }

- A constructor will execute automatically for every object.
- Constructor can execute only once for object.
- A constructor can be parameterized.
- Parameterized constructor requires the parameters to pass while allocating memory for object.

Syntax:
        class Name
        {
           constructor(params) { }
        }

        let obj = new Name(value);

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class Database
	        {
            constructor(dbname){
                document.write(`Connected with ${dbname} Database<br>`);
            }
            Insert(){
                document.write("Record Inserted");
            }
            Update(){
                document.write("Record Updated");
            }
            Delete(){
                document.write("Record Deleted");
            }
        }
        function DbAction(action){
            switch(action)
            {
                case "Insert":
                     let ins = new Database(document.querySelector("select").value);
                     ins.Insert();
                     break;
                case "Update":
                      let update = new Database(document.querySelector("select").value);
                      update.Update();
                      break;
                case "Delete":
                      let del = new Database(document.querySelector("select").value);
                      del.Delete();
                      break;
            }
        }
    </script>
</head>
<body>
    <select>
        <option>Select Database</option>
        <option>MySQL</option>
        <option>MongoDB</option>
    </select>
    <button onclick="DbAction('Insert')">Insert</button>
    <button onclick="DbAction('Update')">Update</button>
    <button onclick="DbAction('Delete')">Delete</button>
</body>
</html>

Reusability & Extensibility:

- Reusability and extensibility are primary features of OOP.
- You can reuse the code of one class in another class by using 2 techniques

    1. Aggregation
    2. Inheritance

Aggregation:
- It is the process of accessing the member of one class in another class without configuring any relationship between classes.

- It is referred as "Has-A-Relation" and it uses object to object communication.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class HDFC_Bank_Version1
        {
             Personal = "Personal Banking Services";
             Print(){
                document.write(`${this.Personal}<br>`);
             }
        }
        class HDFC_Bank_Version2
        {
            NRI = "NRI Banking Services";
            Print(){
                let obj = new HDFC_Bank_Version1();
                obj.Print();
                document.write(`${this.NRI}<br>`);
            }
        }
        class HDFC_Bank_Version3
        {
            Loans = "Housing and Car Loans";
            Print(){
                let obj = new HDFC_Bank_Version2();
                obj.Print();
                document.write(`${this.Loans}<br>`);
            }
        }
        function InstallClick(){
            var ver = document.querySelector("select").value;
            switch(ver)
            {
                case "ver1":
                 document.write("<h1>Version-1 Installed</h1>");
                 let obj1 = new HDFC_Bank_Version1();
                 obj1.Print();
                 break;
                case "ver2":
                document.write("<h1>Version-2 Installed</h1>");
                 let obj2 = new HDFC_Bank_Version2();
                 obj2.Print();
                 break;
                 case "ver3":
                 document.write("<h1>Version-3 Installed</h1>");
                 let obj3 = new HDFC_Bank_Version3();
                 obj3.Print();
                 break;
                 default:
                 document.write("<h2>Please select a version</h2>");
                 break;
            }
        }
    </script>
</head>
<body>
    <h2>Install Bank App</h2>
    <select>
        <option>Select Version</option>
        <option value="ver1">Version-1</option>
        <option value="ver2">Version-2</option>
        <option value="ver3">Version@latest</option>
    </select>
    <button onclick="InstallClick()">Install</button>
</body>
</html>

Inheritance:
- It is the process of reusing and extending the code by configuring relationship between classes.
- It is referred as "Is-A-Relation".
- A class can use the features of another class by extending the class.

Syntax:
    class A
    {
    }
    class  B extends A
    {
    }

    A    => Super Class
    B    => Derived Class

- Super class members are accessible in derived class by using "super" keyword.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        class HDFC_Bank_Version1
        {
             Personal = "Personal Banking Services";
             Print(){
                document.write(`${this.Personal}<br>`);
             }
        }
        class HDFC_Bank_Version2 extends HDFC_Bank_Version1
        {
            NRI = "NRI Banking Services";
            Print(){
                super.Print();
                document.write(`${this.NRI}<br>`);
            }
        }
        class HDFC_Bank_Version3 extends HDFC_Bank_Version2
        {
            Loans = "Housing and Car Loans";
            Print(){
                super.Print();
                document.write(`${this.Loans}<br>`);
            }
        }
        function InstallClick(){
            var ver = document.querySelector("select").value;
            switch(ver)
            {
                case "ver1":
                 document.write("<h1>Version-1 Installed</h1>");
                 let obj1 = new HDFC_Bank_Version1();
                 obj1.Print();
                 break;
                case "ver2":
                document.write("<h1>Version-2 Installed</h1>");
                 let obj2 = new HDFC_Bank_Version2();
                 obj2.Print();
                 break;
                 case "ver3":
                 document.write("<h1>Version-3 Installed</h1>");
                 let obj3 = new HDFC_Bank_Version3();
                 obj3.Print();
                 break;
                 default:
                 document.write("<h2>Please select a version</h2>");
                 break;
            }
        }
    </script>
</head>
<body>
    <h2>Install Bank App</h2>
    <select>
        <option>Select Version</option>
        <option value="ver1">Version-1</option>
        <option value="ver2">Version-2</option>
        <option value="ver3">Version@latest</option>
    </select>
    <button onclick="InstallClick()">Install</button>
</body>
</html>

Note: The basic inheritance rule :  "A derived class constructor must call super class                                   constructor"

Syntax:
    class A
    {
       constructor(){ }
    }
    class B extends A
    {
       constructor {
        super();
        }
    }

Ex:
<script>
    class Super
    {
         constructor(){
            document.write("Super Class Constructor");
         }
    }
    class Derived extends Super
    {
        constructor(){
            super();
            document.write("Derived Class Constructor");
        }
    }
    let obj = new Derived();

</script>

                           Polymorphism
- Poly refers to "Many".
- Morphos refers to "Forms".
- Polymorphism is a feature that allows one component to handle different actions.
- Technically a single base class reference can use the memory of multiple derived classes.

Syntax:
    let obj = new Array(new m1(), new m2(), new m2());

    obj => is handling 3 classes and can switch between them.

Ex:
<script>
    class Employee
    {
        FirstName;
        LastName;
        Designation;
        Print(){
            document.write(`${this.FirstName} ${this.LastName} - ${this.Designation}<br>`);
        }
    }
    class Developer extends Employee
    {
        FirstName = "Raj";
        LastName = "Kumar";
        Designation = "Developer";
        Role = "Developer Role : Build, Debug, Test";
        Print(){
            super.Print();
            document.write(`${this.Role}`);
        }
    }
    class Admin extends Employee
    {
        FirstName = "Kiran";
        LastName = "Kumar";
        Designation = "Admin";
        Role = "Admin : Authorizations";
        Print(){
            super.Print();
            document.write(`${this.Role}`);
        }
    }
    class Manager extends Employee
    {
        FirstName = "Tom";
        LastName = "Hanks";
        Designation = "Manager";
        Role = "Manager Role : Approvals";
        Print(){
            super.Print();
            document.write(`${this.Role}`);
        }
    }

    let employees = new Array(new Developer(), new Admin(), new Manager());
    var designation = prompt("Enter Designation");

    for(var employee of employees)
    {
         if(employee.Designation===designation){
             employee.Print();
         }
    }

</script>

                            Browser Objects
1. window

    alert()
    confirm()
    prompt()
    XMLHttpRequest
    fetch()
    open()
    print()
    etc..

2. document

    write()
    appendChild()
    getElementById()
    querySelector()
    getElementsByTagName()
    innerHTML
    textContent
    etc..

3. location

    href
    search
    host
    port
    protocol
    pathname
    etc..

27/06
======

JavaScript Browser Objects
1. window
2. document
3. location
    host
    pathname
    protocol
    port
    href
    search
    etc..

Ex:
<script>
    document.write(`
          IP : ${location.host} <br>
          URL : ${location.href} <br>
          Protocol : ${location.protocol} <br>
          Port : ${location.port} <br>
          Path : ${location.pathname} <br>
          Query String : ${location.search}
    `)
</script>

4. navigator
- It is used to get client browser details.
- Browser details include

        appName        browser family name
        appVersion        browser version
        platform            OS type
        language            regional language
        cookieEnabled    true when cookies are enabled
        geoLocation        It get the current location latitude and longitude
        etc..

<script>
    document.write(`
         Browser Family : ${navigator.appName} <br>
         Version : ${navigator.appVersion} <br>
         Cookies Enabled : ${navigator.cookieEnabled}
    `)
</script>


Syntax: Geo Location

    navigator.geolocation.getCurrentPosition(function(position){
       
            position.coords.latitude;
            position.coords.longitude;
       
    })

Ex:
<script>
    navigator.geolocation.getCurrentPosition(function(position){
          fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=1318ca6725c69160d346c41fc0612596&units=metric`)
          .then(response=>response.json())
          .then(weatherObj=>{
              document.write(`
                  Location : ${weatherObj.name} <br>
                  Temp     : ${weatherObj.main.temp}
              `);
          })
    })
</script>

5. history
  - It provides properties and methods used to access current browsing history
 
      length        : total count of pages visited
      back()        : moves to previous page in history
      forward()    : moves to next page in history

Syntax:
        history.length
        history.back()

FAQ: How to navigate to any page dynamically?
Ans:  By using "location.href"

Syntax:
        location.href = "new_path";

Summary:
- window
- location
- navigator
- document
- history

                         State Management

- Web application use "http" as protocol.
- Http is a state less protocol.
- State less uses the mechanism of "Go-Get-Forget".

    GO        : Establish connection with server
    GET        : Get response  from server.
    FORGET    : Cleanup data from server.

- State less nature of  HTTP is good for application as memory is well managed.
- However it is not good for continuous operations.
- You can't carry data from one page to another. It requires various state management techniques.
- State Management allows to allocate memory so that it can accessed across pages.
- If memory is allocated on client device then it is called as Client Side State Management.
- If memory is allocated on server then it is "Server Side State Management".
- Client Side State is configured using

        1. Query String
        2. Session Storage
        3. Local Storage
        4. Cookies

Query String:
 - It is appended into URL and stored in address bar.
 - It is a key and value collection.

        ?key=value&key=value

Ex:
1. Add a new folder  "state".

2. Add following files
       
     login.html
     dash.html

3. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Login</h2>
    <form method="get" action="./dash.html">
        User Name : <input type="text" name="uname"> <button>Login</button>
    </form>
</body>
</html>

4. dash.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            if(location.search===''){
                location.href = "./login.html";
            } else {
                var params = new URLSearchParams(location.search);
                document.getElementById("lblName").innerHTML = params.get("uname").toUpperCase();
            }
        }
        function SignoutClick(){
            location.href = "./login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>
        <span id="lblName"></span> <span> - Dashboard</span>
        <button onclick="SignoutClick()">Signout</button>
    </h2>
</body>
</html>

Session Storage:
 - It is a browser storage.
 - It is temporary storage.
 - It is deleted when browser is close.
 - It is not accessible across tabs in browser.
 
Syntax:    
    sessionStorage.setItem("key", value)
                  .getItem("key")
                  .removeItem("key")
                  .clear()

Ex:
1. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
             sessionStorage.setItem("uname", document.getElementById("txtName").value);
             location.href = "./dash.html";
        }
    </script>
</head>
<body>
    <h2>Login</h2>
     User Name : <input type="text" id="txtName"> <button onclick="LoginClick()">Login</button>
</body>
</html>

2. dash.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){

            setTimeout(()=>{
                alert('Your session timed out');
                location.href = "./login.html";
            }, 10000)

            if(sessionStorage.getItem("uname")===null){
                location.href = "./login.html";
            } else {
                document.getElementById("lblName").innerHTML = sessionStorage.getItem("uname");
            }
        }
        function SignoutClick(){
            sessionStorage.removeItem("uname");
            location.href = "./login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>
        <span id="lblName"></span> <span> - Dashboard</span>
        <button onclick="SignoutClick()">Signout</button>
    </h2>
</body>
</html>

Local Storage:
- It is browser storage.
- It is permanent storage.
- It is available across tabs.
- It is not deleted even after browser close.
- You have to explicitly remove.

Syntax:
        localStorage.setItem()
                     .getItem()
                     .removeItem()
                     .clear()

Ex:
1. login.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
             localStorage.setItem("uname", document.getElementById("txtName").value);
             location.href = "./dash.html";
        }
    </script>
</head>
<body>
    <h2>Login</h2>
     User Name : <input type="text" id="txtName"> <button onclick="LoginClick()">Login</button>
</body>
</html>

2. dash.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){

            if(localStorage.getItem("uname")===null){
                location.href = "./login.html";
            } else {
                document.getElementById("lblName").innerHTML = localStorage.getItem("uname");
            }
        }
        function SignoutClick(){
            localStorage.removeItem("uname");
            location.href = "./login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>
        <span id="lblName"></span> <span> - Dashboard</span>
        <button onclick="SignoutClick()">Signout</button>
    </h2>
</body>
</html>

Cookies:
- Cookie is simple text document.
- Client details can be stored in a cookie and can be accessed across pages.
- Cookie can be 2 types

    a) In Memory [  Temporary ]
    b) Persistent  [  Permanent ]

- To make cookie permanent you have to set expiry date and time.

Syntax:
        document.cookie = "name=value; expires=dateTime";

Note: To remove cookie from memory you have to define an elapsed date and time.

Ex:
1. login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
             document.cookie = `uname=${document.getElementById("txtName").value};expires=Sat, 29 Jun 2025 14:14:19 GMT`;
             location.href = "./dash.html";
        }
    </script>
</head>
<body>
    <h2>Login</h2>
     User Name : <input type="text" id="txtName"> <button onclick="LoginClick()">Login</button>
</body>
</html>

2. dash.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            document.getElementById("lblName").innerHTML = document.cookie.slice(document.cookie.indexOf("=")+1);
        }
        function SignoutClick(){
            document.cookie = `uname='';expires=Sat, 25 Jun 2025 14:14:19 GMT`;
            location.href = "./login.html";
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>
        <span id="lblName"></span> <span> - Dashboard</span>
        <button onclick="SignoutClick()">Signout</button>
    </h2>
</body>
</html>
11/03
====

Web Applications

1. What is Network?
- A computer network comprises of group of computers connecting with each other for sharing information and resources. 
- ARPANET is the first computer network introduced in early 1960's by US-DOD.
 [Advanced Research Project Agency Network]
- Networks are classified into 3 major types
	a) LAN
	b) MAN
	c) WAN

2. What is Internet?
- Internet is a "Wide Area Network" that connects computers all over the world. 
- CERN [Council for European Research and Nuclear] labs developed the concept of Internet. 

3. What is Web?
- Web is a portion of internet with restricted access.
- "Tim Berners Lee" introduced the concept of Web in early 1990's.
- Web uses the architecture of Request and Response. 
- Web Standards are maintained by "W3C" World Wide Web Consortium. 
		https://www.w3.org/

4. What are the principles of Web?
	a) Accessibility 
	b) Internationalization 
	c) Privacy
	d) Security 

5. What is the latest version of Web?
A. Web3


6. What web comprises of? What web contains?
	- Web Site
	- Web Applications
	- Blogs
	- Micro Blogs
	- Vlogs
	- Podcasts 
	- Wiki
	- Widgets etc.

	

12/03
=====
		   
Web Application- Architecture 
Backend

1. Data Center
	- Database
		MongoDB
		MySQL

2. Application Center
	- Node JS
	- Express JS
	- API

Frontend

1. HTML
2. CSS
3. Bootstrap
4. Tailwind CSS
5. Sass
6. JavaScript
7. jQuery
8. React

Tools
1. GIT
2. Cloud 
3. Testing [JEST]

Front End Technologies

Setup your device for Web Technologies:

1. Make sure that you have a device with Windows 8+ version
    You can have other OS services like Linux, Mac.

2. Make sure that your device is having min 8+ GB RAM

3. Download and Install "Node JS" on your PC

     - Node JS is used by developers to build web applications, servers, command line
       tools and scripts. 

     - visit the official website of Node JS
		https://nodejs.org/en

     - Download Installer package  ".msi"
	
     - Run the setup file to install

     - Check the version from command prompt after installing. 

		C:\> node  -v		 => make sure that you have the latest version of Node

4. Download and Install "Visual Studio Code" editor

     - Editor is a software tool used by developers to build, debug, test and deploy 
       applications. 
     - There are various editors like  sublime, webstrom, PyCharm, etc.
     - Our editor is VS Code [Visual Studio Code]

		https://code.visualstudio.com/

13/03
=====

Web Application Architecture
- Backend
- Front End

Setup Environment for Web Applications
1. Install Node JS
2. Install Visual Studio Code [IDE - Integrated Development Environment]


Setup VS Code for Web Designing:

1. Open Visual Studio Code editor from your programs

2. Go to "Extensions" category

3. Search for following extensions and install on your PC

	a) Live Server [ Ritwick Dey ]
	b) Live Preview [ Microsoft ]
	c) vscode-icons [vscode-team]
	d) IntelliSense for CSS class names in HTML [Zignd]

4. Go to "Settings" of Visual Studio Code

5. Open Settings => Search Settings => Type  "emmet"

6. Select the checkbox "Show Abbreviation Suggestions"


Create a new Web Application:

FAQ's:
1. What is a website? 
A. Website is a virtual directory on web server.
     It provides access to resources on server.

2. What is Physical Path?
A. Every website keeps its resources on server at a specific physical location, which
    you can refer as Physical Path.

			D:\erp-app		=> Physical Path

3. What is Virtual Path?
A. Website resources are accessed by using an URL [Uniform Resource Locator], 
     which is referred as Virtual Path.

			http://127.0.0.1/erp-app

4. What is Web Application?
A. Application handles a business. It enables all business interactions. 
    It requires both client side and server side integrations. 


Setup Application:

1. Open any PC location and create a new folder for your application

		  D:\fitness-app

2. Open Visual Studio Code

3. Go to File Menu => Open Folder => D:\Fitness-App

Note: Every application comprises of 3 environments
		a) Development  [ design ]
		b) Quality		    [ test ]
		c) Production 	    [ deploy - go live ]

4. Setup Development environment for your App

	- Open Terminal in VS Code [ Ctrl + ` ]  
	- Run the following command

		> npm  init  -y

		   * NPM is node package manager. 
		   * Package Manager is a tool required for installing, updating and uninstalling
		     any library required for project. 
		   * There are various package managers like 
				a) Yarn
				b) Bower
				c) NuGet
				d) Composer
				e) Ruby Gems 
				f)  NPM etc.
	- It generates a new file into project by name "package.json"

		  * It comprises of project meta data.
		  * It is project configuration file.

	- Add a new file into project  by name   "README.md"
		
		  * It is a help document
		  * Designed by developer for developers
	
	- Add following folders into project
		
		a) public
		b) src

		* public is for static resources like images, docs, html etc.
		* src is for dynamic resources like css, scss, js, ts, etc.

14/03
=====

Installing Extensions in VS Code
Creating a new Web Application
Setup File System

		D:\FITNESS-APP
		|
		|_public
		|	|_images
		|	|_docs
		|	|_videos
		|
		|_src
		|	|_styles
		|	|_scss
		|	|_scripts	
		|
		|_package.json
		|_README.md

Reference Sites for Images:
		
		https://www.freepik.com/
		https://www.canva.com/
		https://copilot.microsoft.com/

Run Your Application:
1. Click on "Go Live" in status bar of VS Code

2. Your application starts on local server with following reference address 

		http://127.0.0.1:5500

		http://127.0.0.1:5500/public/images/banner.jpg
				(or)

		http://localhost:5500


						    Web Page

- Web Page is a "Hyper Text" document.
- It provides an UI (User Interface) from where user can interact with resources.
- The term "Hyper" refers to "beyond".
- A hyper text document takes you beyond what you see on screen. 
- Web Pages are classified into 2 types

		a) Static Page
		b) Dynamic Page

Static Page
- Static refers to continuous memory. 
- A static page comprises of same content to send as response for every request. 
- Static page have extension
	.html
	.htm

Dynamic Page
- Dynamic refers to discreet memory. 
- A dynamic page customizes the response according to client request. 
- Dynamic page have extension
	.asp
	.php
	.aspx
	.jsp	etc..

Note: Both static and dynamic pages are designed by using HTML. 
	 However their composition changes.

		Static Page	= HTML + CSS + JS + JQ
		Dynamic Page = HTML + CSS + JS + JQ + Server Side Scripting

- Every web application starts with a static page "index.html".

19/03
=====
     HTML
- Hyper Text Markup Language
- Hyper means beyond. 
- Hyper Text takes the user beyond the content.
- The term Markup refers to "Marking Up", which is a process of preparing our content to present on browser.
- HTML is a markup language. 
- You can also call it as "Presentation Language".

Evolution of HTML:
- CERN labs [Council for European Research and Nuclear] developed a language for internet, which is named as "GML". [Generic Markup Language]
- GML is used for a browser called MOSAIC.
- CERN developed SGML an improved version of GML. [Standard GML]
- "Tim Berners Lee" developed HTML in early 1990's. 
- HTML is superset to GML & SGML. 
- IETF [Internet Engineering Task Force] developed several versions of HTML.
- IETF developed HTML up to version 3.1.
- WHATWG [Web Hyper Text Application Technology Work Group] started evolving and maintaining HTML since 2004. 
- WHATWG started with HTML 4 version and now the latest till date is HTML 5. [2014]

		https://www.w3.org/					Web Standards 
		https://whatwg.org/					HTML [Evolving & Maintenance]
		https://developer.mozilla.org/en-US/	HTML, CSS, JavaScript documents

Browser:
- It is a software tool used by client to access and view web resource.
- There are various browsers 
	a) Edge
	b) Firefox 
	c) Opera
	d) Safari etc..

Browser Architecture:
1. User Interface 		
	- It refers to browser interface, which includes buttons, search bar, title bar,
	  status, extensions, bookmarks etc.

2. UI Backend 
	- It comprises of logic required for browser UI.
	- You can customize the browser UI with backed logic if it is an open source 	 
	  browser.
	- Some popular open source browsers are
			a) Chromium 
			b) Brave
			c) Arora 
			d) Dooble  etc.

3. Browser Engine 
	- It translates HTML and CSS into Binary.
	- Every browser have its own engine.
	- Some of the popular browser engines
		
			Edge		Chakra 
			Firefox		Spider Monkey, Gecko 
			Safari 		Webkit 
			Chrome		V8
			Opera		V8
			etc..

4. Rendering Engine
	- It is responsible for presentation 
	- Rendering is the process of preparing the final presentation to generate as 	 
	  output.


5. JavaScript Interpreter 
	- It is responsible for translating JavaScript in browser.
	- Interpreter translates line by line of program. 


6. Networking 
	- It is responsible for locating the resources required for webpage and load the
	  resources into browser.
	- It monitors loading time and issues while loading content. 


7. Data Persistence 
	- It refers to browser memory where browser can store client data.
	- Browser storage includes
		a) Local Storage
		b) Session Storage
		c) Cookies 
		d) Query String etc.

20/03
=====

HTML Parsing:

What is HTML?
Evolution of HTML
	- WHATWG
Browser
Browser Architecture 
	- UI
	- UI Backend
	- Browser Engine
	- Rendering Engine
	- JavaScript Interpreter 
	- Network 
	- Data Persistence 

						        HTML Parsing

Browser Engine:

Developer writes Markup => Bytes => Chars => Tokens => Elements [Nodes] => DOM => Render => Layout => Paint 

FAQ's:
1. What is Tokenization?
A. It is the process of converting the chars into tokens. 
    Tokens are further converted into nodes and known as elements.

2. What is DOM?
A. DOM refers to "Document Object Model".
     It is a hierarchy of elements in page. [ parent - child nodes ]

3. What is Rendering?
A. It is the process of generating output. 


						HTML Elements

- HTML elements are classified into 5 groups

	1. Normal Elements
	2. Void Elements
	3. RC Data Elements
	4. Raw Text Elements
	5. Foreign Elements

Normal Element:
- A normal element returns presentation directly on callback.
- It doesn't require any additional attributes.
- They start the presentation but can't stop.
- Hence a normal element requires an end token.

Ex:
	<b> 	start token
	</b> end token

Void Element:
- The term void means no-return. 
- A void element will not return any presentation directly on callback.
- It requires additional attributes to return presentation.
- After returning they stop implicitly.
- They doesn't require end token. 

Ex:   <img>		// self ending


RC Type Element:
- Rich Content data elements.
- They are used only for plain text content. 
- They will not allow any formats for content. 
- You can't use any another element within the context of RC type.

Ex:   <textarea> </textarea>

Raw Text Element:
- It is an HTML element that presents without any token.
- Raw text is used for presentation. 

Ex:
	&#8377; 
	&copy;

Foreign Element:
- A foreign element can't display any presentation directly in browser.
- A browser engine can't understand and translate the element.
- It requires additional plugins to configure.
- If any element is presenting with plugin, then it is referred as "Foreign Element".

Ex:	SVG, Canvas, MATHML etc.


FAQ's: 
1. What are block level and inline elements?
A. Block level element will not allow any another element in same line. 
    Inline element allows other element side by side or in same line.

	<img>		inline element
	<h1>		block element

2. What are generic and non-generic elements?
A. Generic element have a predefined functionality.
     Non-generic element is a static element, requires functionality to configure explicitly.

	<form>		generic
	<p>			non generic 

3. What are semantic and non-semantic elements?
A. Semantic refers to a specific purpose and it is meant for only the given functionality.
     Non Semantic acts as universal, can be used for various purpose. 

	<img>		semantic
	<div>		non semantic 

21/03
=====
HTML Page Structure

HTML Parsing 
	Markup => Bytes => Chars => Tokens => Nodes [Elements] => DOM => Render => Layout => Paint

HTML Elements
	- Normal
	- Void
	- RC	
	- Raw Text
	- Foreign 
Block Level
Inline 
Generic
Non Generic 
Semantic 
Non Semantic 

					   HTML Page Structure

1. Every static page must have extension ".htm" or ".html"

			index.htm
			index.html

FAQ: What is difference between  "htm & html" ?
Ans:  Technically both are same. 
	  Various software tools publish HTML pages with extension .htm as per the 
	  standards of file naming in operating system. 

2. Every web page starts with "DOCUMENT DECLARATION".

	- Document Declaration is used to define HTML version.
	- It is new from HTML 5 version.
	- It is defined by using the following entity

			<!DOCTYPE html>

	- If declaration is not defined then it is considered as HTML 4.
		
			<!doctype html>
	
	Note: It is always recommended to use only lowercase for token.


3. Every web page have a document scope defined using <html>.

Syntax:
		<!DOCTYPE html>
		<html>

		</html>

	- Scope specifies the start and end of a document in browser. 
	- Browser can merge multiple documents into one body.
	- Hence a scope is mandatory to identify the contents of document.


4. Every document scope must define region and language for document content.

	  <!DOCTYPE html>
	  <html  lang="en-in">			en-in	India
								en-us	US
	  </html>						en-gb	Britan  etc..

	- lang is a language attribute.
	- "en-in" is value for language attribute. 

FAQ: What is an attribute?
Ans:  Attribute defines additional behavior for element. 


5. Every document scope comprises of 2 sections at high level.
	
		a) <head>
		b) <body>

Syntax:
		<!DOCTYPE html>
		<html lang="en-in">
			<head>

			</head>

			<body>

			</body>
		</html>

	- Content in body section loads always as a result of round-trip.
	- Content in head section is cached and loaded from cache. It saves round-trip.

FAQ: What is round-trip?
Ans:  In network application if requested content is loaded every time from server then
	 it is known as round-trip.

6. Head section typically comprises of elements like
		
		<title>
		<link>
		<meta>
		<base>
		<style>
		<script>
		etc..

Note: It is not mandatory to keep the elements in head section. You can change the
	  location according to requirements.

22/03
=====

1. Document Declaration 
	<!DOCTYPE html>

2. Document Scope
	<html lang="en-in">

3. Sections
	<head>
	<body>

					Elements in Head Section
1. Title
 - It can display page title in browser title bar.
 - It can be used in bookmarking. 
 - It is also used in SEO. [Search Engine Optimization]

Syntax:
	<head>
	   <title> Fitness | Home </title>
	</head>

FAQ: Can we set title in body section?
Ans:  Yes.

FAQ: When to set title in body?
Ans:  If title have to change dynamically then always render using round-trip.
	 Body section always renders on round-trip.

FAQ: What is the role of title in head section?
Ans:  It renders by saving round-trip.
	 If title is same across multiple requests then set in head section. 

2. Link
- It can link external documents with your page.
- It can also link various plugins to page.
- External documents include CSS style sheets, favicons etc.

Linking Favicon to page:
1. Open ms-paint on your device 
2. Go to File > Image Properties > set size 32 x 32 pixels 
3. Draw your icon 
4. Save into your project physical path  "D:\fitness-app\public\images"
5. Name it as  "favicon".
6. The default type is PNG. (favicon.png)
7. Open image location in VS Code
8. Rename the file to "favicon.ico".
9. Link to your HTML page

<head>
	<link rel="shortcut icon"  href="./public/images/favicon.ico">
</head>
	
	rel		: It refers to file type. [MIME type] 
	href		: It refers to file virtual path. 

Note: Never you the physical path. Server can access only virtual path.

		/	forward slash 		=> virtual path
		\	back slash		=> physical path

FAQ: What is MIME?
Ans : MIME is "Multipurpose Internet Mail Extension".
	 It is the file type used by browser to identify the file content type.


3. Meta
- Meta refers to "Meta Data".
- It is information about your page provided to browser and SEO.
- It is responsible for making the page SEO friendly and Responsive.

FAQ: What is Responsive?
Ans:  A response page can adjust its content according to the device. 
	 It can also change dynamically. 

Note: You download and install "Mobile Simulator" on your browser.

		Google => Chrome Mobile Simulator

Syntax:
	<head>
	   <meta  name="viewport"  content="width=device-width, initial-scale=1">
	</head>

Ex:
<!DOCTYPE html>
<html lang="en-in">
   <head>
       <title>Fitness | Home</title>
       <link href="./public/images/favicon.ico" rel="shortcut icon">
       <meta name="viewport" content="width=device-width, initial-scale=1" >
   </head>
   <body>
      Lorem ipsum dolor sit amet consectetur, adipisicing elit. Unde consequuntur vel obcaecati odio impedit nemo, mollitia veniam, ratione quas expedita aperiam consectetur voluptatum architecto reiciendis qui nobis possimus vero nulla.
      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore inventore iusto cupiditate in molestias quaerat consectetur, odit autem dolor, iste deserunt accusantium pariatur eum excepturi reiciendis ea, quae nisi vero!
      Lorem, ipsum dolor sit amet consectetur adipisicing elit. Perferendis omnis aspernatur iure est ullam maiores, ipsum hic eos dignissimos provident vitae asperiores modi quia commodi laboriosam assumenda dolores? Quos, ea.
   </body>
</html>

24/03
=====

HTML Page Structure
1. Document Declaration
2. Document Scope
3. Head Section Elements
	- Title
	- Link
	- Meta

	a) Responsive
	b) SEO friendly 

a) Viewport 
	<meta  name="viewport"  content="width=device-width, initial-scale=1">

b) Keywords
	- It refers to the words used by client to find your business.
	- Keywords are usually business related terms used in SEO. 

  Syntax:
	<meta name="keywords"  content="gym, fitness, weight loss ..">

c) Description
	- It is the summary of your website. 
	- It contains the offers and services provided by your business. 

  Syntax:
	<meta name="description"  content="Offers online fitness tips, provides courses for  weight loss">

d) Author
	- It is mostly used for blogs.
	- It contains information about the blog author. [owner]

Syntax:
	<meta name="author"  content="author_name">

e) HttpEquiv 
	- It defines how to handle request from client. 
	- It also defines when to load the content. 

Syntax:
	<meta http-equiv="refresh" content="5">

		5 = 5 seconds

 f) Charset
	- It is used to identify the language used for designing page.
	- Browser requires to allocate relative memory for translating the characters.
	- Characters used for various languages are standardized by UTF.
	  [Unicode Transformation Format]

			8 bit		= English
			16bit ]
			32bit ]	= for other languages with large character set
			64bit ]	   Chinese, Korean, Arabic etc.
Syntax:
	<meta charset="UTF-8">


Ex:
<!DOCTYPE html>
<html lang="en-in">
   <head>
       <title>Fitness | Home</title>
       <link href="./public/images/favicon.ico" rel="shortcut icon">
       <meta name="viewport" content="width=device-width, initial-scale=1" >
       <meta name="keywords" content="Gym, Fitness, Diet Plan, Weight Loss">
       <meta name="author" content="John">
       <meta http-equiv="refresh" content="5">
       <meta charset="utf-8">
   </head>
   
</html>

Summary:
1. title
2. link
3. meta

						 HTML Body Section

- Content in body section is loaded as a result of round-trip.
- HTML <body> element provides following attributes

1. bgcolor		It sets a background for page.
2. text			It sets color for text in page.

FAQ: How to define color in HTML?
Ans:  HTML colors can be configured using following techniques 

		a) Color Name
		b) Shade Name
		c) Hexadecimal Code

	Color Name		: It refers to exact name of color.
					
					  <body  bgcolor="green">
	
	Shade Name		: It refers to dark and light shades of color.

					   <body bgcolor="lightgreen">

	Hexadecimal		: It can be 3 chars or 6 chars hexadecimal with "#".

					  #RGB		> red, green, blue
					  #RRGGBB	

					  R, G, B		> 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f

		<body bgcolor="red">
		<body bgcolor="#f00">
		<body bgcolor="#ff0000">

Ex:
	<body bgcolor="red"  text="#fff">

3. background		: It sets a background image for page.
				  It can't control the image size or position.

Note: To control background image size, position and effects you need CSS 	 
	  background attributes.

CSS Background Styles:

	 background-size			: width & height in pixels or cover, contain
	 background-position		: X & Y in pixels or left, right, center, top, bottom.
	 background-repeat		: repeat, no-repeat, repeat-x, repeat-y
	 background-attachment 	: fixed, scroll 

Syntax:
	<style>
	    body
	    {
		 background-size: cover;
		 background-repeat: no-repeat;
		 background-attachment: scroll;
	    }
	</style>


Syntax:
	<body background="./public/images/banner.jpg">
	</body>

25/03
=====

HTML Body Section Attributes
1. bgcolor
2. text
3. background

How to set HTML colors?
	- Hexadecimal 
		#RGB
		#RRGGBB  => 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f
How to change background image style?
	background-size
	background-position
	background-repeat
	background-attachment 

themes.getbootstrap.com
colorlib.com

4. align	: It aligns the body content left, center, right or justify.

Syntax:
		<body  align="left | center | right | justify">
		</body>

5. leftmargin			]
6. rightmargin			]  sets space between content and page border.
7. topmargin			]
8. bottommargin		]

Syntax:
  <body leftmargin="100"  rightmarign="100" topmargin="50" bottommargin="50">
  </body>

9. alink			: It sets color for active links in document.
10. vlink			: It sets color for visited links in document.

Syntax:
	<body  alink="red" vlink="green">

		<a href="https://www.amazon.in"> Amazon </a>

	</body>

Ex:
<!DOCTYPE html>
<html lang="en-in">
   <head>
       <title>Fitness | Home</title>
       <link href="./public/images/favicon.ico" rel="shortcut icon">
       <meta name="viewport" content="width=device-width, initial-scale=1" >
       <style>
          
       </style>
   </head>
   <body vlink="green" alink="red">
       <a href="https://www.amazon.in">Amazon India</a> |
       <a href="https://www.amazon.com">Amazon US</a> |
       <a href="https://ebay.in">Ebay Shopping</a>
   </body>
</html>


Summary:
- bgcolor
- text
- background
- align
- margins [left, right, top, bottom]
- alink
- vlink

					   HTML Body Layout Design

- HTML 4 uses table for designing body layout.
- Table leads to a situation known as "Kiss-of-Death", where it is not sure about the order of loading content. 
- Content kept is table is not much SEO friendly. 
- HTML 5 introduced new semantic and non-semantic elements to design body layout more SEO friendly. 
- HTML 5 non-semantic elements for layout design are:
		
		a) <div>
		b) <span>

- HTML 5 semantic elements for layout design are:

		a) <header>
		b) <footer>
		c) <section>
		d) <main>
		e) <nav>
		f) <article>
		g) <aside>
		h) <dialog>
		i) <address>
		j) <figure>
		k) <figcaption>

CSS Border Styles:

		border	: It sets border size, style and color.

				  {
				    border: 1px  solid | double | dotted  red;
				  }

CSS Margin & Padding:

		margin	: It is the space between border and page. [content outside border]
		padding	: It is the space between border and content inside.

		margin-left
		margin-right
		margin-top
		margin-bottom
		margin		 [short hand for all directions]

		padding-left
		padding-right
		padding-top
		padding-bottom
		padding		[short hand for all directions]

Syntax:
	 <style>
		div {
			border: 1px solid black;
			margin: 10px;
			padding: 10px;
		 }
	</style>

CSS Font Styles:

		font-weight 	: It sets bold
		font-style		: It sets italic 
		font-size		: It sets text size
		color		: It sets text color
		font-family 	: It sets a font face [Arial, Times New Roman, ...]

Syntax:
	   span {
		 font-weight: bold;
		 font-style: italic;
		 color: red;
		 font-size: 20px;
		 font-family: Arial;
	    }


Ex:
Index.html

<!DOCTYPE html>
<html lang="en-in">
   <head>
       <title>Fitness | Home</title>
       <link href="./public/images/favicon.ico" rel="shortcut icon">
       <meta name="viewport" content="width=device-width, initial-scale=1" >
       <style>
          div {
             border: 1px solid black;
             margin:10px;
             padding: 10px;
             font-family: Arial;
          }
          span {
             color: red;
             font-size: 23px;
             font-weight: bold;
             font-style: italic;
             font-family: Script MT;
          }
       </style>
   </head>
   <body>
       <div>
           Web Technologies
           <div>
               Front End
               <div>
                   HTML
                   <p>It is a <span>markup</span> language.</p>
                   <p>It is used for presentation.</p>
               </div>
               <div>
                  CSS
                  <p>It is used for styling. </p>
               </div>
           </div>
           <div>
              Back End
              <div>
                 Node JS
                 <p>It is used for creating web apps.</p>
              </div>
              <div>
                 MongoDB
                 <p>It is a database.</p>
              </div>
           </div>
       </div>
   </body>
</html>

26/03
=====

Shopping Template
themes.getbootstrap.com

https://themes.getbootstrap.com/preview/?theme_id=37702

Setup Icons for your project:
- Icons are provided by 3rd party libraries like
	a) Fontawesome 
	b) Bootstrap Icons 
- Implement bootstrap icons for project
	icons.getbootstrap.com

1. Open terminal from your project

2. Run the following command

	> npm  install  bootstrap-icons  --save

3. It will add a new folder into project by name  "node_modules". 

4. All library files that you install for project are kept in node_modules.

5. Bootstrap Icons are defined using a CSS file copied into node_modules.

6. Link the bootstrap icons CSS file to your web page.

			     	node_modules
				|
				|_bootstrap-icons
				|  |
				|  |_font
				|     |
				|     |_bootstrap-icons.css

<head>
<link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>

7. Every icon in CSS file is configured with a class name. You have to access and apply icons by using class attribute.

    <span  class="bi bi-house"> </span>

 	bi bi-heart
	bi bi-gift
	bi bi-cart4	

    - get list of icons & classes from  "icons.getbootstrap.com"

Setup Icons using CDN [Content Delivery Network]:

1. Visit "icons.getbootstrap.com"

2. Go to CDN library location [ bottom of page ]

3. Copy the CDN CSS link and paste in your page head section.

<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/ font /bootstrap-icons.min.css">
</head>

4. You can apply icon classes to elements

	<div class="bi bi-facebook"> </div>
	<span class="bi bi-twitter"> </span>

					  Semantics for body layout design 
					  ---------------------------------------------

1. <header>
 - It defines the content to display at top margin of page.
 - Typically header comprises of brand name, logo, navbar, search bar, shortcuts etc.

Syntax:
	<header>
		... your content...
	</header>


2. <aside>
- It is a container that comprises of content, which can move user to any sponsored or networking sites from the current website. 
- It navigates aside. [outside current website]

Syntax:
	<aside>
	    ... ads.. social networking links ..
	</aside>

CSS Display Flex:
	
		display:flex		It can arrange elements in a container flexible row or
						column wise. 

		flex-direction		It can change direction to row or column.

		justify-content		It can arrange elements in container
							a) baseline [left]
							b) center 
							c) end  [right]
							d) space-between
							e) space-around
							f) space-evenly
Syntax:
	  container {
		display:flex;
		flex-direction: row;
		justify-content: space-between;
	  }


Ex: Shopper-Template

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopper</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .header-row-1 {
            background-color: #e6e4e4;
            padding: 15px;
            font-family: Arial;
            font-size: 14px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .header-row-1  span {
            padding-left: 10px;
            padding-right: 10px;
        }
        .header-row-2 {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 40px;
            font-size: 20px;
            font-family: Arial;
        }
        .brand-title {
            font-size: 30px;
            font-weight: bold;
        }
        nav span {
            padding-left: 15px;
            padding-right: 15px;
            font-size: 18px;
        }
        .short-cuts span {
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
</head>
<body>
    <header>
        <div class="header-row-1">
            <div>
                <span class="bi bi-truck"> FREE SHIPPING WORLDWIDE </span> 
                <span>United States <span class="bi bi-chevron-down"></span> </span>
                <span>USD <span class="bi bi-chevron-down"></span> </span>
                <span>English <span class="bi bi-chevron-down"></span> </span>
            </div>
            <div>
                <span>Shipping</span>
                <span>FAQ</span>
                <span>Contact</span>
            </div>
            <div>
               <aside>
                <span class="bi bi-facebook"></span>
                <span class="bi bi-twitter"></span>
                <span class="bi bi-instagram"></span>
                <span class="bi bi-youtube"></span>
               </aside>
            </div>
        </div>
        <div class="header-row-2">
            <div>
                <span class="brand-title">Shopper.</span>
            </div>
            <div>
                <nav>
                    <span>Home</span>
                    <span>Catalog</span>
                    <span>Shop</span>
                    <span>Blog</span>
                    <span>Pages</span>
                    <span>Docs</span>
                </nav>
            </div>
            <div class="short-cuts">
                <span class="bi bi-search"></span>
                <span class="bi bi-person"></span>
                <span class="bi bi-heart"></span>
                <span class="bi bi-cart4"></span>
            </div>
        </div>
    </header>
</body>
</html>

27/03
=====
Bootstrap Icons
Body Section Semantics for Layout Design
<header>
<nav>
<aside>

4. <section>
 - It defines the area between header and footer.
 - Section comprises of all body contents.

5. <article>
- It is used to publish latest trends, offers, news, announcements etc.
- You can have multiple articles in a page.
- Article must contain information about current context.

Syntax:
      <header> </header>
      <section>
        <article> </article>
      </section>
     <footer> </footer>


6. <Main>
 - In computer programming main is considered as "Entry Point".
 - Every program start execution from entry point.
 - In a web page design we can have multiple entry point.
 - It defines the area from where user can start using our website.

Syntax:
    <main>
        ... your content ...
    </main>

- You can configure entry point in header or section area.

CSS Display Grid:
- It allows to split the content into rows and columns.
- It can have a fixed set of rows and columns.
- Every page can split into maximum 12 columns. [fractions]

Syntax:
     container {
         display: grid;
         grid-template-columns: 6fr 6fr;
     }

CSS Background Image:

    background-image: url("../path/name.jpg");
    background-size
    background-position
    background-repeat
    background-attachment

CSS Text Shadow & Box Shadow

    text-shadow : horizontal_px  vertical_px  blur_px  color;

    {
      text-shadow: 5px  2px  1px  black
    }


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopper</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        .header-row-1 {
            background-color: #e6e4e4;
            padding: 15px;
            font-family: Arial;
            font-size: 14px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .header-row-1  span {
            padding-left: 10px;
            padding-right: 10px;
        }
        .header-row-2 {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 40px;
            font-size: 20px;
            font-family: Arial;
        }
        .brand-title {
            font-size: 30px;
            font-weight: bold;
        }
        nav span {
            padding-left: 15px;
            padding-right: 15px;
            font-size: 18px;
        }
        .short-cuts span {
            padding-left: 5px;
            padding-right: 5px;
        }
        article {
            background-color: black;
            color:white;
            padding: 15px;
            text-align: center;
            font-family: Arial;
            font-size: 16px;
        }
        .bi-lightning-fill {
            color:gold;
        }
        main {
            height: 450px;
            display: grid;
            grid-template-columns: 4fr 4fr 4fr;
            margin-top: 10px;
        }
        .women-fashion {
            background-image: url("./images/women-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .men-fashion {
            background-image: url("./images/men-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .kids-fashion {
            background-image: url("./images/kids-fashion.jpg");
            background-size: cover;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            opacity: 0.8;
        }
        .main-title {
            font-family: Arial;
            font-size: 50px;
            font-weight: bold;
            color:white;
            text-shadow: 2px 2px 2px black;
        }
        .btn-shop {
            background-color: white;
            padding: 10px;
            width: 140px;
            font-family: Arial;
            text-align: center;
            box-shadow: 2px 2px 2px black;
            border-radius: 5px;
        }
        .women-fashion:hover, .men-fashion:hover, .kids-fashion:hover {
            opacity: 1;
            cursor: grab;
        }
        .services {
            display: grid;
            grid-template-columns: 3fr 3fr 3fr 3fr;
            padding: 20px;
            margin-top: 20px;
        }
        .services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
            color:red;
        }
    </style>
</head>
<body>
    <header>
        <div class="header-row-1">
            <div>
                <span class="bi bi-truck"> FREE SHIPPING WORLDWIDE </span>
                <span>United States <span class="bi bi-chevron-down"></span> </span>
                <span>USD <span class="bi bi-chevron-down"></span> </span>
                <span>English <span class="bi bi-chevron-down"></span> </span>
            </div>
            <div>
                <span>Shipping</span>
                <span>FAQ</span>
                <span>Contact</span>
            </div>
            <div>
               <aside>
                <span class="bi bi-facebook"></span>
                <span class="bi bi-twitter"></span>
                <span class="bi bi-instagram"></span>
                <span class="bi bi-youtube"></span>
               </aside>
            </div>
        </div>
        <div class="header-row-2">
            <div>
                <span class="brand-title">Shopper.</span>
            </div>
            <div>
                <nav>
                    <span>Home</span>
                    <span>Catalog</span>
                    <span>Shop</span>
                    <span>Blog</span>
                    <span>Pages</span>
                    <span>Docs</span>
                </nav>
            </div>
            <div class="short-cuts">
                <span class="bi bi-search"></span>
                <span class="bi bi-person"></span>
                <span class="bi bi-heart"></span>
                <span class="bi bi-cart4"></span>
            </div>
        </div>
    </header>
    <section>
        <article>
            <span class="bi bi-lightning-fill"></span>
            <span>HAPPY HOLIDAY DEALS ON EVERYTHING</span>
            <span class="bi bi-lightning-fill"></span>
        </article>
        <main>
            <div class="women-fashion">
                <div class="main-title">Women</div>
                <div class="btn-shop">
                    Shop Women <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="men-fashion">
                <div class="main-title">Men</div>
                <div class="btn-shop">
                    Shop Men <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="kids-fashion">
                <div class="main-title">Kids</div>
                <div class="btn-shop">
                    Shop Kids <span class="bi bi-arrow-right"></span>
                </div>
            </div>
        </main>
        <div class="services">
            <div>
                <span class="bi bi-truck">  </span> FREE SHIPPING
            </div>
            <div>
                <span class="bi bi-arrow-left-right">  </span> FREE RETURNS
            </div>
            <div>
                <span class="bi bi-lock">  </span> SECURE SHOPPING
            </div>
            <div>
                <span class="bi bi-tag">  </span> OVER 10,000 STYLES
            </div>
        </div>
    </section>
</body>
</html>

28/03
=====
Ex: Bootstrap Website Header
    getbootstrap.com

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            padding: 10px;
            font-family: Arial;
            font-size: 16px;
            background-color: blueviolet;
            color:white;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
        }
        header span {
            padding-left: 5px;
            padding-right: 5px;
        }
        .bi-bootstrap-fill {
            font-size: 22px;
        }
        .search-bar {
            background-color: #620c9c;
            padding: 10px;
            width: 300px;
            border-radius: 5px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        .ctrl-button {
            background-color: #1a0329;
            border-radius: 2px;
            padding: 2px;
        }
        .ctrl {
            font-size: 14px;
        }
        nav span {
            font-size: 18px;
        }
    </style>
</head>
<body>
    <header>
        <div>
            <nav>
                <span class="bi bi-bootstrap-fill"></span>
                <span>Docs</span>
                <span>Examples</span>
                <span>Icons</span>
                <span>Themes</span>
                <span>Blog</span>
            </nav>
        </div>
        <div>
            <div class="search-bar">
                <span class="bi bi-search"> Search </span>
                <span class="ctrl-button"> <span class="ctrl">Ctrl</span> K </span>
            </div>
        </div>
        <div>
            <span class="bi bi-github"></span>
            <span class="bi bi-twitter"></span>
            <span class="bi bi-opencollective"></span>
            <span> | </span>
            <span> v5.3 <span class="bi bi-caret-down-fill"></span> </span>
            <span> | </span>
            <span class="bi bi-sun-fill"> <span class="bi bi-caret-down-fill"></span> </span>
        </div>
    </header>
</body>
</html>

CSS Border Radius

    border-radius                : all directions
    border-top-left-radius
    border-top-right-radius
    border-bottom-left-radius
    border-bottom-right-radius

Circle:
    {
      width : 100px;
      height: 100px
      border-radius: 100px;
    }

CSS Positions:

    relative        : It is a position always given for parent element.
    absolute        : It is a position given for child element. To keep with regard to
                  parent content.

    top            ]
    left            ]
    right            ]    for changing element position from specified direction.
    bottom        ]    they are defined for absolute element.

Syntax:
    parent {
        position: relative;
     }
       child {
       position: absolute;
       left : 0px;
       right: 0px;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
       .btn {
          width: 20px;
          padding: 5px;
          position: relative;
       }
       .badge {
          font-size: 10px;
          font-family: Arial;
          width: 10px;
          height: 10px;
          border-radius: 10px;
          background-color: red;
          color:white;
          text-align: center;
          display: inline-block;
          padding: 2px;
          position: absolute;
          left: 14px;
          top: -2px;
       }
    </style>
</head>
<body>
     <div class="btn bi bi-bell-fill">
        <span class="badge">2</span>
     </div>
</body>
</html>

29/03
=====
- header
- nav
- aside
- article
- section
- main

CSS Colors:
1. Color name
       
        {
          color : green;
        }

2. Shade Name

        {
          color: lightgreen;
        }

3. Hexadecimal Code  [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f ]

        {
           color : #0f0  (or)  #00ff00;
        }


4. rgb()
- It uses red, green and blue value range from 0 to 255.

        {
          color: rgb(redValue, greenValue, blueValue);
        }

        div {
           color: rgb(0,255,0);
        }

5. rgba()
 - Red, Green, Blue and Alpha.
 - Alpha sets transparent color from 0 to 1.

Syntax:
    {
     color: rgba(0,255,0,0.6);
    }

6. hsl()
- It uses Hue, Saturation and Lightness.
- Hue is an angle with red, green and blue colors
    0 to 120 deg        => red
    121 to 240 deg    => green
    241 to 360 deg    => blue
   
- Saturation is gray shade from 1 to 100%
- Lightness is brightness 1 to 100%.

Syntax:
    {
      color: hsl(10deg, 50%, 50%);
    }

7. hsla()
- Hue, Saturation, Lightness and Alpha.
- Alpha is between 0 to 1.

Syntax:
     {
      color: hsla(10deg, 50%, 50%, 0.5);
    }

8. linear gradient & radial gradient
- It allows to setup multiple colors.
- You can apply gradient only with "background-image" attribute.

Syntax:
    {
     background-image: linear-gradient(20deg, red, yellow, green);
    }

Syntax:
    {
     background-image: linear-gradient(to top right, red 50%, green, yellow);
    }

Syntax:
    {
    background-image: radial-gradient( red, yellow);
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      body {
         height: 100vh;
         background-image: radial-gradient(rgb(241, 27, 27) 50%, yellow, #00ff00);
      }
     
   </style>
</head>
<body>
   
</body>
</html>

Ex: Netflix

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Netflix</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        body {
            height: 100vh;
            background-image: linear-gradient(rgb(0, 0, 0) 50%, rgb(222, 194, 194), rgb(0, 0, 0));
        }
        section {
            background-image: url("./images/netflix-banner.jpg");
            background-size: cover;
            margin: 20px;
            height: 450px;
            border-radius: 40px;
            border:1px solid white;
        }
        .shade {
            background-color: rgba(0,0,0,0.6);
            height: 100%;
            border-radius: 40px;
            text-align: center;
            color:white;
        }
        header {
            padding: 20px;
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            font-family: Arial;
        }
        .brand-title {
            font-size: 50px;
            color:red;
            font-weight: bold;
            text-shadow: 1px 1px 2px white;
        }
        .language {
            background-color: white;
            padding: 10px;
            border-radius: 10px;
        }
        .signin {
            background-color: white;
            padding: 10px;
            border-radius: 10px;
            margin-left: 10px;
            display: inline-block;
            width: 80px;
            text-align: center;
        }
        .section-title {
            font-size: 60px;
            font-family: Arial;
            font-weight: bold;
            padding-top: 50px;
        }
        .section-subtitle {
            font-size: 20px;
            font-family: Arial;
            padding-top: 20px;
        }
        main {
            font-family: Arial;
        }
        .main-title{
            padding-top: 20px;
            padding-bottom: 40px;
        }
        .email {
            background-color: rgba(126, 125, 125, 0.744);
            padding: 20px;
            display: inline-block;
            width: 300px;
            text-align: left;
            border:1px solid white;
            border-radius: 30px;
            font-size: 20px;
        }
        .btn-start {
            background-color: red;
            padding: 20px;
            display: inline-block;
            width: 170px;
            border-radius: 30px;
            font-size: 20px;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="brand-title">NETFLIX</span>
        </div>
        <div>
            <span class="language"><span class="bi bi-translate"> Language <span class="bi bi-caret-down-fill"></span> </span></span>
            <span class="signin">Sign In</span>
        </div>
    </header>
    <section>
      <div class="shade">
          <div class="section-title">
            Unlimited movies, TV<br> shows and more
          </div>
          <div class="section-subtitle">
            Starts at ₹149. Cancel at any time.
          </div>
          <main>
             <div class="main-title">
                Ready to watch? Enter your email to create or restart your membership.
            </div>
            <div>
                <span class="email"> Email Address</span>
                <span class="btn-start"> Get Started <span class="bi bi-chevron-right"></span> </span>
            </div>
          </main>
      </div>
    </section>
</body>
</html>1/05
====

CSS Display
- none
- inline
- block
- inline-block

5. flex        :  It is used for a container to keep all its elements flexible by row or
               column. Flex have various supporting attributes
               
                a) flex-direction
                b) flex-wrap
                c) justify-content
                d) align-items

             - Flex direction can be row, row-reverse, column, & column-reverse
             - Justify Content can be space-between, around, evenly & center.
             - Align Items depends on direction
                a) row    : baseline [top], center, end [bottom]
                b) column: baseline [left], center, end [right]

             - Flex wrap allows to wrap elements into multiple rows and columns.
               You can add wrapping or remove to display compressed.


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      nav {
         border: 1px solid black;
         padding: 20px;
         height: 400px;
         display: flex;
         flex-direction: column;
         flex-wrap: wrap;
         align-items: center;
         justify-content:space-between;
      }
      nav div {
         width: 100px;
         border:1px solid gray;
         padding: 5px;
         text-align: center;
      }
   </style>
</head>
<body>
    <nav>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>Home</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
       <div>About</div>
       <div>Contact</div>
       <div>Shop</div>
       <div>Blog</div>
    </nav>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
   <style>
      ul {
         list-style: none;
         display: flex;
         flex-direction: row;
      }
      li {
         border:1px solid black;
         padding: 10px;
         width: 100px;
         display: flex;
         flex-direction: row;
         justify-content: space-around;
      }
   </style>
   <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
    <ul>
      <li><span class="bi bi-house"></span> Home</li>
      <li><span class="bi bi-globe"></span> About</li>
      <li><span class="bi bi-envelope"></span> Contact</li>
      <li><span class="bi bi-webcam"></span> Blog</li>
    </ul>
</body>
</html>

6. Grid
 - It is used for creating a responsive layout.
 - Layout comprises data arranged in rows and columns.
 - Grid can dynamically control the data in rows and columns.
 - Grid attributes are
   
        a) grid-template-columns
        b) grid-row
        c) grid-column
        d) grid-gap
       
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        header, nav, main, aside, footer {
            border:1px solid black;
            padding: 10px;
            margin: 5px;
        }
        main {
            height: 400px;
        }
        body {
            display: grid;
            grid-template-columns: 2fr 8fr 2fr;
        }
        header {
            grid-row: 1;
            grid-column: 1/4;
            background-color: yellow;
        }
        nav {
            grid-row: 2;
            grid-column: 1;
            background-color: lightgreen;
        }
        main {
            grid-row: 2;
            grid-column: 2;
        }
        aside {
            grid-row: 2;
            grid-column: 3;
            background-color: lightcyan;
        }
        footer {
            grid-row: 3;
            grid-column: 1/4;
        }
    </style>
</head>
<body>
    <header>
        Header
    </header>
    <nav>Nav</nav>
    <main>Main</main>
    <aside>Aside</aside>
    <footer>Footer</footer>
</body>
</html>

Note: You have to use "media queries" to know the screen or device size, so that
      content can be adjusted according to device.

Syntax:
        @media  type  (condition)
        {
        }

        type        : It refers to screen, print
        condition    : It uses min-width, max-width, orientation.
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        header, nav, main, aside, footer {
            border:1px solid black;
            padding: 10px;
            margin: 5px;
        }
        main {
            height: 400px;
        }

        @media screen and (orientation:landscape){
            body {
            display: grid;
            grid-template-columns: 2fr 8fr 2fr;
            }
            header {
                grid-row: 1;
                grid-column: 1/4;
                background-color: yellow;
            }
            nav {
                grid-row: 2;
                grid-column: 1;
                background-color: lightgreen;
            }
            main {
                grid-row: 2;
                grid-column: 2;
            }
            aside {
                grid-row: 2;
                grid-column: 3;
                background-color: lightcyan;
            }
            footer {
                grid-row: 3;
                grid-column: 1/4;
            }
        }

        @media screen and (orientation:portrait) {
            body {
                display: grid;
                grid-template-columns: 12fr;
            }
            header {
                grid-row: 1;
                background-color: yellow;
            }
            nav {
                grid-row: 2;
                background-color: lightgreen;
            }
            main {
                grid-row: 3;
            }
            aside {
                grid-row: 4;
                background-color: lightcyan;
            }
            footer{
                grid-row: 5;
            }
        }

       
    </style>
</head>
<body>
    <header>
        Header
    </header>
    <nav>Nav</nav>
    <main>Main</main>
    <aside>Aside</aside>
    <footer>Footer</footer>
</body>
</html>
 
Ex: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            font-size: 20px;
            font-family: Arial;
            padding: 20px;
        }
        .brand-title {
            font-size: 24px;
            font-weight: bold;
        }
        @media screen and (orientation:landscape){
            header {
                display: flex;
                flex-direction: row;
                justify-content: space-between;
            }
            nav span {
                margin-right: 30px;
            }
            .btn {
                display: none;
            }
            .women-fashion {
                background-image: url("../public/images/women-fashion.jpg");
                background-size: cover;
                width: 300px;
                height: 300px;
            }
        }
        @media screen and (orientation:portrait) {
            nav {
                display: none;
            }
            .btn {
                display: inline;
                font-size: 24px;
            }
            header {
                display: flex;
                justify-content: space-between;
            }
            .women-fashion {
                background-image: url("../public/images/girl-window.jpg");
                background-size: cover;
                width: 100%;
                height: 300px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="brand-title">Shopper.</span>
        </div>
        <nav>
            <span>Home</span>
            <span>Shop</span>
            <span>Pages</span>
            <span>Blog</span>
            <span>Docs</span>
        </nav>
        <div class="btn">
            <span class="bi bi-justify"></span>
        </div>
    </header>
    <main>
        <div class="women-fashion">

        </div>
    </main>
</body>
</html>

2/05
===

Ex: Responsive Shopper Template

1. src/styles/shopper-template.css

.header-row-1 {
    background-color: #e6e4e4;
    padding: 15px;
    font-family: Arial;
    font-size: 14px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}
.header-row-1  span {
    padding-left: 10px;
    padding-right: 10px;
}
.header-row-2 {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    font-size: 20px;
    font-family: Arial;
}
.brand-title {
    font-size: 30px;
    font-weight: bold;
}
nav span {
    padding-left: 15px;
    padding-right: 15px;
    font-size: 18px;
}
.short-cuts span {
    padding-left: 5px;
    padding-right: 5px;
}
.bi-justify {
    display: none;
}

article {
    background-color: black;
    color:white;
    padding: 15px;
    text-align: center;
    font-family: Arial;
    font-size: 16px;
}
.bi-lightning-fill {
    color:gold;
}

main {
    height: 450px;
    display: grid;
    grid-template-columns: 4fr 4fr 4fr;
    margin-top: 10px;
}
.women-fashion {
    background-image: url("../../public/images/women-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.men-fashion {
    background-image: url("../../public/images/men-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.kids-fashion {
    background-image: url("../../public/images/kids-fashion.jpg");
    background-size: cover;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    opacity: 0.8;
}
.main-title {
    font-family: Arial;
    font-size: 50px;
    font-weight: bold;
    color:white;
    text-shadow: 2px 2px 2px black;
}
.btn-shop {
    background-color: white;
    padding: 10px;
    width: 140px;
    font-family: Arial;
    text-align: center;
    box-shadow: 2px 2px 2px black;
    border-radius: 5px;
}
.women-fashion:hover, .men-fashion:hover, .kids-fashion:hover {
    opacity: 1;
    cursor: grab;
}
.services {
    display: grid;
    grid-template-columns: 3fr 3fr 3fr 3fr;
    padding: 20px;
    margin-top: 20px;
}
.services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
    color:red;
}

footer {
    background-color: black;
    color:white;
    font-family: Arial;
    padding: 10px;
}
.footer-row-1 {
    padding-top: 40px;
    padding-bottom: 40px;
    text-align: center;
}
.footer-title {
    font-size: 30px;
    font-weight: bold;
    padding-bottom: 30px;
}
.email {
    background-color: rgba(135, 131, 131, 0.653);
    border:1px solid gray;
    padding: 20px;
    display: inline-block;
    width: 300px;
    text-align: left;
}
.subscribe {
    background-color: rgb(123, 122, 122);
    padding: 20px;
    width: 150px;
    display: inline-block;
    color:white;
    margin-left: 10px;
}
.footer-row-2 {
    margin-top: 30px;
    display: grid;
    grid-template-columns: 2.4fr 2.4fr 2.4fr 2.4fr 2.4fr;
    padding: 20px;
}
.service-title {
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    display: block;
    padding-bottom: 20px;
}
.service-title~span {
    display: block;
    padding-bottom: 10px;
}
address span {
    display: block;
    padding-bottom: 10px;
}
aside span {
    padding-right: 5px;
}
.footer-brand-title {
    font-size: 30px;
    font-weight: bold;
    padding-bottom: 20px;
    display: block;
}

@media screen and (orientation:portrait){
    .header-aside, .header-nav{
        display: none;
    }
    .header-brand span:nth-of-type(1n+2)  {
        display: none;
    }
    .header-row-2 nav, .short-cuts {
        display: none;
    }
    .bi-justify {
        display: inline;
        border:none;
        font-size: 20px;
    }
    article {
        font-size: 14px;
    }
    .kids-fashion, .men-fashion {
        display: none;
    }
    main {
        display: grid;
        grid-template-columns: 12fr;
    }
    .services {
        display: grid;
        grid-template-columns: 12fr;
        padding: 20px;
        margin-top: 20px;
    }
    .services .bi-truck, .bi-tag, .bi-lock, .bi-arrow-left-right {
        color:red;
    }
    .services div {
        padding: 20px;
        box-shadow: 1px 1px 2px gray;
        margin-bottom: 10px;
    }
}


2. shopper-template.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopper</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../src/styles/shopper-template.css">
</head>
<body>
    <header>
        <div class="header-row-1">
            <div class="header-brand">
                <span class="bi bi-truck"> FREE SHIPPING WORLDWIDE </span>
                <span>United States <span class="bi bi-chevron-down"></span> </span>
                <span>USD <span class="bi bi-chevron-down"></span> </span>
                <span>English <span class="bi bi-chevron-down"></span> </span>
            </div>
            <div class="header-nav">
                <span>Shipping</span>
                <span>FAQ</span>
                <span>Contact</span>
            </div>
            <div class="header-aside">
               <aside>
                <span class="bi bi-facebook"></span>
                <span class="bi bi-twitter"></span>
                <span class="bi bi-instagram"></span>
                <span class="bi bi-youtube"></span>
               </aside>
            </div>
           
                <button class="bi bi-justify"></button>
           
        </div>
        <div class="header-row-2">
            <div>
                <span class="brand-title">Shopper.</span>
            </div>
           
                <nav>
                    <span>Home</span>
                    <span>Catalog</span>
                    <span>Shop</span>
                    <span>Blog</span>
                    <span>Pages</span>
                    <span>Docs</span>
                </nav>
           
            <div class="short-cuts">
                <span class="bi bi-search"></span>
                <span class="bi bi-person"></span>
                <span class="bi bi-heart"></span>
                <span class="bi bi-cart4"></span>
            </div>
           
                <button class="bi bi-justify"></button>
           
        </div>
    </header>
    <section>
        <article>
            <span class="bi bi-lightning-fill"></span>
            <span>HAPPY HOLIDAY DEALS ON EVERYTHING</span>
            <span class="bi bi-lightning-fill"></span>
        </article>
        <main>
            <div class="women-fashion">
                <div class="main-title">Women</div>
                <div class="btn-shop">
                    Shop Women <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="men-fashion">
                <div class="main-title">Men</div>
                <div class="btn-shop">
                    Shop Men <span class="bi bi-arrow-right"></span>
                </div>
            </div>
            <div class="kids-fashion">
                <div class="main-title">Kids</div>
                <div class="btn-shop">
                    Shop Kids <span class="bi bi-arrow-right"></span>
                </div>
            </div>
        </main>
        <div class="services">
            <div>
                <span class="bi bi-truck">  </span> FREE SHIPPING
            </div>
            <div>
                <span class="bi bi-arrow-left-right">  </span> FREE RETURNS
            </div>
            <div>
                <span class="bi bi-lock">  </span> SECURE SHOPPING
            </div>
            <div>
                <span class="bi bi-tag">  </span> OVER 10,000 STYLES
            </div>
        </div>
    </section>
    <footer>
        <div class="footer-row-1">
                <div class="footer-title">Want style Ideas and Treats?</div>
                <div>
                    <span class="email">Enter Email*</span>
                    <span class="subscribe">Subscribe</span>
                </div>
        </div>
        <div class="footer-row-2">
            <div>
                <span class="footer-brand-title">Shopper.</span>
                <aside>
                    <span class="bi bi-facebook"></span>
                    <span class="bi bi-twitter"></span>
                    <span class="bi bi-instagram"></span>
                    <span class="bi bi-youtube"></span>
                    <span class="bi bi-linkedin"></span>
                </aside>
            </div>
            <div>
                <span class="service-title">Support</span>
                <span>Contact Us</span>
                <span>FAQs</span>
                <span>Size Guide</span>
                <span>Shipping & Returns</span>
            </div>
            <div>
                <span class="service-title">Shop</span>
                <span>Men's Shopping</span>
                <span>Women's Shopping</span>
                <span>Kids' Shopping</span>
                <span>Discounts</span>
            </div>
            <div>
                <span class="service-title">Company</span>
                <span>Our Story</span>
                <span>Careers</span>
                <span>Terms & Conditions</span>
                <span>Privacy & Cookie policy</span>
            </div>
            <div>
                <span class="service-title">CONTACT</span>
                <address>
                    <span>1-202-555-0105</span>
                    <span>1-202-555-0106</span>
                    <span>help@shopper.com</span>
                </address>
            </div>
        </div>
    </footer>
</body>
</html>

                         CSS  Backgrounds
background-color
background-image
background-size
background-position
background-attachment
background-repeat
               
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            background-image: url("../public/images/a11.jpg"), url("../public/images/a10.jpg");
            background-repeat: no-repeat, repeat;
            background-size: 600px 300px, 200px 100px;
            background-position: center center;
            background-attachment: fixed, scroll;
        }
    </style>
</head>
<body>
    <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Ea suscipit enim deserunt quia vel officia, ratione repudiandae aperiam magnam error sit nam consequuntur voluptas earum pariatur alias amet culpa optio! Lorem ipsum dolor sit amet consectetur, adipisicing elit. Iste iure laudantium magnam autem cumque, unde sequi, dolorem quia, quibusdam voluptates et atque? Atque amet iste quisquam tempore sapiente, dolorem quasi. Lorem ipsum dolor sit amet consectetur adipisicing elit. Officia suscipit, dolor laboriosam temporibus, magnam totam cum ullam eos labore sunt odio, voluptate est numquam excepturi accusantium tempore sint perspiciatis veniam.</p>

</body>
</html>

                                 CSS Float
 a) float    : start, end [left, right]
 b) clear    : left, right, both

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        header {
            font-family: Arial;
            padding: 20px;
            display: flex;
            justify-content: space-around;
            font-size: 20px;
            align-items: center;
        }
        .brand-title {
            font-size: 24px;
            font-weight: bold;
        }
        nav span {
            padding: 0px 20px 0px 20px;
        }
        .btn-buy {
            background-color: blue;
            color:white;
            border:none;
            padding: 15px;
            font-size: 16px;
            border-radius: 10px;
        }
        .img-banner {
            width: 50%;
            float: right;
        }
        main {
            padding-top: 100px;
            padding-left: 100px;
        }
        .title {
            font-size: 50px;
            font-family: Arial;
            padding-bottom: 20px;
        }
        .sub-title {
            font-size: 22px;
            font-family: Arial;
            padding-bottom: 40px;
        }
        .main-title {
            color:blue;
        }
        .btn-doc, .btn-page {
            padding: 20px;
            width: 200px;
            font-size: 20px;
            border:none;
        }
        .btn-page {
            background-color: blue;
            color:white;
        }
        .btn-doc {
            background-color: white;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <header>
        <div>
            <span class="brand-title">Landkit.</span>
        </div>
        <nav>
            <span>Landings</span>
            <span>Pages</span>
            <span>Account</span>
            <span>Documentation</span>
        </nav>
        <button class="btn-buy"> Buy now</button>
    </header>
    <section>
        <img src="../public/images/landkit-banner.jpg" class="img-banner">
        <main>
            <div class="title">
                Welcome to <span class="main-title">Landkit.</span>
                Develop anything.
            </div>
            <div class="sub-title">
                Build a beautiful, modern website with flexible Bootstrap components built from scratch.        
            </div>
            <div>
                <button class="btn-page">
                    <span>View all pages </span>
                    <span class="bi bi-arrow-right"></span>
                </button>
                <button class="btn-doc">
                    <span>Documents </span>
                    <span class="bi bi-arrow-right"></span>
                </button>
            </div>
        </main>
       
       
       
    </section>
</body>
</html>

3/05
====

Summary
- CSS Integration
- CSS Selectors
- CSS Rules
- CSS Units
- CSS Colors
- CSS Inheritance
- CSS Box Model
- CSS Positions
- CSS Display
- CSS Backgrounds
- CSS Zindex
- CSS Float

                         CSS Text Styles
font-size
font-family
font-weight
font-style
font-variant [small-caps]

text-align
text-decoration
text-shadow
text-indent
text-overflow
overflow
color
white-space
text-transform
letter-spacing
word-spacing
line-height
word-break

                          CSS Transforms
- Transforming is the process of converting from one state to another.
- CSS provides
    a) 2D Transforms
    b) 3D Transforms
- Transformation includes changing position, size, orientation etc.

2D Transforms:
- Two dimensional transformations allow to change position, size and orientation along X & Y axis.
- Transform methods include
    a) translate()
    b) scale()
    c) rotate()
    d) skew()
    e) matrix()

translate():
- It allows to change the location of element along X & Y axis.
- It have methods
       
        a) translate()        : short hand for both directions
        b) translateX()        : horizontal
        c) translateY()        : vertical

Syntax:
        {
          transform : translate(xPosition, yPosition);
        }

Note: Transform is an CSS attribute, which is not supported across all browser.
      It requires various plugins to configure for different browsers.

        -webkit        safari
        -moz        fire fox
        -o            opera
        -ms            Microsoft

Syntax:
        {
          transform : translateX(300px);
          -webkit-transform: translateX(300px);
          -moz-transform: translateX(300px);
          -o-transform: translateX(300px);
          -ms-transform: translateX(300px);
        }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        img {
            transform: translate(0px,0px);
            transition: 1s;
        }
        img:hover {
            transform: translate(300px, 100px);
            -webkit-transform: translate(300px, 100px);
            -moz-transform: translate(300px, 100px);
            -o-transform: translate(300px, 100px);
            -ms-transform:translate(300px, 100px) ;
            transition: 5s;
        }
    </style>
</head>
<body>
   <img src="../public/images/women-fashion.jpg" width="200" height="200">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .women-fashion {
           width: 600px;
           height: 400px;
           overflow: hidden;
       }
       .img-women {
         width: 605px;
         height: 400px;
         transition: 100ms;
       }
       .img-women:hover {
          transform: translateX(-5px);
          transition: 200ms;
       }
    </style>
</head>
<body>
   <div class="women-fashion">
     <img src="../public/images/women-fashion.jpg" class="img-women">
   </div>
</body>
</html>


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
       .shoe {
        width: 250px;
        height: 350px;
        background-image: url("../public/images/shoe-2.jpg");
        background-size: 100%;
        display: flex;
        flex-direction: column;
        justify-content: end;
        align-items: center;
        overflow: hidden;
       }
       .shoe:hover {
        background-image: url("../public/images/shoe-1.jpg");
        background-size: cover;
       }
       .short-cuts span {
          background-color: white;
          display: inline-block;
          width: 20px;
          height: 20px;
          border-radius: 20px;
          text-align: center;
          padding: 10px;
          margin: 0px 5px 0px 5px;
          font-size: 20px;
       }
       .short-cuts {
          transform: translateY(30px);
          transition: 1s;
       }
       .shoe:hover .short-cuts {
          transform: translateY(-10px);
          transition: 200ms;
       }
       .short-cuts span:hover {
          background-color: red;
          color:white;
          cursor: grab;
       }
    </style>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
</head>
<body>
   <div class="shoe">
        <div class="short-cuts">
            <span class="bi bi-eye-fill"></span>
            <span class="bi bi-cart4"></span>
            <span class="bi bi-heart"></span>
        </div>
   </div>
</body>
</html>

scale()    
- It is used to change the size of element.
- It can transform width using X position & height using Y position.
- Scale methods are
    a) scale()
    b) scaleX()
    c) scaleY()

Syntax:
    {
     transform : scale(xUnits, yUnits);
    }

- Scale units 1=100%

Syntax:
    {
     transform: scale(1.5, 2);    // width=150%   height=200%
    }

5/05
====

a) translate()
b) scale()

c) skew()            
- It is used to tilt element by specified angle.
- It have methods
    a) skew()
    b) skewX()
    c) skewY()

Syntax:
    {
      transform: skewX(20deg);
    }

d) rotate()
- It is used to rotate and change the orientation of element.
- You can rotate along X & Y axis by specified angle.

    a) rotate()
    b) rotateX()
    c) rotateY()

Syntax:
    {
     transform: rotateX(20deg);
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: rotate(0deg);
            transition: 1s;
        }
        img:hover {
            transform: rotate(-360deg);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: rotate(0deg) scale(1) skew(0deg);
            transition: 1s;
        }
        img:hover {
            transform: rotate(180deg) scale(2) skew(5deg);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

e) Matrix
- It allows to apply multiple transforms.
- It can define translate, scale and skew.

Syntax:
    {
     matrix(scaleX, skewX, skewY, scaleY, translateX, translateY);
    }

    scale    : 1 = 100%
    skew    : 0.1 = 10deg
    translate    : 100 = 100px

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: matrix(1,0,0,1,0,0);
            transition: 1s;
        }
        img:hover {
            transform: matrix(2,0.2,0,1.5,300,0);
            transition: 3s;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

                        CSS 3D Transforms
- 3D refers to 3 dimensional transformations.
- It includes X, Y & Z axis.
- It have methods
   
    a) translate3D(x,y,z)
    b) scale3D()
    c) skew3D()
    d) rotate3D()

- All 3D transforms require a "perspective", which refers to depth of content.
- 3D transforms require a combination of styles for defining depth.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            transform: scale3d(1,1,1);
            transition: 1s;
        }
        img:hover {
            transform: scale3d(2,2,4);
            perspective: 50px;
            transition: 3s;
            box-shadow: 15px 15px 2px black;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg" width="150" height="200">
</body>
</html>

Task: Design a cube with 5 sides, div with background color or image.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .box-1 {
            width: 200px;
            height: 150px;
            border:3px solid black;
            transform: skewX(-40deg) rotateY(40deg);
            background-color: red;
        }
        .box-2 {
            width: 150px;
            height: 200px;
            border:3px solid black;
            background-color: yellow;
            transform: translateX(-40px);
        }
        .box-3 {
            width: 150px;
            height: 200px;
            border:3px solid black;
            background-color: blue;
            transform: translateX(-40px);
        }
    </style>
</head>
<body>
    <div>
        <div class="box box-1"></div>
        <div class="box box-2"></div>
        <div class="box box-3"></div>
    </div>
</body>
</html>
                           CSS Transitions
- Transition controls animation styles for elements.
- It includes
    a) transition-duration            : total time taken to transform
    b) transition-delay                : the delay time to start transform.
    c) transition-property            : defines the property that have to use transition.
    d) transition-timing-function         : it sets pre-defined animation function.
    e) transition [short hand]


Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            width: 100px;
            height: 100px;
            transition-duration: 2s;
        }
        img:hover {
            width: 400px;
            height: 400px;
            border-radius: 400px;
            border: 5px solid red;
            transition-duration: 5s;
            transition-property: width, height;
            transition-timing-function: ease-in;
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg">
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            width: 50px;
            height: 50px;
            transition-duration: 2s;
            transition-timing-function: steps(4);
        }
        img:hover {
            width: 500px;
            height: 500px;
            border-radius: 500px;
            border: 5px solid red;
            transition-duration: 5s;
            transition-timing-function:steps(6);
        }
    </style>
</head>
<body>
    <img src="../public/images/women-fashion.jpg">
</body>
</html>

                        CSS Keyframes

6/05
====

CSS Keyframes

- Animation comprises of 2 types of frames.
    a) Static Frame
    b) Key Frame
- Static frame contains content that is same across timeline.
- Keyframe changes the content from start to end.
- Keyframe comprises of
    a) Initial State
    b) Final State
    c) Break Point
- Initial State is defined using "from"
- Final State is defined using "to"
- Break Point can be from 1% to 100%

Syntax:
    @keyframes  anyName
     {
         from {
          attributes;
         }
         break%{
              attributes;
         }
        to {
           attributes;
        }
    }

- You can apply keyframe to any element by using animation attributes
    a) animation-name
    b) animation-duration
    c) animation-delay
    d) animation-iteration-count
    e) animation-timing-function
    f) animation-direction

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        @keyframes Blink {
            from{
                opacity: 0;
                transform: scale(0.1);
            }
            20%{
                transform: rotate(180deg);
            }
            70% {
                transform: skew(20deg);
            }
            to{
                opacity: 1;
                transform: scale(1);
            }
        }
        .bi-star-fill {
            animation-name: Blink;
            animation-duration: 1s;
            animation-iteration-count: infinite;
        }
        img {
            animation-name: Blink;
            animation-duration: 3s;
            animation-iteration-count: infinite;
            animation-direction: alternate;
        }
    </style>
</head>
<body style="background-color: black; color:white">
    <div>
        <div class="bi bi-star-fill" style="font-size: 50px;"></div>
        <div><img src="../public/images/women-fashion.jpg" width="50" height="50"> </div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>

        @keyframes Spin {

            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }

        }


        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .spinner {
            border-left: 15px solid white;
            border-right: 15px solid white;
            border-top: 15px solid white;
            border-bottom: 15px solid red;
            width: 100px;
            height: 100px;
            border-radius: 100px;
            animation-name: Spin;
            animation-duration: 1s;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
        }
    </style>
</head>
<body style="background-color: black; color:white">
    <div>
        <div class="spinner"></div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>

        @keyframes Spin {

            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }

        }


        body {
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        img {
            animation-name: Spin;
            animation-duration: 2s;
            animation-iteration-count: infinite;
            animation-timing-function: linear;
        }
        img:active {
            animation-duration: 500ms;
        }
    </style>
</head>
<body>
    <div>
        <img src="../public/images/fan.png">
    </div>
</body>
</html>

                    https://cssloaders.github.io/

                             CSS Media Query

- It is required to design responsive page.
- CSS media query comprises of specification about media type and condition.

Syntax:
    @media  type  and  (condition)
     {
     }

- "type" refers to screen & print.
- condition is a query that contains attributes
    a) width
    b) min-width
    c) max-width
    d) orientation [ landscape, portrait ]

- "width" specifies exactly defined units.

          width:600px;            exactly at 600px

- "min-width" refers to value starting from specified up to end.

          min-width:600px;        starting from 600px up to end

- "max-width" refers to value starting from 0 up to specified

          max-width:600px;        starting from 0 up to 600px

Syntax:
    @media  screen  and (min-width:600px)
    {
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <style>
         header {
            font-size: 20px;
            font-family: Arial;
            display: flex;
            justify-content: space-between;
            padding: 20px;
            background-color: black;
            color: white;
         }
         button {
            background-color: white;
            border:none;
         }
         nav span {
            padding-right: 20px;
         }
         @media screen and (max-width:599px){
             nav {
                display: none;
             }
         }
         @media screen and (min-width:600px){
             nav {
                display: inline;
             }
             button {
                display: none;
             }
         }
    </style>
</head>
<body>
    <header>
        <div>
           <span>Shopper.</span>
        </div>
        <nav>
            <span>Home</span>
            <span>Shop</span>
            <span>Pages</span>
            <span>Blog</span>
        </nav>
        <div>
            <button class="bi bi-justify"></button>
        </div>
    </header>
</body>
</html>

Summary:
- CSS Integration
    a) Inline
    b) Embedded
    c) External File
- Media Type
- MIME Type
- Minification
- CSS Units
- CSS Colors
- CSS Rules
- CSS Selectors
- CSS Box Model
- CSS Positions
- CSS Z-Index
- CSS Float
- CSS Display
- CSS Background
- CSS Text Styles
- CSS List Style
- CSS Transforms
- CSS Transition
- CSS Keyframes
- CSS Animations
- CSS Media Queries

                                 Bootstrap
- It is a toolkit used for building responsive and interactive UI.
- You can build fast by using pre-built components, grid-system and layouts.
- Bootstrap up to version 4 require jQuery plugin.
- Bootstrap 5 doesn't require a jQuery plugin, it uses directly JavaScript.
- Bootstrap styles are configured using "Sass" language.
- It is an open source and allows to customize.
- It is cross browser compatible.

Setup Bootstrap 5:

    > npm install bootstrap  bootstrap-icons --save

Enable Bootstrap:

<head>
<link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
<link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
<script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>

7/05
=====
- Bootstrap provides pre-defined classes for various styles.
- It allows to reuse and customize according to requirements.

Bootstrap Margins:

        .m-{ }        margin all directions  {1 to 4}
        .mt-{ }        top margin
        .mb-{ }        bottom margin
        .my-{ }        top and bottom margin
        .ms-{ }        left margin [start]
        .me-{ }        right margin [end]
        .mx-{ }        left & right margin


Bootstrap Padding:

        .p-{ }
        .pt-{ }
        .pb-{ }
        .py-{ }
        .ps-{ }
        .pe-{ }
        .px-{ }

Bootstrap Border:

        .border
        .border-{size}            1 to 4
        .border-{contextual}     primary, secondary, success, danger, warning etc.

Border Radius:

        .rounded
        .rounded-{size}        1 to 4
        .rounded-pill
        .rounded-circle

Width & Height:
       
        .w-{ }        25, 50, 75, 100
        .h-{ }            25, 50, 100

Background & Text Color

        .bg-{contextual}
        .text-{contextual}

Text Styles

        .fs-{ }        font size 1 to 7
        .h{ }            heading size from 1 to 6
        .fw-bold
        .fst-italic
        .text-center | end | start | justify
        .text-decoration-underline | overline | line-through | none

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <div class="ms-4 mt-4 me-4 rounded rounded-4 border border-3 text-center border-danger p-4 w-25 bg-dark text-warning">
        <div class="h1 text-center py-4">Bootstrap</div>
        <img src="../public/images/women-fashion.jpg" class="rounded  rounded-circle border border-warning border-4" width="200" height="200">
        <p class="fs-4 fw-bold text-decoration-underline">Components & Plugins</p>
        <dl class="text-start">
            <dt>Components</dt>
            <dd>Navbar</dd>
            <dd>Carousel</dd>
            <dd>Alerts</dd>
        </dl>
    </div>
</body>
</html>

Bootstrap Display

    .d-none
    .d-block
    .d-inline
    .d-inline-block
    .d-flex
    .flex-wrap
    .flex-row
    .flex-column
    .justify-content-start | end | center | space-between | space-around | space-evenly
    .align-items-start | end | center

Ex:
<div class="d-flex justify-content-center align-items-center" style="height:100vh">
        <img src="../public/images/women-fashion.jpg" width="200" height="200" class="border border-2 border-warning rounded rounded-circle">
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <style>
        .box {
            width: 100px;
            height: 100px;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <div class="p-4 m-4 d-flex flex-row justify-content-between flex-wrap">
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
        <div class="box"></div>
    </div>
</body>
</html>

Bootstrap Grid

    .row
    .col
    .col-{size}      1 to 12

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <style>
        .box {
            width: 100px;
            height: 100px;
            border:1px solid gray;
        }
    </style>
</head>
<body>
    <div class="row border m-1 border-4 border-danger p-1">
        <div class="col-3 p-4 border border-warning border-2">
            col-1
        </div>
        <div class="col-6 p-4 border border-warning border-2">
            col-2
        </div>
        <div class="col-3 p-4 border border-warning border-2">
            col-2
        </div>
    </div>
</body>
</html>

Bootstrap Float

    .float-start
    .float-end

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="bg-secondary">
    <div class="m-4 p-4 bg-white">
        <div class="fs-4 fw-bold text-center">Personal Loan EMI Calculator</div>
        <div class="row my-4">
            <div class="col">
                Amount you need <input type="text" size="8">
            </div>
            <div class="col">
                for <input type="text" size="2"> years
            </div>
            <div class="col">
                interest rate <input type="text" size="2"> %
            </div>
        </div>
        <div class="row my-4">
            <div class="col">
                <input type="range" min="1" max="100" value="20" class="w-100">
                <div>
                    <span>&#8377; 1,00,000/-</span>
                    <span class="float-end">&#8377; 10,00,000/-</span>
                </div>
            </div>
            <div class="col">
                <input type="range" value="2" class="w-100">
                <div>
                    <span>1</span>
                    <span class="float-end">5</span>
                </div>
            </div>
            <div class="col">
                <input type="range" value="10" class="w-100">
                <div>
                    <span>10.45%</span>
                    <span class="float-end">18.45%</span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <button class="btn btn-primary float-end">Calculate</button>
            </div>
        </div>
    </div>
</body>
</html>

Bootstrap Position:

    .position-static
    .position-absolute
    .position-fixed
    .position-relative
    .position-sticky
    .top-{0,50,100}
    .end-{0,50,100}
    .start-{0,50,100}
    .bottom-{0, 50, 100}
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
   <div style="background-image: url('../public/images/women-fashion.jpg'); background-size: cover ; height: 400px;" class="w-50 position-relative">
        <div class="bg-danger position-absolute end-0 top-0 rounded rounded-circle text-center text-white p-1" style="width:60px; height: 60px;">20% OFF</div>
   </div>
   <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sapiente saepe in mollitia dolore. Reprehenderit perspiciatis sunt consectetur similique, repellat sint accusamus, cupiditate nostrum iusto praesentium asperiores exercitationem quidem officiis quasi! Lorem ipsum dolor sit amet consectetur adipisicing elit. Rerum quos vel suscipit voluptates exercitationem nobis assumenda perspiciatis quibusdam odio, ut illum nam? Amet quae ipsam iure debitis quod provident non.</p>
   <h1 class="bg-dark text-white p-2 position-sticky top-0">News Updates</h1>
   <p>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Sapiente saepe in mollitia dolore. Reprehenderit perspiciatis sunt consectetur similique, repellat sint accusamus, cupiditate nostrum iusto praesentium asperiores exercitationem quidem officiis quasi! Lorem ipsum dolor sit amet consectetur adipisicing elit. Rerum quos vel suscipit voluptates exercitationem nobis assumenda perspiciatis quibusdam odio, ut illum nam? Amet quae ipsam iure debitis quod provident non.</p>

</body>
</html>
   
Button Classes

    .btn
    .btn-{contextual}
    .btn-{size} sm | lg
    .btn-outline-{contextual}
    .btn-group | btn-group-vertical
    .btn-toolbar
    .btn-link
    .btn-close

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bootstrap</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
   <dl class="ms-4">
      <nav class="btn-toolbar bg-danger mt-4">
         <div class="btn-group">
            <button class="btn btn-danger bi bi-house-door"> Home</button>
            <button class="btn btn-danger bi bi-globe"> Pages</button>
            <button class="btn btn-danger bi bi-cart4"> Shop</button>
         </div>
      </nav>
      <dt>Button Base</dt>
      <dd>
        <button class="btn">Submit</button>
      </dd>
      <dt>Contextual</dt>
      <dd>
        <button class="btn btn-primary">Insert</button>
        <button class="btn btn-warning">Update</button>
        <button class="btn btn-danger">Delete</button>
      </dd>
      <dt>Outline Contextual</dt>
      <dd>
        <button class="btn btn-outline-primary">Insert</button>
        <button class="btn btn-outline-warning">Update</button>
        <button class="btn btn-outline-danger">Delete</button>
      </dd>
      <dt>Size</dt>
      <dd>
        <button class="btn btn-outline-primary">Insert</button>
        <button class="btn btn-outline-warning btn-sm">Update</button>
        <button class="btn btn-outline-danger btn-lg">Delete</button>
      </dd>
      <dt>Group</dt>
      <dd class="btn-group-vertical">
         <button class="bi bi-play btn btn-danger"></button>
         <button class="bi bi-pause btn btn-danger"></button>
         <button class="bi bi-stop btn btn-danger"></button>
      </dd>
      <dt>Special</dt>
      <dd>
        <button class="btn btn-link">Signout</button>
        <button class="btn btn-close"></button>
      </dd>
   </dl>
</body>
</html>

8/05
====

Bootstrap Form Classes

    .form-control        textbox, password, number, url, email, date etc.
    .form-select        dropdown
    .form-range        range input
    .form-control-color    color input
    .form-control-file    file input
    .form-label        label
    .form-check-input    radio & check box
    .form-check-label    label for radio & checkbox
    .form-switch        container that have checkbox or radio

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="d-flex justify-content-center">
    <form class="mt-4 border border-2 rounded p-4 w-25">
        <div class="bi my-2 text-center bi-person-fill fs-5 fw-bold"> Register User</div>
        <div class="mb-2">
            <label class="form-label">User Name</label>
            <div>
                <input type="text" placeholder="Your name" class="form-control">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Password</label>
            <div>
                <input type="password" placeholder="Your password" class="form-control">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Your City</label>
            <div>
                <select class="form-select">
                    <option>Select City</option>
                    <option>Delhi</option>
                    <option>Hyd</option>
                </select>
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Rating</label>
            <div>
                <input type="range" class="form-range">
            </div>
        </div>
        <div class="mb-2">
            <label class="form-label">Subscribe</label>
            <div class="form-switch">
                <input class="form-check-input" type="checkbox"> <label class="form-check-label"> Yes </label>
            </div>
        </div>
        <div class="mb-2">
            <button class="btn btn-warning w-100">Register</button>
        </div>
    </form>
</body>
</html>

Bootstrap Input Group

    .input-group
    .input-group-sm | lg
    .input-group-text

Syntax:
    <div class="input-group">
        <span class="input-group-text"> </span>
        ... elements..
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <div class="m-4 p-4 w-25">
        <div>
            <h4>Amazon</h4>
            <div class="input-group">
                <select class="input-group-text">
                    <option>All</option>
                </select>
                <input type="text" class="form-control" placeholder="Search Amazon.in">
                <button class="bi bi-search btn btn-warning"></button>
            </div>
            <h4>Register User</h4>
            <div class="mb-4 input-group">
                <span class="bi input-group-text bi-person-fill"></span>
                <input type="text" class="form-control" placeholder="User Name">
                <span class="input-group-text">
                    <input type="checkbox" class="form-check-input">
                </span>
            </div>
            <div class="input-group">
                <span class="bi input-group-text bi-key-fill"></span>
                <input type="password" class="form-control" placeholder="Password">
                <span class="input-group-text">
                    <input type="checkbox" class="form-check-input">
                </span>
            </div>
        </div>
    </div>
</body>
</html>

Bootstrap Table Classes

    .table
    .table-hover
    .table-bordered
    .table-borderless
    .table-striped
    .table-responsive [ bootstrap 5 uses for container that have table ]
    .table-dark
    .table-{contextual}

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Products Table</h3>
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody class="table-success">
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>

Bootstrap Pagination

    .pagination
    .page-item
    .page-link
    .page-item-text
    .active
    .disabled
    .pagination-sm | lg

Syntax:
  <ul class="pagination">
    <li class="page-item">
    <a class="page-link">
       <span class="page-item-text"> 1 </span>
    </a>
    </li>
  </ul>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Products Table</h3>
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                   
                </tr>
            </thead>
            <tbody class="table-success">
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="4">
                        <ul class="pagination pagination-lg">
                            <li class="page-item"><a class="page-link"><span class="page-item-text">&laquo;</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">1</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">2</span></a></li>
                            <li class="page-item active"><a class="page-link"><span class="page-item-text">3</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">4</span></a></li>
                            <li class="page-item disabled"><a class="page-link"><span class="page-item-text">5</span></a></li>
                            <li class="page-item"><a class="page-link"><span class="page-item-text">&raquo;</span></a></li>
                        </ul>
                    </td>
                </tr>
            </tfoot>
        </table>
    </div>
</body>
</html>

Bootstrap Progress Bar

    .progress-bar
    .progress
    .progress-bar-animated
    .progress-bar-striped
   
Note: Progress bar value is shown by using style set with "width" in %.

Syntax:
    <div class="progress">
       <div class="progress-bar" style="width:30%">
       </div>
    </div>

Bootstrap Spinners

    .spinner-bordered
    .spinner-bordered-sm | lg
    .spinner-grow
    .spinner-grow-sm | lg

Syntax:
    <div class="spinner-bordered text-success"> </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
    <h3>Progress</h3>
    <div class="progress">
        <div class="progress-bar bg-success progress-bar-striped progress-bar-animated" style="width: 30%;">
                30% completed
        </div>
        <div class="progress-bar mx-1 bg-warning progress-bar-striped progress-bar-animated" style="width: 40%;">
                40% remaining
        </div>
        <div class="progress-bar bg-dark progress-bar-striped progress-bar-animated" style="width: 30%;">
            30% N/A
        </div>
    </div>
    <h3>Spinners</h3>
    <span class="spinner-border text-success"></span>
    <button class="btn btn-primary">
        <span class="spinner-border spinner-border-sm"></span>
        <span>Loading</span>
    </button>
    <button class="btn btn-primary">
        <span class="spinner-grow spinner-grow-sm"></span>
        <span>Loading</span>
    </button>
</body>
</html>

Bootstrap Badge

    .badge
    .text-{contextual}
    .bg-{contextual}

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
     <button class="bi bi-cart4 btn btn-warning position-relative"> <span class="badge bg-danger rounded rounded-circle position-absolute">2</span> </button>
     <br><br>
     <button class="btn btn-dark"> <span class="badge bg-light text-dark rounded rounded-circle"><span class="bi bi-bell-fill"></span></span> Subscribe </button>
     <ul class="">

     </ul>
</body>
</html>

Bootstrap List Style

    .list-unstyled
    .list-group
    .list-group-item
    .list-group-item-text
    .list-group-horizontal

Syntax:
    <ul  class="list-group">
       <li class="list-group-item"> </li>
    </ul>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="m-4">
     <h2>Table of Contents</h2>
     <ul class="list-group">
        <li class="list-group-item d-flex justify-content-between list-group-item-danger"><span class="list-group-item-text">Introduction to Web</span> <span class="badge bg-dark rounded rounded-circle">2</span> </li>
        <li class="list-group-item d-flex justify-content-between list-group-item-success"><span class="list-group-item-text">Web Terminology</span> <span class="badge bg-dark rounded rounded-circle">5</span></li>
        <li class="list-group-item d-flex justify-content-between list-group-item-warning"><span class="list-group-item-text">Web Application Architecture</span> <span class="badge bg-dark rounded rounded-circle">7</span></li>
        <li class="list-group-item d-flex justify-content-between list-group-item-info"><span class="list-group-item-text">Servers & Browser</span><span class="badge bg-dark rounded rounded-circle">9</span></li>
     </ul>
</body>
</html>

9/05
=====

Bootstrap Cards
        .card
        .card-header
        .card-body
        .card-footer
        .card-title
        .card-subtitle
        .card-img-top
        .card-img-bottom
        .card-img-overlay

Syntax:
    <div class="card">
        ... card header ...
        .... card body....
        ... card footer...
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body>
    <main class="m-4 d-flex">
        <div class="card p-2 m-2" style="width:300px">
            <img src="../public/images/data sci.png" class="card-img-top" height="130">
            <div class="card-header">
                <h2 class="card-title">Data Science</h2>
                <p class="card-subtitle">By Mr. John</p>
            </div>
            <div class="card-body">
                <ul>
                    <li>Topic-1</li>
                    <li>Topic-2</li>
                    <li>Topic-3</li>
                </ul>
            </div>
            <div class="card-footer">
                <button class="btn btn-warning w-100"> Join Course </button>
            </div>
        </div>

                <div class="card p-2 m-2" style="width:300px">
            <img src="../public/images/power-bi.png" class="card-img-top" height="130">
            <div class="card-header">
                <h2 class="card-title">Power BI</h2>
                <p class="card-subtitle">By Mr. John</p>
            </div>
            <div class="card-body">
                <ul>
                    <li>Topic-1</li>
                    <li>Topic-2</li>
                    <li>Topic-3</li>
                </ul>
            </div>
            <div class="card-footer">
                <button class="btn btn-warning w-100"> Join Course </button>
            </div>
        </div>
    </main>
</body>
</html>

Bootstrap Containers
 - Containers are pre-defined with media queries.
 - They are design with various view ports and queries.

        .container        ]   mobile
        .container-sm        ]   mobile
        .container-md        ]   tab
        .container-lg        ]   pc
        .container-xl        ]   laptop
        .container-xxl        ]   laptop wide screen
        .container-fluid    ]   responsive

Syntax:
    <body  class="container-fluid">


                        Bootstrap Components
- Components are building blocks for UI.
- They enable easy reusability, separation and extensibility.
- A component comprises of pre-defined
    a) Design
    b) Styles
    c) Functionality

1. Alerts
- Alert is an embedded message box in page.
- It can dynamically show or hide messages in page.

Classes:
    .alert
    .alert-dismissible
    .alert-{contextual}
    .alert-title
    .alert-link

Attributes [dynamic]
    data-bs-dismiss        : It is used to close any component.
                          It is defined for clickable elements likes buttons.

Syntax:
    <div class="alert alert-dismissible">
        ... your content..
       
        <button data-bs-dismiss="alert"> OK </button>
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2>Alerts</h2>
    <aside class="alert alert-dismissible w-25">
        <button class="btn btn-close" data-bs-dismiss="alert"></button>
        <div>Ads.</div>
        <img src="../public/images/a4.jpg" width="200" height="200">
        <p>Offers..</p>
    </aside>
    <div class="alert alert-success alert-dismissible w-50">
        <button data-bs-dismiss="alert" class="btn btn-close"></button>
        <h3 class="alert-title">Registered successfully</h3>
        <p>Your account created and an activation link sent to your email.</p>
        <a class="alert-link" href="#">Help?</a>
        <br><br>
        <button data-bs-dismiss="alert" class="btn btn-success">OK</button>
    </div>
    <div class="alert alert-dismissible alert-danger w-25">
        <h3>Invalid Credentials</h3>
        <p>Please verify your login details</p>
        <button class="btn btn-danger" data-bs-dismiss="alert"> OK </button>
    </div>
</body>
</html>

2. Modals
- Modal is a dialog that pop-up with content in backdrop.
- Modal is hidden and you have to invoke using JS attributes.
- Modal can close using interactive buttons or with backdrop click.

Classes:
    .modal
    .modal-dialog
    .modal-content
    .modal-header
    .modal-body
    .modal-footer
    .modal-fullscreen
    .modal-dialog-centered
    .modal-dialog-scrollable

Attributes
    data-bs-target            : It refers to the ID of element to open
    data-bs-toggle            : It define on click to open specific component
    data-bs-dismiss        : It is used to close component

Syntax:
    <div class="modal">
       <div class="modal-dialog">
        <div class="modal-content">
            ... header, body, footer
        </div>
      </div>
     </div>

- Every modal must have a reference ID.
- You can access the ID using "data-bs-target".

Note: You can apply ".fade" class to set a fading animation for modal.
      Bootstrap 5 doesn't support nested modals.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <button data-bs-toggle="modal" data-bs-target="#login" class="btn btn-primary mt-3">Login</button>
    <button data-bs-toggle="modal" data-bs-target="#ads" class="btn btn-danger mt-3">Ads</button>
    <div class="modal fade" id="ads">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Summer Sale</h3>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <img src="../public/images/a4.jpg" width="200" height="200">
                </div>
            </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="login">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="bi bi-person-circle"> User Login</h3>
                    <button class="btn btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <dl>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                        <dt>User name</dt>
                        <dd><input type="text" class="form-control"></dd>
                        <dt>Password</dt>
                        <dd><input type="password" class="form-control"></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary mx-2">Login</button>
                    <button class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

3. Offcanvas
- It is similar to modal but supports various orientations.
- It can open with content in backdrop.

Classes:
    .offcanvas
    .offcanvas-start
    .offcanvas-end
    .offcanvas-top
    .offcanvas-bottom
    .offcanvas-header
    .offcanvas-body
    .offcanvas-title

Attributes:
    data-bs-target
    data-bs-toggle
    data-bs-dismiss

Syntax:
    <div class="offcanvas offcanvas-start">
       <div class="offcanvas-header">
       </div>
       <div class="offcanvas-body">
      </div>
       </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
      <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <header class="mt-4 p-3 border border-2">
        <nav class="d-flex justify-content-between">
            <button data-bs-target="#navbar" data-bs-toggle="offcanvas" class="bi bi-justify fs-5 btn btn-light"> Shopper </button>
            <button data-bs-target="#cart" data-bs-toggle="offcanvas" class="bi bi-cart4 btn btn-warning"></button>
            <div class="offcanvas offcanvas-start" id="navbar">
                <div class="offcanvas-header">
                    <h3>Shopping</h3>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <ul class="list-group">
                        <li class="list-group-item list-group-item-action"> <a>Home</a> </li>
                        <li class="list-group-item list-group-item-secondary"> <a>Electronics</a> </li>
                        <li class="list-group-item list-group-item-success"> <a>Fashion</a> </li>
                        <li class="list-group-item list-group-item-danger"> <a>Footwear</a> </li>
                        <li class="list-group-item list-group-item-warning"> <a>Contact</a> </li>
                    </ul>
                </div>
            </div>

            <div class="offcanvas offcanvas-end" id="cart">
                <div class="offcanvas-header">
                    <h3>Your Cart Items</h3>
                    <button class="btn btn-close" data-bs-dismiss="offcanvas"></button>
                </div>
                <div class="offcanvas-body">
                    <div>
                        <img src="../public/images/a1.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a2.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a3.jpg" width="100" height="100">
                    </div>
                    <div>
                        <img src="../public/images/a4.jpg" width="100" height="100">
                    </div>

                </div>
            </div>
        </nav>
    </header>
</body>
</html>

10/05
=====

4. Carousel
- It is used to configure sliding and fading content in page.
- It can be defined with auto and manual control.

Basic Carousel Classes:
    .carousel
    .carousel-inner
    .carousel-item

Syntax:
    <div class="carousel">
       <div class="carousel-inner">
        <div class="carousel-item">
        </div>
        ... multiple items...
       </div>
        </div>

- Make sure that any one carousel item is active.

    <div class="carousel-item active">
    </div>

- By default carousel in not defined with animation.
- To start animation you have to define the attribute "data-bs-ride" for carousel.

    <div class="carousel"  data-bs-ride="carousel">
    </div>

- Animation have 2 different effects, you have to define at least any one effect.

    a) slide
    b) carousel-fade

    <div class="carousel slide"> </div>
    <div class="carousel carousel-fade"> </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
    </div>
</body>
</html>

Carousel Controls:
- Controls allow to navigate between items in a carousel list.
- You can move to previous or next.

Classes:
    .carousel-control-prev
    .carousel-control-prev-icon
    .carousel-control-next
    .carousel-control-next-icon

Attributes
    data-bs-slide="prev"
    data-bs-slide="next"
    data-bs-target="carousel_id"

- You can apply dark theme for controls by using "data-bs-theme=dark".
  You have to set theme for carousel.

    <div class="carousel" data-bs-theme="dark">

- Bootstrap up to 4 version can use "carousel-dark" class. It is now obsolete.
  [Deprecated]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
    </div>
</body>
</html>

Carousel Indicators:
- Indicators allows random navigation.
- User can navigate to any specific item directly.

Class:
    .carousel-indicators

Attributes:
    data-bs-slide-to="indexNumber"    0 = first
    data-bs-target="carousel_id"

- Make sure that one indicator button is active.

       <button data-bs-slide-to="0" data-bs-target="#banners"  class="active"> </button>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
        <div class="carousel-indicators">
            <button class="active" data-bs-slide-to="0" data-bs-target="#banners"></button>
            <button data-bs-slide-to="1" data-bs-target="#banners"></button>
            <button data-bs-slide-to="2" data-bs-target="#banners"></button>
        </div>  
    </div>
</body>
</html>

Carousel Timing:
- The animation of slide and fade have default timing for every item.
- You can set custom timing by using the attribute "data-bs-interval" set with milliSeconds.

Syntax:
    <div class="carousel-item" data-bs-interval="4000">
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="carousel slide" data-bs-ride="carousel" id="banners">
        <div class="carousel-inner">
            <div class="carousel-item active" data-bs-interval="3000">
                <img src="../public/images/slide-1.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item" data-bs-interval="1000">
                <img src="../public/images/slide-2.jpg" height="250" class="w-100 d-block">
            </div>
            <div class="carousel-item" data-bs-interval="5000">
                <div class="d-flex bg-secondary justify-content-center align-items-center" style="height: 250px;">
                    <div>
                        <div class="input-group">
                            <input type="email" placeholder="Your email address" class="form-control">
                            <button class="btn btn-danger"> Get Started <span class="bi bi-chevron-right"></span> </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="carousel-item" data-bs-interval="4000">
                <img src="../public/images/slide-3.jpg" height="250" class="w-100 d-block">
            </div>
        </div>
        <button data-bs-target="#banners" data-bs-slide="prev" class="carousel-control-prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button data-bs-target="#banners" data-bs-slide="next" class="carousel-control-next">
            <span class="carousel-control-next-icon"></span>
        </button>
        <div class="carousel-indicators">
            <button class="active" data-bs-slide-to="0" data-bs-target="#banners"></button>
            <button data-bs-slide-to="1" data-bs-target="#banners"></button>
            <button data-bs-slide-to="2" data-bs-target="#banners"></button>
            <button data-bs-slide-to="3" data-bs-target="#banners"></button>
        </div>  
    </div>
</body>
</html>

5. Collapse
- It is used to show or hide any container dynamically.
- It requires following classes

    .collapse
    .show

Attributes:
    data-bs-target
    data-bs-toggle

Syntax:
    <div class="collapse show">
    </div>

- Every collapse requires an ID to refer.
- The default collapse state is hidden state

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <div class="mt-4">
        <button data-bs-target="#q1" data-bs-toggle="collapse" class="btn btn-dark w-100"> What is Netflix? </button>
        <div class="mt-1 collapse" id="q1">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Est beatae quo aliquam dicta facere perferendis esse rem ab illo inventore perspiciatis incidunt consequuntur voluptatibus, culpa quibusdam explicabo quos. Voluptatibus, facere! Lorem ipsum dolor sit, amet consectetur adipisicing elit. In minima quam mollitia praesentium dolorem quas! A quisquam recusandae amet in quas ratione tempora rerum cupiditate deleniti, eaque harum iste saepe.</p>
        </div>
    </div>
</body>
</html>

6. Accordion
- It is a set of items which you can expand or collapse using Mutex.
- Mutex is mutual exclusion, If any one is expanded then it will collapse all other in the context.

Classes:
    .accordion
    .accordion-item
    .accordion-button
    .accordion-header
    .accordion-body
    .accordion-footer
    .accordion-collapse
   
Attributes
    data-bs-target
    data-bs-toggle
    data-bs-parent [ It is defined for collapse to handle Mutex ]

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2 class="text-center">Frequently Asked Questions</h2>
    <div class="accordion" id="faqs">
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q1" data-bs-toggle="collapse" class="accordion-button">What is Netflix?</button>
            </div>
            <div class="accordion-collapse collapse show" id="q1" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti, quidem doloribus perspiciatis nobis molestias vitae fuga et, quisquam soluta? Atque, aperiam.</p>
                </div>
            </div>
       </div>
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q2" data-bs-toggle="collapse" class="accordion-button">How much does Netflix cost?</button>
            </div>
            <div class="accordion-collapse collapse" id="q2" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti</p>
                </div>
            </div>
       </div>
    </div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2 class="text-center">Frequently Asked Questions</h2>
    <div class="accordion" id="faqs">
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q1" data-bs-toggle="collapse" class="btn btn-dark w-100">What is Netflix?</button>
            </div>
            <div class="accordion-collapse collapse show" id="q1" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti, quidem doloribus perspiciatis nobis molestias vitae fuga et, quisquam soluta? Atque, aperiam.</p>
                </div>
            </div>
       </div>
       <div class="accordion-item">
            <div class="accordion-header">
                <button data-bs-target="#q2" data-bs-toggle="collapse" class="btn btn-dark w-100">How much does Netflix cost?</button>
            </div>
            <div class="accordion-collapse collapse" id="q2" data-bs-parent="#faqs">
                <div class="accordion-body">
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Non facere voluptatem consequatur, unde ducimus est velit aspernatur, enim repellat pariatur quo odio libero quasi in eligendi! Dolor doloremque sapiente ab? Lorem ipsum dolor, sit amet consectetur adipisicing elit. Praesentium accusamus iure, quos laudantium eligendi dolorem quia asperiores deleniti</p>
                </div>
            </div>
       </div>
    </div>
</body>
</html>

12/05
=====
7. Dropdown
- It can design a dropdown with complex options.
- It supports icons, images and rich format for options.

Classes:
    .dropdown
    .dropdown-menu
    .dropdown-item
    .dropdown-item-text
    .dropdown-toggle
    .dropdown-divider
    .dropup
    .dropstart
    .dropend

Attributes
    data-bs-target
    data-bs-toggle
    data-bs-theme="dark"

Syntax:
    <div class="dropdown">
        <button class="dropdown-toggle"> Click </button>
        <ul class="dropdown-menu">
        <li> <a class="dropdown-item"> <span class="dropdown-item-text"> Item </span> </a> </li>
        </ul>
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
    <h2>Dropdown</h2>
    <div class="dropend mt-4" data-bs-theme="dark">
        <button data-bs-toggle="dropdown" class="btn btn-dark dropdown-toggle"> <span class="bi bi-person-circle"></span> Login </button>
        <ul class="dropdown-menu">
            <li > <a class="dropdown-item" href="../public/shopper-template.html" target="body-frame"> <span class="bi bi-cart4 dropdown-item-text"> Shop </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-heart dropdown-item-text"> Wishlist </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-gift dropdown-item-text"> Gift Card </span> </a> </li>
            <li > <a class="dropdown-item"> <span class="bi bi-wallet dropdown-item-text"> Payments </span> </a> </li>
            <li class="dropdown-divider"></li>
            <li > <a class="dropdown-item"> <span class="bi bi-question-circle dropdown-item-text"> Help </span> </a> </li>
        </ul>
    </div>
    <iframe width="100%" height="500" name="body-frame">

    </iframe>
</body>
</html>

8. Nav with Tabs
- It is a navigation between tabs.
- You can display multiple pages content in one page using tab control.

Classes:
    .nav
    .nav-tabs
    .nav-pills
    .nav-menu
    .nav-item
    .nav-link
    .nav-item-text [nav-text]
    .tab-content
    .tab-pane

Attributes:
    data-bs-target [ if your are configuring an anchor elements then href is used]
    data-bs-toggle

Syntax:
    <ul class="nav nav-tabs">
      <li class="nav-item"> <a href="#id" class="nav-link"> </a> </li>
    </ul>
    <div class="tab-content">
      <div class="tab-pane">
      </div>
       ... multiple panes...
    </div>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>

</head>
<body class="container-fluid">
    <h2>Product Info</h2>
    <ul class="nav nav-tabs">
        <li class="nav-item"><a href="#basic" data-bs-toggle="tab" class="nav-link active"> <span class="nav-text">Basic Details</span> </a> </li>
        <li class="nav-item"><a href="#preview" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Preview</span></a></li>
        <li class="nav-item"><a href="#offers" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Offers</span></a></li>
        <li class="nav-item"><a href="#reviews" data-bs-toggle="tab" class="nav-link"> <span class="nav-text">Rating & Reviews</span></a> </li>
    </ul>
    <div class="tab-content mt-4">
        <div class="tab-pane active" id="basic">
            <h2>iPhone 16 (White) 128 GB</h2>
            <div class="fs-2 fw-bold"> &#8377; 69,999</div>
        </div>
        <div class="tab-pane" id="preview">
            <img src="../public/images/iphone-white.jpg" width="200" height="300">
        </div>
        <div class="tab-pane" id="offers">
            <ul>
                <li>Offer-1</li>
                <li>Offer-2</li>
                <li>Offer-3</li>
                <li>Offer-4</li>
                <li>Offer-5</li>
            </ul>
        </div>
        <div class="tab-pane" id="reviews">
            <span class="badge bg-success text-white rounded">4.5 <span class="bi bi-star-fill"></span> </span>

        </div>
    </div>
</body>
</html>

9. Navbar
- It is used to design a responsive navigation bar.
- It can show or hide content using media queries.
- It uses portrait and landscape orientations.
- It also uses min-width and max-width queries.

Classes:
    .navbar
    .navbar-brand
    .navbar-toggler
    .navbar-toggler-icon
    .navbar-nav
    .navbar-collapse
    .nav-menu
    .nav-item
    .nav-link
    .nav-text
    .navbar-expand-{sm | md | lg | xl }
    .navbar-dark | light
    .navbar-{contextual}

Syntax:
  <nav class="navbar navbar-expand-lg navbar-dark bg-success">
    <div class="container-fluid">
         <span class="navbar-brand"> Title </span>
     <button class="navbar-toggler"> </button>
    <div class="navbar-collapse">
       <ul class="navbar-nav">
        <li class="nav-item"> <a class="nav-link"></a></li>
      </ul>
    </div>
    </div>
 </nav>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
</head>
<body class="container-fluid">
   <nav class="navbar navbar-dark bg-success navbar-expand-lg">
     <div class="container-fluid">
        <button class="navbar-toggler" data-bs-toggle="collapse" data-bs-target="#menu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <span class="navbar-brand">Shopper.</span>
        <div class="navbar-collapse collapse" id="menu">
            <ul  class="navbar-nav">
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Home </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Shop </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Docs </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Pages </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text"> Blog </span></a></li>
                <li class="nav-item"><a class="nav-link"><span class="nav-text">
                   <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search Shopper.com">
                        <button class="bi bi-search btn btn-warning"></button>
                   </div>    
                </span></a></li>
            </ul>
        </div>
     </div>
   </nav>
</body>
</html>

10. Breadcrumb

Classes:
    .breadcrumb
    .breadcrumb-item

Variable:
    --bs-breadcrumb-divider

Syntax:
    <ul  class="breadcrumb"  style="--bs-breadcrumb-divider: ' > ' ">

       <li class="breadcrumb-item"> </li>
   
    </ul>

getbootstrap.com => docs => scroll spy

14/05
=====

JavaScript

- JavaScript is light weight interpreted and JIT compiled programming language.

    * Light weight allows to use very less memory.
    * Language is translated by using 2 techniques
            a) Interpreted
            b) Compiled
    * Interpreted allows to translate line-by-line of program.
    * Compiled allows to translate all lines simultaneously at the same time.
    * Complied is classified into 2 types
            a) JIT
            b) AOT
    * JIT is Just-In-Time, it compiles only when it is requested.
    * AOT is Ahead-of-Time, it is pre-compiled and ready to render.
    * JavaScript is interpreted by using a "JavaScript Interpreter" in browser.
    * JavaScript is compiled using compilers like "Babel, V8, Node etc."
    * A programming enable communication and interaction between use and
      application.

- JavaScript is a language that supports various programming paradigms, which
  includes structural, functional, imperative, object oriented etc.

    * Paradigm provides distinct set of methods, approach and standards to
      handle interaction.
    * It uses "Multi Paradigm".
    * Hence it is suitable for various types of technologies.

Note: JavaScript is not an OOP language. It supports only few features of OOP.

- JavaScript is a language which is used in various tiers.
- It is used in
    a) Front End
    b) Back End
    c) Database
- It is used
    a) Client Side            [ HTML ]
    b) Server Side            [ Node JS, Next JS]
    c) In Database         [ MongoDB ]
    d) In Action Script         [Animation tools]


JavaScript Client Side:
- A client side script runs on client device.
- It reduces burden on server, by handling various interactions client side.
- JavaScript client side can handle
    a) Browser Interactions  [ BOM ]
    b) Document Interactions [ DOM ]
- Browser Interactions include
    a) window
    b) location
    c) navigator
    d) history etc..
- DOM interactions include
    a) Data Binding
    b) Style Binding
    c) Class Binding
    d) Event Binding
    e) Validations etc.

Evolution of JavaScript:
- CERN [ Council for European Research and Nuclear] labs developed a script called ECMA script for Mosaic Browser in early days of Internet.
- In early 1995  Netscape Communications started a browser called "Netscape Navigator".
- Netscape appointed "Brendan Eich" to develop a script for their browser.
- Brendan Eich designed a script by name "Mocha" later renamed as "Live Script".
- Netscape given the responsibility of Live Script to Sun Microsystems. [Java]
- Sun Microsystems renamed the Live Script as "JavaScript".
- Netscape stopped its services in 2000 and given the responsibility of JavaScript to
  ECMA.
- ECMA named it as  "ECMA Script", Its popular versions are

            ECMAScript 2015        ES5
            ECMAScript 2016        ES6
            ECMAScript 2017        ES7
            ....
            ECMAScript 2024        ES15

15/05
=====

JavaScript with HTML page:
- JavaScript functions can be defined using following techniques
    1. Inline
    2. Embedded
    3. External File

Inline
- JavaScript functions are defined within HTML element.
- It is faster but not good in reusability.

Syntax:
    <button  onclick="function(){}">   </button>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="window.print()">Print</button>
</body>
</html>

Embedded:
- In this technique JavaScript functions are defined in a <script> container.
- You can embed in head or body section.
- It is slower when compared to inline, but allows to reuse.

Syntax:
    <script>
         function Print()
         {
         }
    </script>

     <button onclick="Print()">

- The MIME type of script can be "text/javascript", "module", "text/babel" etc.
- If you are using JS in browser to interpret then keep the type as "text/javascript".

Syntax:
    <script type="text/javascript">

    </script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
        function PrintPage(){
            window.print();
        }
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

- JavaScript is not a strictly typed language, hence explicitly we have to make it strict.
- Strict mode reduces code in-consistency.
- It is defined by using "use strict" statement.

Syntax:
    <script type="text/javascript">
   
        "use strict";

        .... your logic ....

    </script>

- JavaScript support 2 types of browser code snippets.

    a) Legacy
    b) Modern

- Legacy contains old version related functions.
- Modern have latest version functions.
- If you are writing legacy functions for any older version application, then always
  enclose code in HTML comments.

        <!--    your comments    -->        HTML comments

         //  your comments        -->        JS Single line comments

        /*  
          ... your comments        -->         JS Multiline comments
        */

Syntax:
    <script type="text/javascript">
       
        <!--

            .... your code ....

        -->
   
    </script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript">
       <!--
         "use strict";
        function PrintPage(){
            window.print();
        }
        -->
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

External File:
- You can configure JS functions in a script file with extension ".js"
- So that you can access and use across pages.
- However using external file will increase number of requests for page and also page load time.

Syntax:
     print.js

     function PrintPage(){
         window.print();
     }

    <head>
        <script src="print.js"> </script>
    </head>
   
    <body>
        <button onclick="PrintPage()"> Print </button>
    </body>

Ex:
1. src/scripts/print.js

 <!--
         "use strict";
        function PrintPage(){
            window.print();
        }
 -->

2. Home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script type="text/javascript" src="../src/scripts/print.js">
     
    </script>
</head>
<body>
    <h2>Your Ticket</h2>
    <button onclick="PrintPage()">Print</button>
</body>
</html>

Note: You have to compress JavaScript file for production.
      It requires minification tools.

      https://www.toptal.com/developers/javascript-minifier

FAQ: What are the issues with JavaScript?
Ans:
      1. It is not a strongly typed language.
     
            var x = 10;        // x is number
            x = "A";            // x is string valid
            x = true;            // x is Boolean valid

      2. It is not implicitly strictly typed language.

      3. You need explicit strict mode to turn ON.

      4. It is not an OOP language, It supports only few features of OOP.

      5. It is not easy to extend.

      6. It is not having code level security.

      7. It can be blocked by browser.


FAQ: How to check the status of JavaScript in browser?
Ans:  By using  HTML <noscript> element.


Syntax:
    <body>
        <noscript> please enable JavaScript on your browser </noscript>
    </body>

Note: "TypeScript" is an alternative for JavaScript.  
       However browser can't understand directly typescript.
       It is trans compiled into JavaScript.

16/05
=====

Referring HTML elements using JavaScript:

1. BOM & DOM hierarchy
- JavaScript have Browser Object Model & Document Object Model.
- HTML page presents its elements in a DOM hierarchy.
- JavaScript can use the same hierarchy to access elements.

Syntax:
    window.document.forms[].elements[]
    window.document.images[]

    [ ]    => refers to a collection of elements starting with index 0.

- DOM reference is native for browser and faster in interaction.
- However referring index number is not good when design changes regularly. As you have to update index number every time when design changed.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            window.document.images[0].src = "../public/images/women-fashion.jpg";
            window.document.forms[0].elements[2].value = "Login";
            window.document.forms[1].elements[1].value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100">
    </div>
    <div>
        <form>
            <h3>User Login</h3>
            <input type="text" placeholder="User Name">
            <input type="password" placeholder="Password">
            <input type="button">
        </form>
    </div>
    <div>
        <form>
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button">
        </form>
    </div>
</body>
</html>

2. JavaScript can refer HTML elements using a reference name.
- Every element can have a reference name.

     <img name="pic">
     <form name="frmHome">
     <input name="btnLogin">

- You can access elements by using the name.

       pic.src="some_path";

- You can't access a generic child element without referring to its parent.

       buttonName.value="some" ;                // invalid
       formName.buttonName.value="some";        // valid

- Multiple elements in a page can have same name, this is leads to issues in referring.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            pic.src="../public/images/kids-fashion.jpg";
            frmLogin.btnLogin.value = "Login";
            frmRegister.btnRegister.value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100" name="pic">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" name="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" name="btnRegister">
        </form>
    </div>
</body>
</html>

3. JavaScript can refer elements by using "ID".

- Every element can have a reference ID.
    <img  id="pic">
    <input type="button" id="btn">

- You can access elements using ID reference, It requires a DOM method

     document.getElementById()

- You can access a child without referring to its parent.
- You can directly access any element.
- ID is used as a selector in CSS, where it can be common for multiple elements.
- This conflicts with JavaScript reference.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
           document.getElementById("pic").src = "../public/images/men-fashion.jpg";
           document.getElementById("btnLogin").value = "Login";
           document.getElementById("btnRegister").value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100" id="pic">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" id="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" id="btnRegister">
        </form>
    </div>
</body>
</html>

4. JavaScript can refer HTML elements using CSS selectors.

- CSS supports various types of selectors to refer HTML elements.
- JavaScript can directly use CSS selectors with
    "document.querySelector()"
- You can access any element directly.
- However same reference name issues will encounter while using selectors.

Syntax:
     <img>
     <input type="button"  id="btn">

     document.querySelector("img").src=""
     document.querySelector("#btn").value=""

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function BodyLoad(){
            document.querySelector("img").src = "../public/images/women-fashion.jpg";
            document.querySelector(".btnLogin").value = "Login";
            document.querySelector("#btnRegister").value = "Register";
        }
    </script>
</head>
<body onload="BodyLoad()">
    <div>
        <img width="100" height="100">
    </div>
    <div>
        <form name="frmLogin">
            <h3>User Login</h3>
            <input type="text" name="txtName" placeholder="User Name">
            <input type="password" name="txtPwd" placeholder="Password">
            <input type="button" class="btnLogin">
        </form>
    </div>
    <div>
        <form name="frmRegister">
            <h3>Register</h3>
            <input type="email" placeholder="Your Email">
            <input type="button" id="btnRegister">
        </form>
    </div>
</body>
</html>

                JavaScript Output & Input Techniques

17/05
=====

Reference Techniques
- DOM Hierarchy
- Name
- ID
- Query Selector

                       JavaScript Output & Input Techniques

Output Techniques:
1. alert()
2. confirm()
3. document.write()
4. textContent
5. innerHTML
6. innerText
7. outerHTML
8. console methods


alert():
- It is a window method.
- It pops up a message box in window.
- You can display any message or result of expression
- It can show static and dynamic values.
- It will not support formats for message. [RC type]
- It will not allow to cancel.
- It is closed only with OK as confirmation.

Syntax:
      alert("message | expression");
      alert("welcome");
      alert( 10 + 20 );
      alert( "Addition=" + (10 + 20));

- You can use "\n" for line breaks.

Syntax:
     alert("line-1 \n line2 \n line3");

- You can't use any markup as message.

      alert("<h2> Welcome </h2>");    // not formatted as heading

- You can't customize by adding, changing or removing elements in alert.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
            alert("Delete Record\nRecord Deleted Successfully");
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>






confirm():
- It is similar to alert but allows to cancel.
- It is a Boolean method that returns true or false.
   
        true        : on OK click
        false        : on Cancel click

Syntax:
    confirm("message | expression");     true / false

    result = confirm(" ");

    if(result == true)
    {
       // actions on OK
    }
    else
    {
      // actions on Cancel
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
               alert("Deleted Successfully..");
           } else {
               alert("Delete Canceled..");
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

document.write():
- It is an output method that renders output on a new screen of same page.
- It supports all formats including markup.
- It allows message or expression.

Syntax:
    document.write("message | expression  | <markup>");

- You can add line breaks using <br> element.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
               document.write("<h2><font color='red'>Deleted Successfully..</font></h2><br><a href='output.html'>Back</a>");
           } else {
               alert("Delete Canceled..");
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
</body>
</html>

textContent & innerText :
- These are the properties used for HTML elements that can display text.
- You can use for containers, semantic or non-semantic.
    <header> <nav> <h2> <p> <div> <span> etc.

- They don't support rich formats for text.
- They are RC type. Only plain text is allowed.
- "textContent" is a new option for modern browsers.

Syntax:
     document.querySelector("p").textContent = "message | expression";
     document.querySelector("div").innerText = "message | expression";

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").textContent = "Deleted Successfully..";
           } else {
                document.querySelector("p").innerText  = "Delete Canceled";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

innerHTML & outerHTML:
- They support rich formats.
- You can present using markup.
- innerHTML will display the result inside existing element. [as child]
- outerHTML will display the result by replacing existing element.

Syntax:
  document.querySelector("p").innerHTML = "<h2> Welcome </h2>";

        <p>
            <h2> Welcome </h2>
        </p>
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").outerHTML = "<h2>Deleted Successfully..</h2>";
           } else {
                document.querySelector("p").innerHTML  = "<h2>Delete Canceled</h2>";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

console methods:
- Console is a CLI tool [command line ]
- It is provided in browser debugging tools.
- It is used by developers to test they commands.
- You can use console methods to render output inside console.
- Usually developers use these methods for tracking errors, warnings, info etc.

    console.log()
    console.warn()
    console.error()
    console.info()
    console.debug()
    etc.

- All console methods are RC type.
- They don't support rich formats.
- Line breaks are defined using "\n".
- You can use a message or expression.

Syntax:
     console.log("message");
     console.warn("expression");

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function DeleteClick(){
           console.warn("Delete Clicked");
           console.log("Your record will be deteled soon");
           result = confirm("Delete Record\nAre your sure? Want to delete?");
           if(result==true){
                document.querySelector("p").outerHTML = "<h2>Deleted Successfully..</h2>";
                console.error("Delete Confirmed");
           } else {
                document.querySelector("p").innerHTML  = "<h2>Delete Canceled</h2>";
           }
        }
    </script>
</head>
<body>
    <button onclick="DeleteClick()">Delete</button>
    <p></p>
</body>
</html>

JavaScript Input Techniques
1. prompt()
2. query string
3. form input elements

prompt():
- It is a browser window method.
- It alerts an input box that allow user to input a value.

Syntax:
    prompt("your message",  "default_value");
    prompt("your message");

- It returns 3 results
    a) null     on  Cancel click with or without value
    b) '  '         on  OK click without value
    c) 'value'   on  OK click with value

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function SearchClick(){
          result =  prompt("Enter Search String", "eg: mobiles, watches");
          if(result==null) {
              alert("You canceled search");
          }else if(result=='') {
              alert("Please provide a search string\nIt can't be empty");
          } else {
              document.write("You are searching for : " + result);
          }
        }
    </script>
</head>
<body>
    <button onclick="SearchClick()">Search</button>
</body>
</html>

19/05
=====

JavaScript Output Techniques
JavaScript Input Techniques
1. prompt()

2. Query String
- It is configured in the URL.
- It allows to query any content in page directly from browser address bar.
- It is appended to page using "?".
- It is a key value collection.

        page.html ? key=value

- You can append multiple keys and values using "&".

        page.html ? key1=value1 & key2=value2 & key3=value3 ...

- You can access query string using  "location.search"  property.

        location        : object
        search        : property

- JavaScript provides  "URLSearchParams()" method that can convert query string
   into a key and value collection.

        collection = new URLSearchParams(location.search);

        collection.get("key1")
        collection.get("key2")

Ex:
1. Create a new page  "input.html"

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
       function bodyload(){
            collection = new URLSearchParams(location.search);
            document.querySelector("p").innerHTML = "Search Category : " + collection.get('category') + "<br>Searching For :" + collection.get('product');
       }
    </script>
</head>
<body onload="bodyload()">
    <p></p>
</body>
</html>

2. Type the following in address bar after page name

    input.html?category=Electronics&product=Mobiles

Ex:
1. Add following pages
    - register.html
    - result.html

2. register.html  uses a form that submits data to result.html

3. result.html uses body load to access and use the query string.

register.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h2>Register</h2>
    <form method="get" action="./result.html">
        <dl>
            <dt>Name</dt>
            <dd><input type="text" name="Name"></dd>
            <dt>Price</dt>
            <dd><input type="number" name="Price"></dd>
            <dt>City</dt>
            <dd>
                <select name="City">
                    <option>Select City</option>
                    <option>Delhi</option>
                    <option>Hyd</option>
                </select>
            </dd>
        </dl>
        <button>Submit</button>
    </form>
</body>
</html>

result.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function bodyload(){
            productDetails = new URLSearchParams(location.search);
            document.getElementById("lblName").textContent = productDetails.get("Name");
            document.getElementById("lblPrice").textContent = productDetails.get("Price");
            document.getElementById("lblCity").textContent = productDetails.get("City");
        }
    </script>
</head>
<body onload="bodyload()">
    <h2>Result</h2>
    <dl>
        <dt>Name</dt>
        <dd id="lblName"></dd>
        <dt>Price</dt>
        <dd id="lblPrice"></dd>
        <dt>City</dt>
        <dd id="lblCity"></dd>
    </dl>
    <a href="./register.html">Back to Register</a>
</body>
</html>


3. Input using Form input elements
- HTML form provides various input types like text, password, number, email, url, color, file, range etc.
- It also provides elements like select & textarea to input a value.
- JavaScript can use the input elements to access data dynamically from user.

Ex:
src/inox.js


function BookClick(){
    document.getElementById("btnContainer").style.display = "none";
    document.getElementById("summaryContainer").style.display = "block";


    movieName = document.getElementById("lstMovies").value;
    document.getElementById("lblMovie").textContent = movieName;

    if(movieName=="Mission Impossible"){
        document.getElementById("imgPoster").src = "../public/images/mi.jpg";
    } else {
        document.getElementById("imgPoster").src = "../public/images/final.jpg";
    }

    document.getElementById("lblCinema").textContent = document.getElementById("lstCinema").value;
    document.getElementById("lblDate").textContent = document.getElementById("lstDate").value;
    document.getElementById("lblTiming").textContent = document.getElementById("lstTiming").value;


}

function EditClick(){
    document.getElementById("lblTitle").textContent  = "Modify Booking";
    document.getElementById("btnBook").innerHTML = "Save";
    document.getElementById("btnBook").className = "btn btn-success";
}


js-examples/inox.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.js"></script>
    <script src="../src/scripts/inox.js"></script>
</head>
<body class="container-fluid">
    <div id="btnContainer" class="mt-4">
        <button data-bs-target="#toolbar" data-bs-toggle="modal"  class="btn btn-primary">Quick Booking</button>
    </div>
     <div class="modal fade" id="toolbar">
           <div class="modal-dialog modal-fullscreen">
              <div class="modal-content">
                  <div class="modal-header">
                      <h3 id="lblTitle">Quick Booking</h3>
                      <button class="btn btn-close" data-bs-dismiss="modal"></button>
                  </div>
                  <div class="modal-body">
                         <div class="d-flex justify-content-around">
                        <div>
                            <select class="form-select" id="lstMovies">
                                <option>Select Movie</option>
                                <option value="Mission Impossible">Mission Impossible:The Final</option>
                                <option value="Final Destination">Final Destination Bloodlines</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstDate">
                                <option>Select Date</option>
                                <option>Today, 19 May </option>
                                <option>Tomorrow, 20 May</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstCinema">
                                <option>Select Cinema</option>
                                <option>PVR Panjagutta </option>
                                <option>Inox B'hills</option>
                            </select>
                        </div>
                        <div>
                            <select class="form-select" id="lstTiming">
                                <option>Select Timing</option>
                                <option> 10:30 AM </option>
                                <option> 06:30 PM </option>
                            </select>
                        </div>
                        <div>
                            <button id="btnBook" onclick="BookClick()" data-bs-dismiss="modal" class="btn btn-primary">Book</button>
                        </div>
                    </div>
                  </div>
              </div>
           </div>
        </div>
      <div id="summaryContainer"  style="display: none;" class="w-25 mt-3 border border-1 rounded p-2">
          <h3 class="bi bi-ticket"> Booking Summary</h3>
          <img width="100%" height="200" id="imgPoster">
          <dl>
            <dt>Movie</dt>
            <dd id="lblMovie"></dd>
            <dt>Date</dt>
            <dd id="lblDate"></dd>
            <dt>Cinema</dt>
            <dd id="lblCinema"></dd>
            <dt>Timing</dt>
            <dd id="lblTiming"></dd>
          </dl>
          <button onclick="EditClick()" data-bs-target="#toolbar" data-bs-toggle="modal" class="btn btn-warning bi bi-pen-fill w-100"> Edit Booking </button>
      </div>
</body>
</html>

20/05
=====

JavaScript Language
1. Variables
2. Data Types
3. Operators
4. Statements
5. Functions


Variables:
- Variables are storage locations in memory where you can store a value and use it as a part of any expression.
- Variable configuration comprises of
    a) Declaration
    b) Assignment
    c) Initialization

- Declaration comprises of a keyword with name.

    keyword  variable_name;

 Note: Declaring variable is mandatory when JS is in strict mode.
       You can ignore declaration if it is not it strict mode.

- Variables in JS can be declared by using following keywords
    a) var
    b) let
    c) const

    var variableName;
    let  variableName;
    const variableName;

- Assignment is the process of configuring a value into variable after declaration.

    var x;        // declaring
    x=10;        // assignment
    x=20;        // assignment

- Initialization is the process of configuring a value into variable while declaring variable.

    var x = 10;    // initialization
    x = 20;        // assignment

FAQ: What is difference between var, let & const?

var:
- It configures a function scope for variable.
- You can declare in any block of a function and use from any another block inside function.
- It supports declaration, assignment and initialization.
- It supports shadowing.
- Shadowing is the process of re-declaring or re-initializing same name identifier again with in the specified scope.
       
        {
        var x = 10;        // initialization
        x = 20;            // assignment
        var x = 30;        // shadowing
        }
Ex:
<script>
     function f1()
     {
        var x;          // declaring
        x = 10;         // assigning
        if(x==10)
        {
            var y = 20;   // initialization
            y = 30;       // assignment
            y = 40;       // assignment
            var y = 50;   // Shadowing
        }
         document.write("x=" + x + "<br>y=" + y);
     }
     f1();
</script>

- It supports hoisting.
- Hoisting allows to use and later declare. There is no order dependency of declaring and using a variable.

Syntax:
    <script>
        x = 10;
        document.write("x=" + x);
        var x;    // hoisting
    </script>


let:
- It defines a block scope for variable.
- Block scope allows to access within the same block and in its inner block.
- It supports declaration, assignment and initialization.
- It will not support shadowing & hoisting.

Ex:
<script>
     "use strict";
     function f1()
     {
        let x;          // declaring
        x = 10;         // assignment
        if(x==10)
        {
           let y = 20;
           y = 30;      // assignment
           document.write("x=" + x + "<br>y=" + y);
        }
       
     }
     f1();
</script>

const:
- It configures a block scope for variable.
- It will allow only initialization.
- It will not allow declaring and assignment.
- It will not allow shadowing and hoisting.

Syntax:
    const x ;        // invalid
    const x = 10;    // valid
    x = 20;        // invalid

FAQ: Can we change a const ?
Ans: Yes. While initializing a new value can be sent into constant.

21/05
=====

Variables
- Declaring
- Assignment
- Initialization
- Shadowing
- Hoisting
- Keywords
    var, let, const

Variable Naming:
- Name must start with an alphabet or underscore "_" symbol.
- It can be alpha numeric with combination of numbers, but can't start with number.

    Syntax:
        var  sales2025;        // valid
        var  2025Sales;        // invalid    
        var  _sales;            // valid
        var  $sales;            // valid - but not recommended every time.
   
- The prefix "_" is used to specify that it is not for external use.
- The prefix "$" is used for library references. [ jQuery ]
- Variable name length can be up to 255 chars. [ Recommended ]
- Name can't be a keyword.

    Syntax:
        var  while;        // invalid
        var  class;        // invalid

- Names are case sensitive.

    Syntax:
        var  Form;
        var  form;            // both are different.

        var x = 10;
        var X = 20;
        console.log("x=" + x);    // 10

- Name must speak what it is.

    Syntax:
        var btnInsert;            // button for insert    
        var txtPassword;        // text box for password

- Name must be in camel case.

    Syntax:
        var   productPrice;
        var   studentName;


Declaration Scenarios:
1. Continuous set of references

    var  x, y, z;        // all 3 variables use var keyword.

    var  x; y, z;        // y & z are not declared.

    var x, y, z = 10;    // x=undefined, y=undefined, z=10

    var x = y = z = 10;    // invalid y and z not declared

    var x=10, y=20, z=30;   // valid  x=10, y=20, z=30

2. De-structure Declaration

    var [x, y, z] = [10, 20, 30];        // x = 10, y=20, z=30

    var [x, y, z] = [10];                // x = 10, y = undefined, z = undefined

    var [x, y, z] = 10;                // invalid  de-structure requires a set of values [ ]

    var x, y, z = [10];                // x = undefined, y=undefined, z = array [10]

    var x, y, z = [10,20,30];            // z = [10, 20, 30]    x=undefined, y=undefined


                           Data Types

- JavaScript is not a strongly typed language.
- It is implicitly typed or dynamically typed.
   
        var x = 10;        // x is number type
        x = "John";        // x changes to string
        x = true;            // x changes to Boolean

- Data type is all about the data structure.
- It defines the type of data, range of data and behavior of data.
- JavaScript data types are categorized into 2 groups

    1. Primitive Types
    2. Non Primitive Types

Primitive Types
- They are immutable types.
- They have fixed range for values.
- Value range can't change.
- They are stored in memory stack.
- Stack uses "LIFO" [ Last-In-First-Out ]
- JavaScript Primitive Types are

    1. Number
    2. String
    3. Boolean
    4. Null
    5. Undefined
    6. Big Int
    7. Symbol

JavaScript Number Type:
- Numeric type in JavaScript can be any one of the following
   
    Signed Integer         - 20
    Unsigned Integer           20
    Floating Point               20.42
    Double                450.34
    Decimal                   3400.34  [ 29 decimal ]
    Exponent               2e3     [ 2 x 10^3 ]  = 2000
    Binary                0b1010
    Hexadecimal             0x9311
    Octa                 0o745
    Big Int                938881122n

- Numbers can't be displayed exactly as defined, hence JavaScript provides several methods to display and format numbers.

    a) toFixed()        It sets fixed number of fractions.
    b) toPrecision()    It sets a number to fixed precision of digits.

Syntax:
        var  x = 4500.34;

        x.toFixed(2);            // 4500.34
        x.toPrecision(5);        // 4500.4
        x.toFixed(0);            // 4500

    c) toLocaleString()     It transforms into a regional string with various formats.
                     Regional string comprises of formats relative to numbers
                     currency, fractions etc.

FAQ: What is localization?
Ans:  Automatically formats numbers, date and time values according to country.

Syntax: Country

         var  price = 450000;
         price.toLocaleString('en-in');    // 4, 50, 000

Syntax:  Country with Currency
       
         price.toLocaleString('en-in', { style: "currency", currency: "INR" })

Ex:
<script>
     var x = 450000;
     document.write("X=" + x.toLocaleString('en-in', {style:"currency", currency:'INR'}));
</script>

Syntax:     Local with Percent

        var x = 0.785;
        x.toLocaleString('en-in', { style: "percent" });        // 79%

Syntax:  Local with Unit

    var speed = 110;
    speed.toLocaleStrign('en-in', { style: "unit", unit : "kilometer-per-hour"});  110 kph

Syntax: Notation Comact

    var views = 1000000;
    views.toLocaleString('en-us', { notation: "compact" });

22/05
=====

Number Type
- Methods
    toFixed()
    toPrecision()
    toLocaleString()
        - style [ currency, percent, unit ]
        - notation [ compact ]
        - region

Converting String to Number:
- JavaScript input techniques return all values in a string format.
- Number input will return a numeric string.
- You can convert numeric string to number by using parsing methods

    a) parseInt()            : for integer values
    b) parseFloat()        : for float, double and decimals

Note: You can convert only a numeric string, which must start with number.
       
            "33ABC"        valid
            "33AB44"        valid
            "AB33"        invalid
   
        parseInt("33ABC");        // 33
        parseInt("33AB44");    // 33
        parseInt("AB33");        // NaN

Ex:
<script>
    var age = parseFloat(prompt("Enter your age"));
    document.write("Your current age is " + age + "<br>");
    document.write("You will be " + (age+1) + " next year");
</script>
       
Verifying Number:
- JavaScript can verify numbers by using "isNaN()" method.
- It is a Boolean method that returns true if value is not a number.

Syntax:
    if(isNaN("A"))
    {
        // not a number;
    }

Ex:
<script>
    var age = parseFloat(prompt("Enter your age"));
    if(isNaN(age)){
        document.write("Age must be a number");
    } else {
        document.write("Your current age is " + age + "<br>");
        document.write("You will be " + (age+1) + " next year");
    }
   
</script>

Number Operators:
- JavaScript provides various operators to handle different types of number interactions.
- Operators include

        +        Addition
        -        Subtraction
        *        Multiplication
        /        Division
        %        Modulus Division
        **        Exponent [ power ]
        ++        Increment
        --        Decrement

Note:  The operator "**"  is a new from ES5+ version it is power value.
       
Ex:
<script>
    var x = parseInt(prompt("Enter an even number"));
    if(x % 2 == 0){
        document.write("x=" + x);
    } else {
        document.write("Only even number allowed");
    }
</script>

Global Scope for Variable:
- Variables a function or block scope when configured in a function.
- If you want a variable globally accessible to all functions then you can define in
  module scope.
- You can use var, let or const for declaring, assigning and initializing global variables.

Syntax:
    <script>
        // module scope
        var x=10;
        let y = 20;            => global variables
        const z = 30;
       
        function f1(){ }
        function f2(){ }
    </script>

Ex:
<script>
          var x = 10;
          let y = 20;
          const z = 30;

     function f1(){
         
          document.write("Function 1 : x=" + x + "y=" + y + "z=" + z + "<br>");
     }
      function f2(){
          document.write("Function 2 : x=" + x + "y=" + y + "z=" + z + "<br>");
     }
     f1();
     f2();
</script>

- You can configure a global variable inside function by using BOM window object.

        window.name = value;

- It is possible only when JavaScript is used in browser window.

Ex:
<script>
     "use strict";
          var x = 10;
          let y = 20;
          const z = 30;

     function f1(){
          window.a = 70;
          document.write("Function 1 : x=" + x + "y=" + y + "z=" + z + "a=" + a + "<br>");
     }
      function f2(){
          document.write("Function 2 : x=" + x + "y=" + y + "z=" + z + "a=" + a + "<br>");
     }
     f1();
     f2();
</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        var volume = 0;
        function Increase(){
            volume++;           // volume = volume + 1
            document.getElementById("volume").innerHTML = volume;
        }
        function Decrease(){
            volume--;           // volume = volume - 1
            document.getElementById("volume").innerHTML = volume;
        }
    </script>
</head>
<body>
    <button onclick="Increase()" class="bi bi-volume-up"></button>
    <span id="volume"></span>
    <button onclick="Decrease()" class="bi bi-volume-down"></button>
</body>
</html>

JavaScript Math library:
- You can't handle all operations directly using operators.
- A Math library is provides to handle complex operations on numbers.

    Math.PI
    Math.random()
    Math.round()
    Math.pow()
    Math.sin()
    Math.cos()
    Math.tan()
    Math.sqrt()
    Math.avg()
    Math.floor()
    Math.ceil()
    etc..

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function GenerateCode(){
            var code = Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10) + "&nbsp;" + Math.round(Math.random()*10);
            document.getElementById("lblCode").innerHTML = code;
        }
        function RefreshClick(){
            GenerateCode();
        }
    </script>
</head>
<body onload="GenerateCode()">
    <dl>
        <h3>User Login</h3>
        <dt>User Name</dt>
        <dd><input type="text"></dd>
        <dt>Password</dt>
        <dd><input type="password"></dd>
        <dt>Verify Code <button onclick="RefreshClick()" class="bi bi-arrow-clockwise"></button> </dt>
        <dd id="lblCode"></dd>
    </dl>
    <button>Login</button>
</body>
</html>

23/05
=====

Formatting Numbers
Parsing Numbers
Numeric Operators
Math Functions

Ex: EMI Calculator

1. src/scripts/emi.js


function handleAmountChange()
{
     document.getElementById("txtAmount").value = document.getElementById("rangeAmount").value;
}

function handleYearChange(){
    document.getElementById("txtYears").value = document.getElementById("rangeYears").value;
}

function handleRateChange(){
    document.getElementById("txtRate").value = document.getElementById("rangeRate").value;
}

function txtAmountChange(){
    document.getElementById("rangeAmount").value = document.getElementById("txtAmount").value;
}

function txtYearsChange(){
    document.getElementById("rangeYears").value = document.getElementById("txtYears").value;
}
function txtRateChange(){
    document.getElementById("rangeRate").value = document.getElementById("txtRate").value;
}

function CalculateClick(){
    var P = parseInt(document.getElementById("txtAmount").value);
    var N = parseInt(document.getElementById("txtYears").value) * 12;
    var R = parseFloat(document.getElementById("txtRate").value) / 12 / 100;
    var EMI = P * R * (Math.pow(1+R,N)) / (Math.pow(1+R,N) - 1);
    document.getElementById("lblResult").innerHTML = "Your montly installment amount is <span class='fw-bold fs-4'>" + Math.round(EMI).toLocaleString('en-in', {style:'currency', currency:'INR', minimumFractionDigits:0}) + "</span> for next " + N + " Months" ;
}


2.  js-examples/emi.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script src="../src/scripts/emi.js"></script>
</head>
<body class="container-fluid bg-secondary">
    <div class="bg-light text-dark p-4 m-4">
        <div class="h4 text-center">Personal Loan EMI Calculator</div>
        <div class="my-4 row">
            <div class="col">
                Amount you need &#8377; <input onchange="txtAmountChange()" type="text" id="txtAmount" size="16">
            </div>
            <div class="col">
                for <input type="text" size="2" onchange="txtYearsChange()" id="txtYears"> years
            </div>
            <div class="col">
                interest rate <input type="text" onchange="txtRateChange()" size="2" id="txtRate"> %
            </div>
        </div>
        <div class="row my-4">
            <div class="col">
                <input type="range" onchange="handleAmountChange()" step="10000" class="form-range" id="rangeAmount" min="100000" max="1000000" value="100000">
                <div>
                    <span>&#8377; 1,00,000</span>
                    <span class="float-end">&#8377; 10,00,000</span>
                </div>
            </div>
            <div class="col">
                <input type="range" onchange="handleYearChange()" class="form-range" id="rangeYears" min="1" max="5" value="1">
                <div>
                    <span>1 year</span>
                    <span class="float-end">5 years</span>
                </div>
            </div>
            <div class="col">
                <input type="range" onchange="handleRateChange()" class="form-range" id="rangeRate" min="10.45" max="18.45" value="10.45" step="0.1">
                <div>
                    <span>10.45%</span>
                    <span class="float-end">18.45%</span>
                </div>
            </div>
        </div>  
        <div class="row my-4">
            <div class="col text-end">
                <button onclick="CalculateClick()" class="btn btn-primary">Calculate</button>
            </div>
        </div>
        <div class="row my-4 text-center">
            <span id="lblResult"></span>
        </div>
    </div>
</body>
</html>

                            String Type

- String is a literal with a group of characters enclosed in quotes.
- JavaScript string can be enclosed with
    1. Double Quotes    " "
    2. Single Quotes    '  '
    3. Backticks         ` `
- String literal comprises of alphabet, number & special characters.
- Double and Single quotes can be used to switch between outer and inner string.

Syntax:
     var link  = "<a href='home.html'> Home </a>";
     var link  = '<a  href="home.html"> Home </a>';

- You have to use "+" to bind any dynamic value with a string.
- You can bind as prefix or suffix.

Ex:
<script>
     var username = prompt("Enter your name");
     var age = parseInt(prompt("Enter Age"));
     var msg1 = "Hello !" + "&nbsp;" + username + "&nbsp;" + "you will be" + "&nbsp;" + (age+1) + "&nbsp;" + "next year.";

     document.write(msg1);
</script>

- JavaScript ES5+ version introduces a data binding expression, which you can use in a string with backticks. It allows to embedded expression within string.

- Dynamic data binding expression of JavaScript is "${ }".

Syntax:
        ` string  ${dynamicValue | expression} string `;

Ex:
<script>
     var username = prompt("Enter your name");
     var age = parseInt(prompt("Enter Age"));
     var msg1 = "Hello !" + "&nbsp;" + username + "&nbsp;" + "you will be" + "&nbsp;" + (age+1) + "&nbsp;" + "next year.<br>";
     var msg2 = `Hello ! ${username} you will be ${age+1} next year.`;

     document.write(msg1);
     document.write(msg2);
</script>

- String representation with special characters may ignore several characters from printing as output.

        var path = "D:\images";        =>  D:images
       
- To print non-printable characters you have to use "\" as meta character.
   
        var path = "D:\\images";        => D:\images

Ex:
<script>
     var path = "\"d:\\images\"";

     document.write(path);
</script>

JavaScript String Formatting Methods:
- String formatting includes font, size, color, style etc.
- JavaScript provides various methods to format a string dynamically.

    bold()
    italics()
    fontsize()
    fontcolor()
    sup()
    sub()
    underline()
    strike()
    toUpperCase()
    toLowerCase() etc..

Syntax:
        var msg = "Welcome";
        msg.fontsize(4).fontcolor('green').bold().italics();

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username=="john") {
                lblName.innerHTML = "User Name Taken - Try Another".fontcolor('red').fontsize(2);
            } else {
                lblName.innerHTML = "User Name Available".fontcolor('green').fontsize(2).bold().italics();
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
</body>
</html>

26/05
=====

String Data Type
- Single Quote
- Double Quote
- Backtick
- Binding Expression ${ }
- Escape sequence using "\"
- String Formatting methods

JavaScript blur & key up events:
- Key up is used to verify every character immediately when key is released.
- Blur defines actions to perform when element looses the focus.

Syntax:
    <input type="text" onkeyup=""  onblur="">

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username=="john") {
                lblName.innerHTML = "User Name Taken - Try Another".fontcolor('red').fontsize(2);
            } else {
                lblName.innerHTML = "User Name Available".fontcolor('green').fontsize(2).bold().italics();
            }
        }
        function ChangeCase(){
            var code = document.getElementById("txtCode").value;
            document.getElementById("txtCode").value = code.toUpperCase();    
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
        <dt>Bank IFSC Code</dt>
        <dd><input type="text" id="txtCode" onblur="ChangeCase()"></dd>
    </dl>
</body>
</html>

                        String Manipulation

1. length         : It returns the total count of chars in a string.

Syntax:
    var str = "Welcome";
    str.length;            // 7
   
Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var userName = document.getElementById("txtName").value;
            var lblNameError = document.getElementById("lblNameError");

            if(userName.length==0) {
                lblNameError.innerHTML = "User Name Required".fontcolor('red');
            } else {
                if(userName.length<4) {
                    lblNameError.innerHTML = "Name too short - Min 4 chars required".fontcolor('red');
                } else {
                    lblNameError.innerHTML = "";
                }
            }
        }
        function VerifyChars(){
            var comments = document.getElementById("txtComments").value;
            var lblComments = document.getElementById("lblComments");

            lblComments.innerHTML = `${100-comments.length} chars left`;
        }
    </script>
</head>
<body>
    <dl>
        <dt>Your Name</dt>
        <dd><input type="text" onblur="VerifyName()" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblNameError"></dd>
        <dt>Your Comments</dt>
        <dd>
            <textarea rows="4" onkeyup="VerifyChars()" maxlength="100" cols="40" id="txtComments"></textarea>
        </dd>
        <dd id="lblComments"></dd>
    </dl>
</body>
</html>

2. charAt()        : It returns the character at specified index.

Syntax:
    var name = "Ajay";
    name.charAt(0);        // A

   Note: Characters index in a string starts with zero.

3. charCodeAt()    : It returns the ASCII code of character at specified index.
                  A=65, Z=90, a=97, z=122

Syntax:
    var name = "Ajay";
    name.charCodeAt(0);        // 65

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var lblName = document.getElementById("lblName");

            if(username.charCodeAt(0)>=65 && username.charCodeAt(0)<=90){
                lblName.innerHTML = "";
            }else {
                lblName.innerHTML = "Name must start with uppercase letter".fontcolor('red');
            }
           

        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onblur="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
</body>
</html>

4. startsWith()        : It returns true if string is starting with specified char(s).

5. endsWith()        : It returns true if string is ending with specified char(s).

Syntax:
      var str = "Welcome to JavaScript";
      str.endsWith("Java");                // false
      str.endsWith("Script");                // true
      str.startsWith("W");                // true
      str.startsWith("w");                // false

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        function VerifyCard(){
            var card = document.getElementById("txtCard").value;
            var imgCard = document.getElementById("imgCard");

            if(card.startsWith("4455")) {
                imgCard.src = "../public/images/visa.jpg";
            } else {
                imgCard.src = "../public/images/master.jpg";
            }
        }
        function VerifySkype(){
            var skype  = document.getElementById("txtSkype").value;
            var lblSkype = document.getElementById("lblSkype");
            if(skype.endsWith("outlook.com")){
                lblSkype.innerHTML = "";
            } else {
                lblSkype.innerHTML = "Invalid Skype Profile".fontcolor('red');
            }
        }
    </script>
</head>
<body class="container-fluid">
    <dl class="mt-4 w-25">
        <dt>Your Card Number</dt>
        <dd class="input-group"><input maxlength="16" onblur="VerifyCard()" type="text" class="form-control" id="txtCard"> <img id="imgCard" width="80" height="40" class="input-group-text"> </dd>
        <dt class="bi bi-skype"> Your Skype ID</dt>
        <dd>
            <input type="text" onblur="VerifySkype()" id="txtSkype" class="form-control">
        </dd>
        <dd id="lblSkype"></dd>
    </dl>
</body>
</html>

6. trimStart()        : It removes the leading spaces that occur at the beginning of string.

7. trimEnd()        : It removes the leading spaces that occur at the end of string.

8. trim()            : It removes all leading spaces. [start & end]

Syntax:
     var str = "  ab";
     str.trim();            // "ab"
     
Ex:
<script>
     var password = prompt("Enter your password");
     if(password.trim()=="admin"){
        document.write("Login Success..");
     } else {
        document.write("Invalid Password");
     }
</script>

9. split()        : It splits a string at specified char and returns an array of string.
              It requires a delimiter [separator] to split string.

Syntax:
    var  str = "Welcome to JavaScript";
    str.split(' ')[0];            // Welcome
    str.split(' ')[2];            // JavaScript

Ex:
<script>
     var contacts = "John-9848483828, David-882112345";
     var users = contacts.split(',');
     var [john, david] = users;
     document.write(`John Mobile Number ${john.split('-')[1]}<br>`);
     document.write(`David Mobile Number ${david.split('-')[1]}`);
</script>

10. replace()           :It replaces the first occurrence char with a new character(s) in string.

11. replaceAll()    : It replaces all occurrences with a new char(s).

Syntax:
    str.replace("old", "new");

Ex:
<script>
     var menu = "Home Electronics Mobiles Apple iPhone16";
     document.write(menu.replaceAll(' ', ' > ') + "<br>");
     document.write(menu.replace("Apple", "AppleMobiles"));
</script>

27/05
=====

String Handling Members [ Property & Methods ]
1. length
2. charAt()
3. charCodeAt()
4. startsWith()
5. endsWith()
6. split()
7. trimStart()
8. trimEnd()
9. trim()
10. replace()
11. replaceAll()

12. indexOf()        : It returns the index number of specified character in string.
                  It returns the first occurrence index number.
                  If give character is not found then it returns "-1".


13. lastIndexOf()    : It returns the last occurrence index number of specified char.

Syntax:
     var str = "Welcome";
     str.indexOf("e");            // 1
     str.lastIndexOf("e");        // 6
     str.indexOf("j");            // -1

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function VerifyEmail(){
               var email = document.getElementById("txtEmail").value;
               var lblError = document.getElementById("lblError");
               if(email.indexOf("@")==-1){
                    lblError.innerHTML = "Invalid Email - Please include @".fontcolor('red');
               } else {
                    lblError.innerHTML = "";
               }
          }
     </script>
</head>
<body>
     <dl>
          <dt>Your email</dt>
          <dd><input type="text" onblur="VerifyEmail()" id="txtEmail"></dd>
          <dd id="lblError"></dd>
     </dl>
</body>
</html>

14. slice()        : It returns the chars between specified index.
                  It contains a start and end index.
                  The end index must be greater than the start index.

Syntax:
    str.slice(startIndex, endIndex);
    str.slice(startIndex);            // it reads up to end


15. substr()        : It returns the specified number of chars from given index.
                  The number of chars must be above zero [0].

Syntax:
    str.substr(startIndex, count_of_chars);
    str.substr(startIndex);                    // it reads up to end

16. substring()        : It returns the chars between given index.
                  It is bi-directional in reading.
                  It can read from specified position to the start or to the end.

Syntax:
    str.substring(startIndex, endIndex);
    str.substring(startIndex);                // it reads up to end

FAQ: What is difference between substr(), substring() & slice()?

Ex:
<script>
     var str = "Welcome to JavaScript";
     document.write(str.substring(7,0) + "<br>");        // Welcome
     document.write(str.substring(7,15) + "<br>");        // to Java
     document.write(str.substring(7) + "<br>");        // to JavaScript
 
</script>

Task:
    var email = prompt("Enter your email");
    var domain = ?         gmail.com, nareshit.in
    var id = ?            john_nit2, sam

    john_nit2@gmail.com
    sam@nareshit.in

Ex: using split

<script>
     var email = prompt("Enter your email");
     var [id, domain] = email.split('@');
     document.write(`Id=${id}<br>Domain=${domain}`);
</script>

Ex:
<script>
     var email = prompt("Enter your email");
     var atPos = email.indexOf("@");
     var id = email.slice(0,atPos);
     var domain = email.slice(atPos+1);
     document.write(`Id=${id}<br>Domain=${domain}`);
</script>


17. match()        : It is used to compare a string with regular expression.
                  Regular expression is built by using meta chars and quantifiers.
                  Regular expression is written in "/  /".

Syntax:
     str.match(/expression/)        => true if matching with expression

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
     <script>
          function VerifyPassword(){
               var password = document.getElementById("txtPwd").value;
               var progressBar  = document.getElementById("progressBar");

               var regExp = /(?=.*[A-Z])\w{4,15}/;
               if(password.match(regExp)){
                    lblPwd.innerHTML = "Strong Password";
                    progressBar.style.width = "100%";
                    progressBar.className = "bg-success text-white progress-bar progress-bar-animated progress-bar-striped";
               } else {
                    if(password.length<4){
                         lblPwd.innerHTML = "Poor Password";
                         progressBar.style.width = "30%";
                         progressBar.className = "bg-danger text-white progress-bar progress-bar-animated progress-bar-striped";
                    } else {
                         lblPwd.innerHTML = "Weak Password";
                         progressBar.style.width = "70%";
                         progressBar.className = "bg-warning text-white progress-bar progress-bar-animated progress-bar-striped";
                    }
               }
          }
          function VerifyMobile(){
               var mobile = document.getElementById("txtMobile").value;
               var lblMobile = document.getElementById("lblMobile");
               var regExp = /\+91\d{10}/;
               if(mobile.match(regExp)){
                    lblMobile.innerHTML = "";
               } else {
                    lblMobile.innerHTML = "Invalid Mobile +91 & 10 digits required".fontcolor('red');
               }
          }
     </script>
</head>
<body class="container-fluid">
     <dl class="mt-4 w-25">
          <dt>Your Password</dt>
          <dd><input type="password" class="form-control" onkeyup="VerifyPassword()" id="txtPwd"></dd>
          <dd class="progress">
               <div id="progressBar">
                    <span id="lblPwd"></span>
               </div>
          </dd>
          <dt>Mobile Number</dt>
          <dd>
               <input type="text" id="txtMobile" class="form-control" onblur="VerifyMobile()">
          </dd>
          <dd id="lblMobile"></dd>
     </dl>
</body>
</html>

Summary:
1. Number
2. String
3. Boolean

28/05
=====

3. Boolean Type
 - Boolean is used in decision making.
 - JavaScript Boolean contains true or false as value.
     
Syntax:
        var stock = true;

 - Boolean can be verified using true or false keywords or by using 0 & 1.
   0=false
   1=true

         if(stock==1)            // not good
        {
        }

        if(stock==true)            // good
        {
        }
Ex:
<script>
    var stock = true;
    if(stock==true){
        document.write("In Stock");
    } else {
        document.write("Out of Stock");
    }
</script>

- HTML Boolean attributes are controlled dynamically using Boolean type.

        - disabled
        - readonly
        - required
        - checked
        - selected
        - open etc..

Syntax:
    document.querySelector("button").disabled = true/false;
    document.querySelector("dialog").open = true / false;

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyName(){
            var username = document.getElementById("txtName").value;
            var btnSubmit = document.getElementById("btnSubmit");
            var lblName = document.getElementById("lblName");
            if(username.length==0){
                btnSubmit.disabled = true;
                lblName.innerHTML = "User Name Required".fontcolor('red');
            } else {
                btnSubmit.disabled = false;
                lblName.innerHTML = "";
            }
        }
    </script>
</head>
<body>
    <dl>
        <dt>User Name</dt>
        <dd><input type="text" onkeyup="VerifyName()" id="txtName"></dd>
        <dd id="lblName"></dd>
    </dl>
    <button id="btnSubmit" disabled>Submit</button>
</body>
</html>

- Decision making requires Boolean operators, which are comparison and logical operators.

Comparison Operators:
   
        ==            Equal
        ===            Identical Equal
        !=            Not Equal
        !==            Not Identical
        >            Greater than
        >=            Greater than or Equal
        <            Less than
        <=            Less than or equal

Logical Operators
       
        &&            AND
        ||            OR
        !            Not

FAQ: What is difference between "=="  &  "===" ?
Ans:  "==" can compare values of different data types.
     "===" can compares only the values of same data type.

Syntax:
        "10" == 10;        // true
        "10" === 10;        // false         // it is recommended in modern JS.

     Note:  "===" is also known as strict equal


FAQ: What is the purpose of Logical AND & OR ?
Ans : They are used to bind multiple Boolean expressions.
      "AND &&" will return true if all expressions evaluate to true.
      "OR  || " will return true if any one expression evaluates to true.

Syntax:
       expression-1  &&  expression-2  && expression-3;     // true when all are true.
                                                    false if any one if false.

       expression-1 ||  expression-2 || expression-3;    // true when any one is true.
                                               false when all are false.

Syntax:
      (10 > 2) &&  (10 > 5)  &&  (10 > 14);            // false
      (10 > 2) || (10 > 5)  || (10 > 14);                // true
     
       
- Boolean value and operators are handled by using decision making statements and operators.
- Decision making operator is "?:"  ternary operator.

        ( condition ) ? true : false

        if (condition)
        {
         true;
        }
       else
       {
        false;
       }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        function SortToggle(){
            var btnSort = document.getElementById("btnSort");
            btnSort.className = (btnSort.className==="bi bi-sort-alpha-down")?"bi bi-sort-alpha-up":"bi bi-sort-alpha-down";
        }
        function ShowClick(){
            var btnShow = document.getElementById("btnShow");
            btnShow.className = (btnShow.className==="bi bi-eye")?"bi bi-eye-slash":"bi bi-eye";
            var txtPwd = document.getElementById("txtPwd");
            txtPwd.type = (txtPwd.type==="text")?"password":"text";
        }
        function ToggleQuestion(){
            var q1 = document.getElementById("q1");
            q1.className = (q1.className==="d-none")?"d-block":"d-none";
            var icon = document.getElementById("icon");
            icon.className = (icon.className==="bi bi-plus")?"bi bi-dash":"bi bi-plus";
        }
    </script>
</head>
<body class="container-fluid">
    <h2>Toggle</h2>
    <button id="btnSort" class="bi bi-sort-alpha-down" onclick="SortToggle()"></button>
    <h2>Password</h2>
    <input type="text" id="txtPwd"> <button onclick="ShowClick()" id="btnShow" class="bi bi-eye"></button>
    <h2>Accordion</h2>
    <button onclick="ToggleQuestion()" class="btn btn-dark w-100 d-flex justify-content-between"><span>What is Netflix?</span><span id="icon" class="bi bi-plus"></span></button>
    <div id="q1" align="justify" class="d-none">
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident repellat qui obcaecati! Id dicta in delectus culpa, incidunt praesentium aliquid molestias cupiditate natus rerum. Delectus veniam sint esse vero doloribus. Lorem ipsum dolor sit amet consectetur adipisicing elit. Debitis magni neque reiciendis incidunt veniam, maiores voluptatem modi illum facilis minima eius commodi ipsa est autem rem laborum. Ipsum, sint sed.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellat enim, ea deleniti fugit autem, assumenda quasi sunt non nobis ipsam rerum debitis ex voluptatibus, excepturi iusto soluta iure aliquam recusandae! Lorem ipsum dolor sit amet, consectetur adipisicing elit. Error, nulla reiciendis odit aperiam ex vitae magni quia. Adipisci, eum debitis, expedita odio unde alias earum facere commodi cum perferendis molestias?</p>
    </div>
</body>
</html>

Ex: Checkbox toggle

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
       function CheckedChange(){
        var optShow = document.getElementById("optShow");
        var imgPoster = document.getElementById("imgPoster");
        imgPoster.className = (optShow.checked)? "d-block": "d-none";
        var lblShow = document.getElementById("lblShow");
        lblShow.innerHTML = (lblShow.innerHTML==="Show")?"Hide":"Show";
       }
    </script>
</head>
<body class="container-fluid">
    <h2>Check</h2>
    <input type="checkbox" onchange="CheckedChange()" id="optShow"> <label id="lblShow">Show</label>
    <div id="imgPoster" class="d-none">
        <img src="../public/images/women-fashion.jpg" width="200" height="200">
    </div>
</body>
</html>

- Decision Making Statements are required to handle multiple conditions and hierarchy of statements.
- JavaScript decision making statements are defined using
   
        if, else, switch, case, default

The IF statement:
- It is a decision making statement.
- It have multiple forms, which include
   
        a) Forward Jump
        b) Simple Decision
        c) Multi Level Decisions
        d) Multiple Choices / Decisions

Forward Jump :
- It is a decision making approach where it continues to next only when the current condition evaluates to true.
- It will not provide any alternative.

Syntax:
        if (condition)
        {
           statements on true;
        }

29/05
=====

Boolean Type
- Comparison Operators
- Logical Operators
- Ternary Operator
- How to toggle content
- Decision Making Statements
- The IF statement
    a) Forward Jump

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function VerifyCard(){
            var card = document.getElementById("card").value;
            if(card==="4444555566667890") {
                document.getElementById("cvvContainer").style.display = "block";
            }
        }
        function VerifyCvv(){
            var cvv = document.getElementById("cvv").value;
            if(cvv==="2345"){
                document.getElementById("expiryContainer").style.display = "block";
            }
        }
        function VerifyExpiry(){
            var expiry = document.getElementById("expiry").value;
            if(expiry==="2026"){
                document.getElementById("btnPay").disabled = false;
            }
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>Payment Details</legend>
        <dl>
            <dt>Card Number</dt>
            <dd><input type="text" onblur="VerifyCard()" id="card" size="16" maxlength="16"></dd>
            <div id="cvvContainer" style="display: none;">
                <dt>CVV</dt>
                <dd><input type="text" onblur="VerifyCvv()" id="cvv" size="4"></dd>
            </div>
            <div id="expiryContainer" style="display: none;">
                <dt>Expiry</dt>
            <dd>
                <select id="expiry" onchange="VerifyExpiry()">
                    <option>Select Expiry</option>
                    <option>2025</option>
                    <option>2026</option>
                    <option>2027</option>
                </select>
            </dd>
            </div>
        </dl>
        <button id="btnPay" disabled>Pay</button>
    </fieldset>
</body>
</html>

b) Simple Decision
- It is a decision making approach where single alternative is provided.
- The alternative clause is "else".

Syntax:
    if (condition)
    {
       statement on true;
    }
    else
    {
      statement on false;
    }


c) Multi Level Decisions
 - It implements forward jump approach as it verifies the next condition only when current evaluates to true.
- It is good in verifying individual references instead of verifying all expressions simultaneously at the same time.
- It is more clear in reporting issues in conditions.

Syntax:
    if(condition-1)
    {
         if(condition-2)
         {
         statement on both conditions true;
         }
        else
        {
        statement on condition 2 false;
        }
    }
    else
    {
       statement of condition-1 false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function LoginClick(){
            var username = document.getElementById("txtName").value;
            var password = document.getElementById("txtPwd").value;
            var msg = document.getElementById("msg");
            if(username.length===0){
                msg.innerHTML = "User Name Required".fontcolor('red');
                } else {
                    if(username==="john_nit"){
                        if(password.length===0){
                            msg.innerHTML = "Password Required".fontcolor('red');
                        }else {
                            if(password==="john111"){
                                document.write("Login Success..");
                            } else {
                                msg.innerHTML= "Invalid Password".fontcolor('red');
                            }
                        }
                } else {
                    msg.innerHTML = "Invalid User Name".fontcolor('red');
                }
            }
           
        }
    </script>
</head>
<body>
    <fieldset>
        <legend>User Login</legend>
        <dl>
            <dt>User Name</dt>
            <dd><input type="text" id="txtName"></dd>
            <dt>Password</dt>
            <dd><input type="password" id="txtPwd"></dd>
        </dl>
        <button onclick="LoginClick()">Login</button>
        <br><br>
        <div id="msg" align="center"></div>
    </fieldset>
</body>
</html>

d) Multiple Choices
- It is a decision making approach that provides multiple alternatives.
- All alternatives are defined using "else if" clause.

Syntax:
    if(condition-1)
    {
       statement on condition-1 true;
    }
    else if(condition-2)
    {
       statement on condition-2 true;
    }
    else
    {
      statement on all conditions false;
    }

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <script>
        var flag = "";
        var email = "john_nit@gmail.com";
        var mobile = "+919876543211";

        function ToggleContainers(){
            document.getElementById("userContainer").style.display = "none";
            document.getElementById("pwdContainer").style.display = "block";
        }

        function ContinueClick(){
            var user = document.getElementById("txtUser").value;
            var userError = document.getElementById("userError");
            if(user===email){
                flag = `Your email ${email} verified successfully - Activation link sent`;
                ToggleContainers();
            }
            else if(user===mobile) {
                flag = `Your mobile ${mobile} verified Successfully - OTP Sent`;
                ToggleContainers();
            }
            else {
                userError.innerHTML = `${user} doesn't exist`;
            }
        }
        function LoginClick(){
            var password = document.getElementById("txtPwd").value;
            if(password==="john@123"){
                document.write(`<h2>${flag}</h2>`);
            } else {
                document.getElementById("pwdError").innerHTML = "Invalid Password";
            }
        }
    </script>
</head>
<body class="container-fluid d-flex justify-content-center">
    <div class="mt-4 border border-1 p-4" style="width: 400px;">
        <div class="fs-3">Sign in or create account</div>
        <div id="userContainer">
            <label class="form-label fw-bold mt-4"> Enter mobile number or email </label>
            <div>
                <input type="text" id="txtUser" class="form-control">
                <div id="userError" class="text-danger"></div>
            </div>
            <div class="mt-3">
                <button onclick="ContinueClick()" class="btn btn-warning w-100">Continue</button>
            </div>
        </div>
        <div id="pwdContainer" style="display: none;">
             <label class="form-label fw-bold mt-4"> Your password </label>
            <div>
                <input type="password" id="txtPwd" class="form-control">
                <div id="pwdError" class="text-danger"></div>
            </div>
            <div class="mt-3">
                <button onclick="LoginClick()" class="btn btn-warning w-100">Login</button>
            </div>
        </div>
    </div>
</body>
</html>

Summary
- Forward Jump
- Simple Decision
- Multiple Choices
- Multi Level Decisions

                        The "Switch" Selector
- Switch is used to interrupt the flow of electrons in a circuit.
- Switches are classified into various types
    a) toggle switch
    b) push button switch
    c) joy stick switch
    d) selector switch
        etc..

30/05
=====

Switch Case
Syntax:
    switch( value | expression )
    {
      case  value | expression:
        statements;
        jump;
     default:
        statements when case mismatch;
        jump;
    }

Ex:
<script>
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two");
        break;
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
</script>

FAQ's:
1. Can we define switch without default?
A. Yes.

2. Can we define "default" before or between cases?
A. Yes. There is no order dependency.

3. If multiple cases are matching with value then which one will execute?
A. The first occurrence block will execute.

4. Can we define case without jump? (break)
A. Yes. It continues to next block and stops when next break occurs.

Ex:
<script>
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
       
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two<br>");
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
</script>

5. Can we use "return" as jump statement?
A. Yes.

6. What is difference between "break" & "return" ?
A. "break" ends the block but continue with the function.
    "return" terminates the block and compiling process.

Ex:
<script>
    function f1(){
    var n = parseInt(prompt("Enter Number"));
    switch(n)
    {
       
        case 1:
        document.write("One");
        break;
        case 2:
        document.write("Two<br>");
        return;
        case 3:
        document.write("Three");
        break;
        case 4:
        document.write("Four");
        break;
        default:
        document.write("Please enter value from 1 to 4 only");
        break;
    }
    }
    f1();
</script>

7. How to configure same block for multiple cases?
A. By writing multiple cases for same set of statements.

    case 1:
    case 2:
    case 3:
        statements;
        break;
   
Ex:
<script>
    function f1(){
      var choice = prompt("Enter a string");
      switch(choice)
      {
           case "red":
           case "green":
           case "blue":
            document.write(`You selected ${choice} color`);
            break;
           case "apple":
           case "mango":
            document.write(`Your selected ${choice} fruit`);
            break;
           default:
            document.write(`Please provide color or fruit name from given list`);
            break;
           
      }
    }
    f1();
</script>

Ex:
<script>
    function f1(){
      var choice = prompt("Enter a choice y or n");
      switch(choice)
      {
           case "y":
           case "Y":
           document.write("You selected YES to continue");
           break;
           case "n":
           case "N":
           document.write("You select NO to stop");
           break;
           default:
           document.write(`Please enter y or n only`);
           break;
      }
    }
    f1();
</script>


8. How to define same block of statements for a range of values?
A. You can configure range using Boolean expression.
     If case is using a Boolean expression then the switch value must be always true.

Syntax:
    switch(true)
    {
      case (Boolean_Expression):
        statements;
        jump;
    }

<script>
    function f1(){
      var n = parseInt(prompt("Enter a number"));
      switch(true)
      {
           case (n>=1 && n<=10):
           document.write(`Your number ${n} is between 1 to 10`);
           break;
           case (n>=11 && n<=20):
           document.write(`Your number ${n} is between 11 to 20`);
           break;
      }
    }
    f1();
</script>

Ex: Verify Mobile

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../node_modules/bootstrap/dist/css/bootstrap.css">
    <link rel="stylesheet" href="../node_modules/bootstrap-icons/font/bootstrap-icons.css">
    <script>
        var regExp = / /;
        var tip = "";
        function CountryChange(){
            var flag = document.getElementById("imgFlag");
            var countryname = document.getElementById("lstCountries").value;
            var mobile = document.getElementById("txtMobile");
            switch(countryname)
            {
                case "India":
                regExp = /\+91\d{10}/;
                tip = "+91 and 10 digits";
                flag.src = "../public/images/ind.png";
                break;
                case "US":
                regExp = /\+\(1\)\(\d{3}\)\s\d{4}-\d{4}/;
                tip = "+(1)(000) 0000-0000";
                flag.src = "../public/images/us.png";
                break;
                case "UK":
                regExp = /\+\(44\)\(\d{2}\)\s\d{3}\s\d{4}/;
                tip = "+(44)(00) 000 0000";
                flag.src = "../public/images/uk.jpg";
                break;
            }
            mobile.placeholder = tip;
        }

        function VerifyClick(){
            var mobile = document.getElementById("txtMobile").value;
            if(mobile.match(regExp)) {
                document.write("<h2>Mobile Verified Successfully..<h2>");
            } else {
                document.getElementById("lblMobile").innerHTML = `Invalid Mobile : ${tip}`;
            }

        }
    </script>
</head>
<body class="container-fluid">
   <h3>Verify Your Mobile</h3>  
   <dl class="w-25">
    <dt>Your country </dt>
    <dd class="input-group">
        <select class="form-select" onchange="CountryChange()" id="lstCountries">
            <option>Select Country</option>
            <option>India</option>
            <option>US</option>
            <option>UK</option>
        </select>
        <img class="input-group-text" id="imgFlag" width="60" height="40">
    </dd>
    <dt>Mobile Number</dt>
    <dd>
        <input type="text" id="txtMobile" class="form-control">
    </dd>
    <dd id="lblMobile" class="text-danger"></dd>
    <button onclick="VerifyClick()" class="btn btn-warning mt-3 w-100">Verify Mobile</button>
   </dl>

</body>
</html>

                          Undefined Type
- JavaScript is implicitly typed language.
- The data type is determined according to the value initialized or assigned.
- If value is not defined at compile time then the compiler sets it to "undefined".

Syntax:
    var x;
    console.log(x);        // undefined

- You can verify value by using "undefined" keyword.

Syntax:
    if (x === undefined)        // Not good
    {
    }

    if(x)                        // Good - returns true if defined with value
    {
    }

Ex:
<script>
    var price;
    if(price){
        document.write(`Price=${price}`);
       
    } else {
        document.write("Price not defined");
    }
</script>

FAQ: What is difference between undefined & not defined?
Ans : Undefined is about the value and not defined about the reference memory.
         
   
                            Null
- It specifies that value is not provided at runtime of application.
- At compile time if value is not defined then it uses "undefined".
- Null is for dynamic values.

Syntax:
var x = prompt("enter value");        string | null


Summary: Primitive
1. number
2. string
3. Boolean
4. null
5. undefined
6. big int
7. symbol

                          Non Primitive Types

31/05
=====

Non Primitive Types
- They are mutable types.
- They don't have a fixed range for value, it varies according to memory available.
- They are stored in memory heap.
- Heap allows to access random, there is no order of accessing.
- JavaScript non primitive types are
    a) Array
    b) Object
    c) Map


                             Array
- Arrays are used in computer programming to reduce overhead and complexity.
- Arrays reduce overhead by storing values in a sequential order.
- Arrays reduce complexity by storing multiple values under one name.
- Array can handle various data types in a sequence, how ever is not possible for few technologies.

- Array size can change dynamically, which is again an issue for few technologies.

- Array refers to a type of arrangement, where every sequence have an meaningful order, however it allows to access in random order.

Configuring Array:

1. Array is declared with a keyword and name.

    - You can use var, let and const for declaring array.
    - Name refers to a variable name.

    var  products;

2. Array requires assignment or initialization of memory for multiple values.

    - Multiple values are configured using 2 techniques

        a) [ ]            meta character
        b) Array()        constructor

        var  products = [ ];            // initialization
        var  products = new Array();    // initialization

                    (or)
       
        var products;
        products = [ ];                // assignment
       
        var products;
        products = new Array();        // assignment

FAQ: What is difference between "[ ]" meta character & "Array()" constructor.
Ans:  Array meta character [] configures a static memory, which is a continuous
     memory.

     Array constructor  "Array()" configures a dynamic memory, which is discreet
     memory.

Note: "new" is dynamic memory allocating operator.


Storing and Reading elements from Array:

- Elements in array are stored with reference of a property that maps to memory index.
- Property is a string type mapping to index, which is number type.

        "0"              => 0
        property        => index

    values[0] = 10;        // valid
    values["1"] = 20;        // valid

- Array element can be any type
    a) primitive type
    b) non primitive type
    c) function type

EX:
<script>
     var values = [10, true, "A", ["Delhi", "Hyd"], function (){document.write("Welcome to arrays")}];

     document.write(values[3][1] + "<br>");

     values[4]();
     
</script>?/07
=====

Features of React:
1. It uses "Virtual DOM".
	- It is a copy of actual DOM in memory.
	- Application update the virtual DOM and later commits with actual DOM.
	- It makes the rendering appear faster than normal. 

2. It is component based.
	- It enables easy reusability.
	- Easy to extend
	- Make loosely coupled and extensible.
	- Easy to test 

3. Modular Approach 
	- It uses only what is required for application.
	- Application specific framework or library.
	- It makes application light weight and faster.

4. Server Side Rendering with Framework like Next JS
	- Components can pre-render on server.
	- This makes server side interactions faster.

Issues with React:
1. It is not designed for what you are using.
2. Hence lot of GAP's.
3. You need lot of 3rd party plugins. 
4. Pace of development is very fast.
5. No proper documentation. 


Using React in existing web application:

1. Download and Install  Node JS on your PC

2. Download and Install Visual Studio Code Editor

3. Install Live Server plugin for VS code

4. Create a new project folder

		D:\web-app

5. Open in VS code

6. Create the file system for traditional web application

	> npm  init  -y			[ package.json ]

		D:\web-app
		|
		|_package.json
		|_public
		|_src
		|_readme.md

7. Add pages 

		index.html		// at root level
		home.html		// in public folder

8. React up to version 18x provides a legacy library to import and use in page.
	- React requires 3 basic libraries
		a) react
		b) react-dom
		c) babel
	- "react" is a core library that provides access to all react services.
	- "react-dom" is virtual DOM library.
	- "babel" is a JavaScript compiler used for React.

Note: You can use CDN links from official sources. 
	  You can also download using package managers.

Version 17x & 18x:

	- Visit  "https://legacy.reactjs.org/"
	- Go to "doc" [documentation]
	- Select CDN links
	- Copy CDN for production or development 

			react.development.js
			react-dom.development.js		=> add to your home page

	- Visit "https://babeljs.io/"
	- Go to "docs"
	- Go to "Integration Packages"
	- Select "@babel/standalone"
	- Copy CDN and paste into your page.

Ex:
1. index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Web App</h1>
    React is working in <a href="./public/home.html"> Home page</a>.
</body>
</html>

2. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">
        /* 17x
         ReactDOM.render("Welcome to React JS", document.getElementById("root"));
         */
         var root = ReactDOM.createRoot(document.getElementById("root"));
         root.render("Hello ! React 18");
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>

?/07
=====

React in Existing Application [ React 18 ]
	- react
	- react-dom
	- babel

React up to 17x version:

	ReactDOM.render("Element|Markup", document.getElementById("root"));

React 18x version:

	const  root = ReactDOM.createRoot(document.getElementById("root"));
	root.render("Element | Markup");


Note: ReactDOM is a base for creating "Virtual DOM".

Download Libraries:

1. Open terminal in your project

2. Run the following commands

		> npm  install  react@18   react-dom@18   @babel/standalone  --save

3. All library files are copied into "node_modules".

4. Link the following files to your HTML page

   <script  src="../node_modules/react/umd/react.development.js"> </script>
   <script  src="../node_modules/react-dom/umd/react-dom.development.js"> </script>
   <script  src="../node_modules/@babel/standalone/babel.js"> </script>

Note: React uses JavaScript XML [ JSX ] as language. 
	  JSX can't be translated using JavaScript interpreter in browser.
	  Hence your script for React requires the MIME type as:

		a) text/jsx
		b) text/babel

	<script type="text/jsx  or text/babel">
	</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render("Welcome to React 18");
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>
		
					  React Components
- React is component based.
- Components enable easy reusability and extensibility. 
- A component comprises of 3 basic elements

	1. Presentation		[with HTML]
	2. Styles				[with CSS]
	3. Logic				[with JSX or TSX]

- React components are designed by using function or class. 
- Class components are still supported by React but not recommended in new code.

Function Components:

1. You can configure a function using declaration or expression. 

	Declaration:
		function Name()
		{
		}

	Expression:
		const Name = function(){ 

		}


2. Every component function name must start with uppercase letter.

3. Component function can't be void type.

4. Component function must always return a JSX element. 

Syntax:
		function  Login()
		{
		   return (<JSX></JSX>);
		}

5. Component function must return only one fragment. 

		function Login()
		{
		  return (
			      <h3>User Login </h3>		=> invalid
			      <p> Welcome </p>
			     );
		}


		function Login()
		{
		  return (
			     <div>
					... your content..		=> valid
			     </div>
			    )
		 }

6. JSX function component can't have elements with void syntax.
    Every element must have an end token. 
	
		<img> </img>		=> valid
		<img />			=> valid
		<img>			=> invalid
		<input type="text" />

7. JSX element can't have attributes, you have to configure only properties.

		<img class="" />		invalid
		<img className="" />	valid

8. Components are accessed and rendered as JSX elements

		function Login()
		{
		  render (<JSX></JSX>);
		}

		root.render(<Login> </Login>);
		root.render(<Login />);

Ex:
home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <style>
        nav {
            display: flex;
            justify-content: space-between;
            border:1px solid gray;
            padding: 20px;
        }
    </style>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">

        function Login()
        {
            return(
                <div>
                    <h2>User Login</h2>
                    <dl>
                     <dt>User Name </dt>
                     <dd><input type="text" /></dd>    
                     <dt>Password </dt> 
                     <dd><input type="password" /></dd>
                    </dl>
                    <button>Login</button>
                </div>
            )
        }

        function SearchBar(){
            return(
                <div>
                    <input type="text" placeholder="Search Amazon.in" />
                    <button>Search</button>
                </div>
            )
        }
        function NavBar(){
            return(
                <nav>
                <span>Amazon </span>
                <SearchBar />
                <span>Home</span>
                <span>About</span>
                <span>Contact</span>
                </nav>
            )
        }

        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(
             <div>
                <NavBar/>
                <Login />
             </div>
            );
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>



21/07
======

React Components
- Function Components
- JSX Rules

					Creating a new React SPA

- You can create a new web application manually or by using any bundling tool. 
- The popular bundling tools for Web are:
	 - Webpack
	 - Parcel
	 - Vite etc.

- Bundling tools provide a scaffold approach where application is configured and file system is designed according to developer requirements. 

Create React App with Vite: 

1. Open any location on your PC where you want to create react app.

2. Run the command [ from command prompt ]

		E:\> npm  create  vite@latest   app_name  -- --  template  react

    Note: The default language for "react" template is JavaScript.
	
		> Framework		:  React
		> Variant 			: JavaScript 

3. Change into project folder and run the command 

		E:\app_name> npm  install

     It will install all dependencies required for project.

4. Open project folder in VS code

5. You can view the following file system


	File / Folder		Description
	------------------------------------------------------------------------------------------------------
	node_modules 	comprises of all library files installed for project.

	public			comprises of all static resources like, html, images etc.

	src				comprises of all dynamic resources like .js, .jsx, .ts, .css, .scss..

	.gitignore			configures the resources to ignore while publishing to GIT.

	eslint.config.js		It is JavaScript language configuration & analysis tool. 

	index.html		It is the startup page for project.

	package.json		]  comprises of application meta data, you can configure
	package-lock.json	]  scripts, commands, versions etc.


	Readme.md		It is a help document by developers for developers. 

	vite.config.js		It is bundler configuration to plugin various external libraries
					or frameworks required for application.

6. Run application using the following command

	> npm  run dev			[for development]


    Application starts on local server   "http://localhost:5173/".

    You can request from browser.

React High Level Flow:
1. You can request react application from browser 

		http://localhost:5173

2. Browser uses the event "DOMContentLoaded", which loads static DOM of "Index.html".

3. Index page loads  "main.jsx", which is entry point for react application. 

4. "src/main.jsx" is create a virtual DOM and renders "App" component, which is the default component created for your application. 

	createRoot(document.getElementById("root")).render(
	   <React.Strict>
		<App />
	  </React.Strict>

	Note:  Alias of React.Strict is  <StrictMode>

Creating a custom component:

- Every component in development environment comprises of 3 files

	a) component.jsx		comprises of markup and logic
	b) component.css		comprises of styles
	c) component.test.jsx	comprises test cases used for testing component

- Create a new folder "components" and keep in "src".

- Add a folder by name "login" into components with files

		login.jsx
		login.css

- login.jsx   code

	export  function Login()
	{
	   return(
		   <>
			... your design ...
		   </>
		);
	}

- Go to "main.jsx" and import login 

	import  { Login } from  "../component/login/login.jsx";

	<StrictMode>
		<Login />
	</StrictMode>


?/07
=====

Creating React Application using Vite Bundler 
File System in React JavaScript Template
Execution Flow - High Level

	index.html => main.jsx => create virtual DOM => render "app" component

Note: You have to import CSS file into JSX component in order to use the styles.
	  It is always recommended not to use type selector for element styles, until you
	  want same across all components.

Syntax:
		login.jsx
		
		import  './login.css';

Enable bootstrap for React application:

1. Install bootstrap and icons for application

	> npm  install  bootstrap   bootstrap-icons --save

2. Go to main.jsx  and import following files 

	import '../node_modules/bootstrap/dist/css/bootstrap.css';
	import '../node_modules/bootstrap-icons/font/bootstrap-icons.css';

3. You can use icons and bootstrap classes

	<div className='bi bi-person-circle'> User Login </div>

	<input type="text"  className='form-control' />


Ex:
1. Add a new folder into  src/components  by name  "Netflix"

2. Add following component files into Netflix folder

		netflix-index.jsx
		netflix-header.jsx
		netflix-section.jsx
		netflix-main.jsx

		netflix-index.css
		netflix-section.css

3. Go to main.jsx and setup Netflix Index as startup 

	<StrictMode>
	   <NetflixIndex />
	</StrictMode>


netflix-index.css 

.banner {
    background-image: url("/public/netflix-banner.jpg");
    background-size: cover;
    height: 100vh;
}
.shade {
    background-color: rgba(0,0,0,0.7);
    height: 100vh;
}

netflix-index.jsx

import './netflix-index.css';
import { NetflixHeader } from './netflix-header';
import { NetflixSection } from './netflix-section';

export function NetflixIndex(){
    return(
        <div className="banner">
          <div className='shade'>
              <NetflixHeader />
              <NetflixSection />
          </div>
        </div>
    )
}

netflix-header.jsx


export function NetflixHeader(){
    return(
        <header className="d-flex justify-content-between p-4">
            <div className="h1 text-danger fw-bold">
                NETFLIX
            </div>
            <div className="d-flex align-items-center justify-content-center">
                <div>
                    <div className="input-group">
                   <span className="bi bi-translate input-group-text"></span> 
                   <select className="form-select">
                      <option>Language</option>
                   </select>
                    </div>
                </div>
                <button className="btn btn-danger mx-4">Sign In</button>
            </div>
        </header>
    )
}

netflix-section.css 

.section {
    padding-top: 50px;
    font-family: Arial;
}
.section-title {
    font-size: 60px;
    font-weight: bold;
}
.section-subtitle {
    font-size: 25px;
}

netflix-section.jsx

import { NetflixMain } from './netflix-main';
import './netflix-section.css';

export function NetflixSection(){
    return(
        <section className="text-white section text-center mt-4">
           <div className="section-title"> Unlimited movies, TV <br/> shows and more </div>
           <div className="section-subtitle"> Starts at ₹149. Cancel at any time. </div>
           <NetflixMain />
        </section>
    )
}

netflix-main.jsx



export function NetflixMain(){
    return(
        <main>
            <p>Ready to watch? Enter your email to create or restart your membership.</p>
            <div className="d-flex justify-content-center">
                <div className="mt-3">
                    <div className="input-group input-group-lg">
                    <input type="email" className="form-control mx-2" placeholder="Your email address" />
                    <button className="btn btn-danger"> Get Started <span className="bi bi-chevron-right"></span> </button>
                    </div>
                </div>
            </div>
        </main>
    )
}

					 Data Binding & State in Component
- Data Binding is the process of accessing data from source and binding to UI elements.
- It also includes identifying changes in data and update back to the source. 
		
		
		Fetching from source and bind to UI		=> One Way Binding
		Identify changes in UI and update back	=> Two Way Binding

- React implicitly supports only "One Way Binding".
- You have to explicitly configure "Two Way Binding". 
- React uses "{ }" as data binding expression. 

Syntax:
		var uname = "John";

		<p> Hello !  {uname} </p>

		<input type="text"  value={uname}  />

- You can bind dynamic values into a string along with JavaScript binding expression 
  "${ }". However it is supported only for string enclosed in backtick. 

Syntax:
		var bgstyle = "bg-danger";

		<p className={`text-white text-center ${bgstyle}`}>

		<p  className={ "text-white text-center " + bgstyle }>



23/07
======

Components Hierarchy 
Data Binding
One Way Binding
Binding Expressing { }   ${ } [backtick]

						    Component State

- Web application uses "http / https" as protocol.
- They are state less protocols. 
- They can't remember information between requests. 
- Hence various state management techniques are required. 
- It is always recommended to use a state for configuring data in a component. 
- Variables are immutable hence it is not recommended to handle data with variables. 
- State is mutable and there are various techniques in React 
		useState()
		useReducer()
		useContext()
		useRef()
		useMemo()
		useCallback()
		Local Storage
		Session Storage
		Cookies 
		Redux etc..

Component Local State:
 - Every React component is configured with a local state.
 - It is created while creating component. 
 - A component is create when you request the component.
 - It is destroyed automatically when you move from one component to another. 
 - It can be used across multiple requests of component, but can't be used across 
   components. 
 - React provides "useState()" hook to access and use the local state. 

FAQ: What is a hook in React?
Ans:   Hook is a service. It is a predefined business logic.
	  You can access, customize and implement according to requirements. 
	  It must be configured at high level in a component. 
	  You can't define inside any another block. 

useState() Hook:
 - It is a React hook used for accessing component local state.
 - It allows to access and use the local state with any type of data
		a) Primitive
		b) Non Primitive 
 - It requires a reference for accessing and initializing value into memory
		a) getter 	[ to access value ]
		b) setter	[ to initialize value] 

 - It returns a getter and setter, which you have to access using de-structure technique. 

Syntax:
		const  [getter, setter] = useState(value);

		{ getter }				// to access

		setter(newValue)		// to initialize new value 

		setter = value;			// invalid

FAQ's:
1. Can we use var and let to configure state?
A. Yes. But not recommended. 

2. Why developers prefer using "const" for state?
A. State must be initialized and should not allow assignment. 
    Hence "const" is good for state, as it will not allow assignment and require initialization.

3. If you use const, then how you will assign a new value into state?
A. We don't assign values into state, we reinitialize memory for storing a new value.


Component Mount Phase:
- A component is created when user requests the component. 
- State is configured while creating component. 
- You can initialize values into state while creating but can't reinitialize directly in 
  component.
- It requires a mount phase or any element event to reinitialize new values. 
- Component mount is configured by using "useEffect()" hook.

Syntax:
		useEffect(()=>{
		
			// actions to perform on mount

		},[ dependencies ]);

- Every component mounts only once, you can mount again by configuring the dependencies. 
- A component mounts again when ever the dependency detects a change.

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [price, setPrice] = useState(0);
    const [name, setName] = useState('');
    
    useEffect(()=>{
        setPrice(40500);
        setName('Samsung TV');
    },[]);

    return(
        <div className="container-fluid">
            <h2 className={`text-center text-warning p-3`}>Data Binding</h2>
            <dl>
                <dt>Product Name</dt>
                <dd>{name}</dd>
                <dt>Price</dt>
                <dd>{price}</dd>
            </dl>
        </div>
    )
}

Binding Various Data Types:

Primitive Types:

1. Number

	const [price] = useState(45000);

	- You can use all JavaScript number functions to handle numbers

		a) toFixed()
		b) toPrecision()
		c) toLocaleString()	 => regional language, style : currency, unit, precent 
		d) parseInt()
		e) parseFloat()
		f) isNaN()

Ex:
import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [price, setPrice] = useState(0);
    const [views] = useState(5600009);
    
    useEffect(()=>{
        setPrice(405000);
    },[]);

    return(
        <div className="container-fluid">
            <h2 className={`text-center text-warning p-3`}>Data Binding</h2>
            <dl>
                <dt>Price</dt>
                <dd>{price.toLocaleString('en-in', { style:'currency', currency:'INR'})}</dd>
                <dt>Views</dt>
                <dd>{views.toLocaleString('en-us', {notation:'compact'})}</dd>
            </dl>
        </div>
    )
}


24/07
======

- useState()
- useEffect()

1. Number

2. String
	" "
	'  '
	` `  ${ }

3. Boolean 
	- Boolean handles true or false as keywords.
	- JSX can't print boolean keywords.
	- It can't use decision making statements.
	- Hence you have to handle using operators and functions. 

Syntax:
	 const [stock] = useState(true);

	 {  (stock===true) ? 'true' : 'false' }

4. Undefined 

	- It specifies that value is not defined at compile time. 
	- It uses "undefined" keyword. 

Syntax:
	  const [price , setPrice]  = useState();

	  { (price) ? price : 'price not defined' }


5. Null

	- Null is a keyword returned when value is not provided at runtime of application.
	- It is verified by using null keyword.

Syntax:
	  const [price] = useState(prompt("Enter Price"));

	  {  (price===null) ? 'Not defined' : price }
 
Note: React application compiles and executes 2 times. One for development and
	  another for production, you can remove the <StrictMode> to execute only
	  for development.

Non Primitive Types:

1. Array
	- All array methods are same in React.
	- Configuration same as JavaScript.
	- To present array elements always use the implicit iterator functions.
		a) map()
		b) forEach()

	- React Fiber from react 19 recommends all async techniques.
	- Hence you have to use "map()" as iterator for reading elements.
	- JSX can dynamically create any element and append to page.
	- Every repeating element must have a unique "key".

Syntax:
	const [cities] = useState([ 'Delhi' , 'Hyd' ])


	<ol>
	  {
	    cities.map((city, index)=> <li key={index}> { city } </li>)
	  }

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [categories] = useState(['All','Electronics', 'Fashion','Footwear']);
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <header className="mt-4 p-4 d-flex justify-content-between border border-2">
                <div className="h3">Amazon</div>
                <nav>
                    {
                        categories.map((category, i)=> <span className="mx-4" key={i}><a href="#">{category}</a></span> )
                    }
                </nav>
                <div>
                    <span className="bi bi-heart"></span>
                    <span className="bi bi-cart3 mx-2"></span>
                </div>
            </header>
            <ol>
                {
                    categories.map((category,index)=><li key={index}>{category}</li>)
                }
            </ol>
            <select>
                {
                    categories.map((category, index)=><option key={index}>{category}</option>)
                }
            </select>
        </div>
    )
}

2. Object Type
	
	- Object is key and value collection. 
	- You can access the value with reference of key.
	- All object manipulations are same as in JavaScript.
		a) Object.keys()	returns all keys
		b) delete			removes a key
		c) in 			verifies key
		d) typeof			returns value type
		etc.

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [product] = useState({Name:'Samsung TV', Price: 45000, ShippedTo:['Delhi', 'Hyd'], Rating:{Rate:4.2, Count:600}});
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Product Details</h2>
            <dl>
                <dt>Name</dt>
                <dd>{product.Name}</dd>
                <dt>Price</dt>
                <dd>{product.Price}</dd>
                <dt>Shipped To</dt>
                <dd>
                    <ul>
                        {
                            product.ShippedTo.map(city=><li key={city}>{city}</li>)
                        }
                    </ul>
                </dd>
                <dt>Rating</dt>
                <dd>
                    {product.Rating.Rate} <span className="bi bi-star-fill text-success"></span> [{product.Rating.Count}]
                </dd>
            </dl>
        </div>
    )
}

Ex: Array of objects

data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [products] = useState([
         {Name: 'Samsung TV', Price: 45000},
         {Name: 'Mobile', Price: 23000},
         {Name: 'Nike Casuals', Price: 2560}
    ]);
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Products Table</h2>
            <table className="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        products.map((product,index)=><tr key={index}><td>{product.Name}</td><td>{product.Price}</td><td> <button className="btn btn-warning bi bi-pen-fill"></button> <button className="btn btn-danger bi bi-trash mx-2"></button> </td></tr>)
                    }
                </tbody>
            </table>
        </div>
    )
}


Ex: Nested Map

data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [data] = useState([
        {Category: 'Electronics', Products: ['Televisions', 'Mobiles']},
        {Category: 'Fashion', Products: ['Footwear', 'Jeans']}
    ])
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Products</h2>
            <ol>
                {
                    data.map(item=>
                        <li key={item}>
                            {item.Category}
                            <ul>
                                {
                                    item.Products.map(product=><li key={product}>{product}</li>)
                                }
                            </ul>
                        </li>
                    )
                }
            </ol>
            <select>
                {
                    data.map(item=>
                    <optgroup key={item} label={item.Category}>
                        {
                            item.Products.map(product=><option key={product}>{product}</option>)
                        }
                    </optgroup>)
                }
            </select>
        </div>
    )
}


25/07
=======

Bind Data 
- map()
- key

Handling Date Type:
- JavaScript date type is configured using "Date()" constructor. 
- JavaScript uses a new dynamic memory to allocate date and time values.
- However React will not allow creating objects as React child.
- Hence you have to configure date using constructor without "new" operator. 

Syntax:
	  const  [dept] =  useState(Date());

- React will not allow to present date by using date functions of JavaScript like
	    toLocaleDateString()
	    toDateString()
	    toLocaleTimeString()
	    toTimeString()
	    etc..

- React requires 3rd party date libraries to manipulate date and time values
	a) moment
	b) dayjs
	c) luxon  etc.

Setup Moment:

1. Install moment for React

		> npm  install  moment --save

2. Import moment into component

		import   moment  from  "moment";

3. Apply format

	 const  [dept] = useState(Date());

	 {  moment(dept).format( 'string format' )  }

	 Date String Format:
	
			dddd		weekday name
			DD			date number
			MM			month number
			MMM		short month format
			MMMM		long month format
			yyyy			full year

Ex:
	       { moment(dept).format('dddd DD, MMMM yyyy) }


Regular Expression Type:
 - Regular expression is enclosed in "/  /".
 - It comprises of meta characters and quantifiers. 
 - It uses match() method to compare with a value. 

Ex:
data-binding.jsx

import { useEffect, useState } from "react";
import moment from "moment";

export function DataBinding(){
    
    const [mobile, setMobile] = useState('');
    
    useEffect(()=>{
        setMobile('+919876543210');
    },[]);

    return(
        <div className="container-fluid">
           <h2>Data Binding</h2>
           { (mobile.match(/\+91\d{10}/))?'Verified':'Invalid Mobile' }
        </div>
    )
}

			     React AJAX techniques for fetching data from API

- React can use JavaScript AJAX methods like
	a) XMLHttpRequest
	b) fetch() 

XMLHttpRequest:
 - It is the native browser object to make Ajax call from browser. 
 - It is default synchronous, you have to explicitly make it async. 
 - It returns only Text and XML response.
 - It requires explicit parsing methods for other data type.
 - It is not good in exceptions. 
 - It is not good in handling security. [ CORS, XSS, XSRF ]

Syntax:
 1. Create XMLHttpRequest object

	 var http = new XMLHttpRequest();

 2. Configure the request

	 http.open("method", "url", async:boolean);
	 http.send();

3. Execute the request

	http.onreadystatechange = function(){

	}

4. On Ready get the response 

	if (http.readyState === 4)
	{
		// http.responseText 
	}

Ex:
1. public/product.json

{
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79900,
    "image": "iphone-pink.jpg",
    "rating": {"rate":4.6, "ratings": 19560, "reviews": 5602},
    "offers": [
        "Bank Offer5% cashback on Flipkart Axis Bank Credit Card upto ₹4,000 per statement quarter",
        "Bank Offer5% cashback on Axis Bank Flipkart Debit Card up to ₹750",
        "Bank OfferFlat ₹10 Instant Cashback on Paytm UPI Trxns. Min Order Value ₹500. Valid once per Paytm account",
        "Special PriceGet extra ₹5000 off (price inclusive of cashback/coupon)"
    ]
}

2. component/databinding

	data-binding.jsx

import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

         var http = new XMLHttpRequest();
         http.open("get","product.json",true);
         http.send();

         http.onreadystatechange = function(){

               if(http.readyState===4){
                    setProduct(JSON.parse(http.responseText));
               }

         }

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}

Fetch Promise: 
 - It is JavaScript promise. 
 - Promise is by default async.
 - It returns the response in binary format. 
 - It requires explicit conversions. 
 - It is not good in security.

Syntax:
	
      fetch("url")
		.then(function(response){  convert to json })
		.then(function(data){  })
		.catch(function(error){ })
		.finally(function(){ })

Ex:
 data-binding.jsx

import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

          fetch('product.json')
          .then(response=> response.json())
          .then(product=>{
              setProduct(product);
          })

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}


28/07
======

3rd Party Services for API requests: Axios

- It is asynchronous.
- It returns data directly in the native format of its source. 
- Explicit conversions not required. 
- It is good in handling exceptions. 
- It returns various status codes. 
- It can cancel requests. 
- It is good in security, supports CORS, XSS, XSRF handling. 
     		CORS	- Cross Origin Resource Sharing
		XSS		- Cross Site Scripting Attacks
		XSRF	- Cross Site Request Forgery 
- It supports handling multiple requests simultaneously at the same time.


1. Install axios for project

	> npm  install  axios --save

2. Import axios into component

	import   axios  from  "axios";

3. Make axios request

	axios.get()
	axios.post()
	axios.put()	
	axios.delete() etc.

Syntax:
	 axios.get("url").then().catch().finally()

	then()		: It is a callback on resolve comprises of a response object with
				  various details like
					a) data
					b) statusCode
					c) statusText
					d) header etc.

Syntax:
	axios.get(url)
		 .then(function(response){
 			response.data;
			response.status;
			response.statusText;
			response.headers;
		})
		.catch(function(error){
			// returns error object
		})
		.finally(function(){
			// always 
		})

Ex:
1. public/product.json

{
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79900,
    "image": "iphone-pink.jpg",
    "rating": {"rate":4.6, "ratings": 19560, "reviews": 5602},
    "offers": [
        "Bank Offer5% cashback on Flipkart Axis Bank Credit Card upto ₹4,000 per statement quarter",
        "Bank Offer5% cashback on Axis Bank Flipkart Debit Card up to ₹750",
        "Bank OfferFlat ₹10 Instant Cashback on Paytm UPI Trxns. Min Order Value ₹500. Valid once per Paytm account",
        "Special PriceGet extra ₹5000 off (price inclusive of cashback/coupon)"
    ]
}

2. data-binding.jsx

import axios from "axios";
import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

         axios.get('product.json').then(response=>{
              setProduct(response.data);
         })

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}

						 Class Binding
- It is the process of binding CSS classes to JSX elements.
- It requires className property.

Syntax:
	  <div  className={ `text-success ${dynamic-class}` }> </div>

	  const [dynamic-class] = useState('text-center');

					       Style Binding

- It is the process of binding inline styles to JSX elements.
- It requires "style" property.
- Style uses a JavaScript object with style attribute as key and style value as value.
- Style attribute is always camel case.
- Style value is always string.

			General				React Property
			----------------------------------------------------------
			font-size				fontSize
			text-align				textAlign
			color				color
			background-color		backgroundColor
			etc..
Syntax:
	 <h1  style={ { textAlign:'center', border:'2px solid red'} }>  Text </h1>

Ex:
	const [ styleObj ]  = useState( { textAlign: 'center', color: 'red' } );

	<h1  style={ styleObj } > Text </h1>


						Event Binding
- What is Event?
- What is Event Handler?
- What is Event Listener?
- Delegate and Observer.
- Sender and Subscriber.
- Event Propagation / Bubbling  [ stopPropagation() ]
- Prevent Default  [ preventDefault() ]
- Event Arguments 
	a) Default [this, event]
	b) Custom
- Event Looping 
- Event Profiling 

FAQ: What is Event Looping?
Ans:  It is the process of executing the tasks on specific event trigger.
	 Event uses a looping order to execute the given tasks.

	 Synchronous Task => Micro Task => Asynchronous Task
					     [ Promise ]		[ Async, Await ]

<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function ClickMe(){
               console.log("Start Request");
               setTimeout(function(){
                    console.log("Async Task");
               },0);
               Promise.resolve().then(function(){
                    console.log("Micro Task");
               })
               console.log("End Request");
          }
     </script>
</head>
<body>
     <button onclick="ClickMe()">Click</button>
</body>
</html>
						  Event Binding
					      [Synthetic Events]


29/07
======

React Synthetic Events:
- React Virtual DOM events are derived from Synthetic Event base.
- Synthetic Events map to actual DOM events.

	onClick [ Synthetic Event ]  => onclick [ Browser Event ]


Configuring Event:
 - Event uses "Delegate" mechanism.
 - Delegate is a function pointer.
 - Event follows a software design pattern called "Observer", which is a communication
   pattern.

Syntax:
		function  handleInsertClick()
		{
		}

		<button  onClick={ handleInsertClick }> Insert </button>

Event Arguments:
 - Every event can handle payload using default and custom arguments.
 - Payload is the data carried from one location to another. 
 - Actual DOM event can handle 
	a) Default Arguments [ this, event ]
	b) Custom Arguments 

- Virtual DOM event have a default "event" argument configured for event.
- It uses listener mechanism which provides "event" with both element and event details. 

Syntax:
	  function handleInsertClick(e)
	  {
		e.clientX;
		e.clientY;
		e.keyCode;
		e.which;
		e.ctrlKey; etc.

		e.target.id
		e.target.value 
		e.target.className etc.
	 }
	 
	<button onClick= {handleInsertClick }>

Ex:
event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    const [msg, setMsg] = useState(null);

    function handleInsertClick(e){
        setMsg('Inserted Successfully');
        console.log(`Button Value : ${e.target.value}\nButton Id : ${e.target.id}\nX Position : ${e.clientX}`)
    }
    return(
        <div className="container-fluid">
            <button value="Insert" id="btnInsert" onClick={handleInsertClick}>Insert</button>
            <p>{msg}</p>
        </div>
    )
}

- You can configure event to carry custom arguments along with default arguments.
- It requires a function in JSX to allocate memory on event trigger. 

Syntax:
	   <button  onClick={ (e) => handleInsertClick(e, custom_args) }>  


	    function handleInsertClick(e, ...args)
	    {
	    }

Ex:
 event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    const [msg, setMsg] = useState(null);

    function handleInsertClick(e,...product){
        setMsg('Inserted Successfully');
        let [id, name, stock, cities, rating] = product;
        console.log(`Id=${id}\nName=${name}\nStock=${stock}\nCities=${cities}\nRating=${rating.Rate}`);
        console.log(`Button Value=${e.target.value}\nX Position=${e.clientX}`);
    }
    return(
        <div className="container-fluid">
            <button value="Insert" id="btnInsert" onClick={(event)=> handleInsertClick(event, 1, 'TV', true, ['Delhi', 'Hyd'], {Rate:4.2})}>Insert</button>
            <p>{msg}</p>
        </div>
    )
}

Event Propagation & Prevent Default:

- Event propagation is a bubbling mechanism where the parent event is simulated on child trigger. 
- You can stop propagation by using event method "stopPropagation()".

Syntax:
	    function handleChildClick(e)		
	    {
		e.stopPropagation();
	    }

- Every generic element have a pre-defined functionality configured.  
- It executes along with the defined functionality. 
- You can stop default functionality by using event method "preventDefault()".

Syntax:
	  function handleSubmit(e)
	  {
		e.preventDefault();
	  }
	 <form  onSubmit={handleSubmit}>
	
Ex:
 event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    function NavClick(){
        alert('Navbar Clicked - Navigate to Home');
    }
    function SearchClick(e){
        e.stopPropagation();
        alert('Search Clicked - Shows search results');
    }

    function SubmitClick(e){
        e.preventDefault();
        alert('Form Submitted');
    }
    
    return(
        <div className="container-fluid">
            <nav onClick={NavClick} className="p-2 border border-2 border-dark m-4">
                <h2>Amazon</h2>
                <button onClick={SearchClick} className="btn bi bi-search btn-warning"></button>
            </nav>
            <section className="m-4">
                <form onSubmit={SubmitClick}>
                    <h3>User Name</h3>
                    <input type="text" name="User" /> <button type="submit">Login</button> 
                </form>
            </section>
        </div>
    )
}

Event for Two Way Binding:
- React enables only One-Way-Binding implicitly. 
- It will not allow changes into element value.
- You can change element value only with "onChange" event.
- Two way data binding requires new value from element, which you can configure only with "onChange".

Syntax:
	 <input type="text"  onChange={handleNameChange}>
	 <select onChange={handleCityChange}>
	 <input type="checkbox" onChange={handleCheckChange}>

Ex:
 event-binding.jsx

 import { useState } from "react";

export function EventBinding(){

    const [uname, setUname] = useState('John');
    const [msg, setMsg] = useState(null);

    function handleNameChange(e){
        setUname(e.target.value);
    }
    function VerifyName(e){
        if(e.target.value==='David'){
            setMsg('Name Taken - Try another');
        } else {
            setMsg('Name Available');
        }
    }
    
    function handleBlur(){
        setMsg('');
    }


    return(
        <div className="container-fluid">
            <dl>
                <dt>User Name</dt>
                <dd><input type="text" onBlur={handleBlur} onKeyUp={VerifyName} onChange={handleNameChange} value={uname} /></dd>
                <dd>{msg}</dd>
            </dl>
            <h2>Hello ! {uname}</h2>
        </div>
    )
}

Synthetic Events
1. Mouse event
2. Keyboard 
3. Button
4. Touch
5. Timer
6. Form


30/07
=======

React Synthetic Events Notes
============================

1. Mouse Events
---------------
- onMouseOver
- onMouseOut
- onMouseDown
- onMouseUp
- onMouseMove

Example A: Image Preview on Mouse Over
---------------------------------------

File: public/mobiles.json
--------------------------
[
  { "img_src": "m1.png" },
  { "img_src": "m2.png" },
  { "img_src": "m3.png" },
  { "img_src": "m4.png" },
  { "img_src": "m5.png" }
]

File: src/components/mouse-demo/mouse-demo.jsx
----------------------------------------------
import axios from "axios";
import { useEffect, useState } from "react";
import './mouse-demo.css';

export function MouseDemo() {
  const [mobiles, setMobiles] = useState([{ img_src: null }]);
  const [previewSrc, setPreviewSrc] = useState('m1.png');

  useEffect(() => {
    axios.get('mobiles.json').then(response => {
      setMobiles(response.data);
    });
  }, []);

  function handleMouseOver(e) {
    setPreviewSrc(e.target.src);
  }

  return (
    <div className="container-fluid">
      <div className="row mt-5">
        <div className="col-1">
          {mobiles.map(mobile => (
            <div key={mobile.img_src} className="my-4 container-style">
              <img
                onMouseOver={handleMouseOver}
                src={mobile.img_src}
                width="50px"
                height="50px"
              />
            </div>
          ))}
        </div>
        <div className="col-11">
          <img width="400" height="400" src={previewSrc} />
        </div>
      </div>
    </div>
  );
}

File: src/components/mouse-demo/mouse-demo.css
----------------------------------------------
.container-style {
  border: 2px solid gray;
  width: 50px;
}

.container-style:hover {
  border: 2px solid blue;
  cursor: grab;
}

Example B: Mouse Animation on Click
------------------------------------

File: mouse-animation.css
--------------------------
@keyframes Spin {
  from {
    transform: rotate(0deg) scale(1);
  }
  to {
    transform: rotate(360deg) scale(2);
  }
}

File: mouse-animation.jsx
--------------------------
import { useState } from "react";
import './mouse-animation.css';

export function MouseAnimation() {
  const [styleObj, setStyleObj] = useState({
    animationName: 'Spin',
    animationDuration: '5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear'
  });

  function handleMouseDown() {
    setStyleObj({
      animationName: 'Spin',
      animationDuration: '1s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    });
  }

  function handleMouseUp() {
    setStyleObj({
      animationName: 'Spin',
      animationDuration: '5s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    });
  }

  return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
      <div>
        <img
          onMouseDown={handleMouseDown}
          onMouseUp={handleMouseUp}
          style={styleObj}
          src="react.svg"
          width="200"
          height="200"
        />
      </div>
    </div>
  );
}

Example C: Image Follows Mouse Movement
----------------------------------------

File: mouse-move.jsx
---------------------
import { useState } from "react";

export function MouseMove() {
  const [imgPosition, setImgPosition] = useState({
    position: null,
    top: null,
    left: null
  });

  function handleMouseMove(e) {
    setImgPosition({
      position: 'fixed',
      left: e.clientX + 'px',
      top: e.clientY + 'px'
    });
  }

  return (
    <div onMouseMove={handleMouseMove}>
      <div style={{ height: '1000px' }}>
        <h1>Move your mouse pointer to test</h1>
      </div>
      <img style={imgPosition} width="50" height="50" src="flag.gif" />
    </div>
  );
}

2. Keyboard Events
-------------------
- onKeyUp
- onKeyDown
- onKeyPress

Notes:
------
* onKeyUp and onKeyDown are useful for detecting key interactions.
* onKeyPress is deprecated and should be avoided in modern apps.

Example: Username Validation
----------------------------

File: keydemo.jsx
------------------
import axios from "axios";
import { useEffect, useState } from "react";

export function KeyDemo() {
  const [users, setUsers] = useState([{ user_id: null }]);
  const [msg, setMsg] = useState(null);
  const [validationClass, setValidationClass] = useState(null);

  useEffect(() => {
    axios.get('users.json').then(response => {
      setUsers(response.data);
    });
  }, []);

  function VerifyUser(e) {
    for (let user of users) {
      if (user.user_id === e.target.value) {
        setMsg('User Id Taken - Try Another');
        setValidationClass('text-danger');
        return;
      }
    }
    setMsg('User Id Available');
    setValidationClass('text-success');
  }

  return (
    <div className="container">
      <h2>Register User</h2>
      <dl>
        <dt>User Id</dt>
        <dd><input type="text" onKeyUp={VerifyUser} /></dd>
        <dd className={validationClass}>{msg}</dd>
      </dl>
    </div>
  );
}


31/07
======

React Synthetic Events Notes
============================

1. Mouse Events
---------------
- onMouseOver
- onMouseOut
- onMouseDown
- onMouseUp
- onMouseMove

Example A: Image Preview on Mouse Over
--------------------------------------

File: public/mobiles.json
--------------------------
[
  { "img_src": "m1.png" },
  { "img_src": "m2.png" },
  { "img_src": "m3.png" },
  { "img_src": "m4.png" },
  { "img_src": "m5.png" }
]

File: src/components/mouse-demo/mouse-demo.jsx
----------------------------------------------
import axios from "axios";
import { useEffect, useState } from "react";
import './mouse-demo.css';

export function MouseDemo() {
  const [mobiles, setMobiles] = useState([{ img_src: null }]);
  const [previewSrc, setPreviewSrc] = useState('m1.png');

  useEffect(() => {
    axios.get('mobiles.json').then(response => {
      setMobiles(response.data);
    });
  }, []);

  function handleMouseOver(e) {
    setPreviewSrc(e.target.src);
  }

  return (
    <div className="container-fluid">
      <div className="row mt-5">
        <div className="col-1">
          {mobiles.map(mobile => (
            <div key={mobile.img_src} className="my-4 container-style">
              <img onMouseOver={handleMouseOver} src={mobile.img_src} width="50px" height="50px" />
            </div>
          ))}
        </div>
        <div className="col-11">
          <img width="400" height="400" src={previewSrc} />
        </div>
      </div>
    </div>
  );
}

File: src/components/mouse-demo/mouse-demo.css
----------------------------------------------
.container-style {
  border: 2px solid gray;
  width: 50px;
}

.container-style:hover {
  border: 2px solid blue;
  cursor: grab;
}

Example B: Mouse Animation on Click
-----------------------------------

File: mouse-animation.css
--------------------------
@keyframes Spin {
  from {
    transform: rotate(0deg) scale(1);
  }
  to {
    transform: rotate(360deg) scale(2);
  }
}

File: mouse-animation.jsx
--------------------------
import { useState } from "react";
import './mouse-animation.css';

export function MouseAnimation() {
  const [styleObj, setStyleObj] = useState({
    animationName: 'Spin',
    animationDuration: '5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear'
  });

  function handleMouseDown() {
    setStyleObj({ ...styleObj, animationDuration: '1s' });
  }

  function handleMouseUp() {
    setStyleObj({ ...styleObj, animationDuration: '5s' });
  }

  return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
      <div>
        <img onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} style={styleObj} src="react.svg" width="200" height="200" />
      </div>
    </div>
  );
}

Example C: Image Follows Mouse Movement
---------------------------------------

File: mouse-move.jsx
---------------------
import { useState } from "react";

export function MouseMove() {
  const [imgPosition, setImgPosition] = useState({
    position: null,
    top: null,
    left: null
  });

  function handleMouseMove(e) {
    setImgPosition({
      position: 'fixed',
      left: e.clientX + 'px',
      top: e.clientY + 'px'
    });
  }

  return (
    <div onMouseMove={handleMouseMove}>
      <div style={{ height: '1000px' }}>
        <h1>Move your mouse pointer to test</h1>
      </div>
      <img style={imgPosition} width="50" height="50" src="flag.gif" />
    </div>
  );
}

2. Keyboard Events
-------------------
- onKeyUp
- onKeyDown
- onKeyPress

Notes:
* onKeyUp and onKeyDown are useful for detecting key interactions.
* onKeyPress is deprecated and should be avoided in modern apps.

Example: Username Validation
----------------------------

File: keydemo.jsx
------------------
import axios from "axios";
import { useEffect, useState } from "react";

export function KeyDemo() {
  const [users, setUsers] = useState([{ user_id: null }]);
  const [msg, setMsg] = useState(null);
  const [validationClass, setValidationClass] = useState(null);

  useEffect(() => {
    axios.get('users.json').then(response => {
      setUsers(response.data);
    });
  }, []);

  function VerifyUser(e) {
    for (let user of users) {
      if (user.user_id === e.target.value) {
        setMsg('User Id Taken - Try Another');
        setValidationClass('text-danger');
        return;
      }
    }
    setMsg('User Id Available');
    setValidationClass('text-success');
  }

  return (
    <div className="container">
      <h2>Register User</h2>
      <dl>
        <dt>User Id</dt>
        <dd><input type="text" onKeyUp={VerifyUser} /></dd>
        <dd className={validationClass}>{msg}</dd>
      </dl>
    </div>
  );
}

3. Element State Events
------------------------
- onChange
- onBlur
- onFocus

Example: EMI Calculator
------------------------

File: emi-calculator.jsx
-------------------------
import { useState } from "react";

export function EMICalculator() {
  const [amount, setAmount] = useState(100000);
  const [years, setYears] = useState(1);
  const [rate, setRate] = useState(10.45);
  const [emi, setEmi] = useState(0);
  const [toggleResult, setToggleResult] = useState('d-none');

  function handleAmountChange(e) {
    setAmount(e.target.value);
  }

  function handleYearsChange(e) {
    setYears(e.target.value);
  }

  function handleRateChange(e) {
    setRate(e.target.value);
  }

  function handleCalculateClick() {
    var P = parseInt(amount);
    var N = parseInt(years) * 12;
    var R = parseFloat(rate) / 12 / 100;
    var EMI = P * R * (Math.pow(1 + R, N)) / (Math.pow(1 + R, N) - 1);
    setEmi(EMI);
    setToggleResult('d-block');
  }

  return (
    <div className="container-fluid">
      <div className="p-4 border border-2 mt-4">
        <h4 className="text-center">Personal Loan EMI Calculator</h4>

        <div className="row my-4">
          <div className="col">
            Amount you need ₹ <input onChange={handleAmountChange} type="text" value={amount} size="10" />
          </div>
          <div className="col">
            for <input type="text" onChange={handleYearsChange} size="2" value={years} /> years
          </div>
          <div className="col">
            interest rate <input onChange={handleRateChange} type="text" size="4" value={rate} /> %
          </div>
        </div>

        <div className="my-4 row">
          <div className="col">
            <input type="range" onChange={handleAmountChange} value={amount} className="form-range" step="10000" min="100000" max="1000000" />
            <div>
              <span>₹ 1,00,000/-</span>
              <span className="float-end">₹ 10,00,000/-</span>
            </div>
          </div>
          <div className="col">
            <input type="range" onChange={handleYearsChange} value={years} className="form-range" min="1" max="5" />
            <div>
              <span>1 Year</span>
              <span className="float-end">5 Years</span>
            </div>
          </div>
          <div className="col">
            <input type="range" onChange={handleRateChange} value={rate} className="form-range" step="0.01" min="10.45" max="18.45" />
            <div>
              <span>10.45%</span>
              <span className="float-end">18.45%</span>
            </div>
          </div>
        </div>

        <div className="row mt-5">
          <div className="col text-end">
            <button onClick={handleCalculateClick} className="btn btn-primary">Calculate</button>
          </div>
        </div>

        <div className={`row mt-5 ${toggleResult}`}>
          <div className="col">
            <div className="text-center fs-4">
              Your EMI amount is <span className="fw-bold">
                {emi.toLocaleString('en-in', {
                  style: 'currency',
                  currency: 'INR',
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span> for next {years * 12} months.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

4. Button Events
-----------------
- onClick
- onDoubleClick
- onContextMenu

Note:
-----
- Synthetic events can’t disable real DOM behavior directly.
- Use native DOM event listeners (like `document.oncontextmenu`) to override.

Syntax:
-------
function syntheticEvent() {
  document.onactualDOMEvent = function() {
    return false;
  };
}

Example: Button Actions
------------------------

File: button-demo.jsx
----------------------
export function ButtonDemo() {
  function handleDoubleClick() {
    window.open('m1.png', 'Mobile', 'width=400 height=400');
  }

  function handleContextMenu() {
    document.oncontextmenu = function () {
      alert('Right Click Not Allowed');
      return false;
    };
  }

  return (
    <div onContextMenu={handleContextMenu} className="container-fluid">
      <h2>Button Events</h2>
      <img onDoubleClick={handleDoubleClick} src="m1.png" width="150" height="150" />
      <p>Double Click to view large</p>
    </div>
  );
}

5. Timer Events
----------------
- setTimeout()
- clearTimeout()
- setInterval()
- clearInterval()

Debounce:
---------
- Delays execution of a task.
- Task is stored in memory using setTimeout.
- Can be cancelled using clearTimeout.
- Use useRef() to store timeout ID reference.

Syntax:
-------
setTimeout(function() { }, interval);

// Use clearTimeout(ref.current) to cancel


1/08
=====

 1. Event Binding Types
Event Binding is the process of assigning an event (like a click, keypress, etc.) to a handler function. The common types of events are:

 Mouse Events
onClick

onMouseOver

onMouseOut

onMouseMove

 Keyboard Events
onKeyDown

onKeyUp

onKeyPress

 Button Events
onClick

onDoubleClick

onSubmit (if the button is in a form)

 Element State Events
onChange

onFocus

onBlur

 Timer Events
Used to delay or repeat tasks using JavaScript timers.

js
Copy
Edit
setTimeout(callback, delay);
clearTimeout(reference);

setInterval(callback, interval);
clearInterval(reference);
 2. Throttling in React (Using setInterval)
 What is Throttling?
Throttling is the process of invoking a function repeatedly at regular intervals to limit the execution rate.

Executes at fixed intervals using setInterval().

Can be stopped using clearInterval().

 Syntax:
js
Copy
Edit
let ref = setInterval(() => {
   // task
}, 1000);

clearInterval(ref);
Throttle Demo: throttle-demo.jsx
jsx
Copy
Edit
import { useEffect, useState } from "react"

export function ThrottleDemo() {
    const [clock, setClock] = useState();

    function GetTime() {
        var now = new Date();
        setClock(now.toLocaleTimeString());
    }

    useEffect(() => {
        setInterval(GetTime, 1000);
    }, [])

    return (
        <div>
            <h1 className="text-center">{clock}</h1>
        </div>
    );
}
 3. useRef() Hook
🔸 What is useRef()?
Used to create mutable values that persist across renders.

Commonly used to store timers, DOM references, or counters.

Do not use useRef() values for direct rendering in the UI.

🔸 Syntax:
js
Copy
Edit
const ref = useRef(null);
ref.current = value;
 4. Stopwatch Example using useRef()
stop-watch.jsx
jsx
Copy
Edit
import { useRef, useState } from "react"

export function StopWatch() {
    const [hrs, setHours] = useState(0);
    const [min, setMin] = useState(0);
    const [sec, setSec] = useState(0);
    const [milliSec, setMilliSec] = useState(0);

    let thread = useRef(null);

    var ms = 0, s = 0, m = 0, h = 0;

    function StartTimer() {
        ms++;
        setMilliSec(ms);
        if (ms === 999) {
            s++;
            setSec(s);
            ms = 0;
        }
    }

    function handleStartClick() {
        thread.current = setInterval(StartTimer, 1);
    }

    function handleClearClick() {
        clearInterval(thread.current);
        setMilliSec(0);
        setSec(0);
        setMin(0);
        setHours(0);
    }

    return (
        <div className="container-fluid p-4">
            <div className="d-flex justify-content-center">
                <div className="w-50 fs-4">
                    <div className="row">
                        <div className="col p-3 border border-1"><span>{hrs} h</span></div>
                        <div className="col p-3 border border-1"><span>{min} m</span></div>
                        <div className="col p-3 border border-1"><span>{sec} s</span></div>
                        <div className="col p-3 border border-1"><span>{milliSec} ms</span></div>
                    </div>
                    <div className="mt-3">
                        <button onClick={handleStartClick} className="btn btn-primary">Start</button>
                        <button onClick={handleClearClick} className="btn mx-2 btn-secondary">Clear</button>
                    </div>
                </div>
            </div>
        </div>
    );
}
 5. API Interaction with useRef(): Carousel Example
🔸 API Used:
https://fakestoreapi.com/products/1

carousel-demo.jsx
jsx
Copy
Edit
import axios from "axios"
import { useEffect, useRef, useState } from "react"

export function CarouselDemo() {
    const [product, setProduct] = useState({ id: 0, title: null, description: null, image: null, category: null, price: 0, rating: { rate: 0, count: 0 } });

    let productId = useRef(1);

    function LoadProductManually(id) {
        axios.get(`https://fakestoreapi.com/products/${id}`)
            .then(response => setProduct(response.data));
    }

    function handleNextClick() {
        productId.current += 1;
        LoadProductManually(productId.current);
    }

    function handPreviousClick() {
        productId.current -= 1;
        LoadProductManually(productId.current);
    }

    function handleSeekbarChange(e) {
        productId.current = e.target.value;
        LoadProductManually(productId.current);
    }

    useEffect(() => {
        LoadProductManually(1);
    }, []);

    return (
        <div className="container-fluid d-flex justify-content-center">
            <div className="card w-50 p-2 mt-4">
                <div className="card-header text-center">{product.title}</div>
                <div className="card-body">
                    <div className="row">
                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">
                            <button onClick={handPreviousClick} className="btn btn-dark bi bi-chevron-left"></button>
                        </div>
                        <div className="col-10">
                            <img src={product.image} width="100%" height="400" />
                            <div className="mt-2">
                                <input type="range" onChange={handleSeekbarChange} min="1" max="20" value={productId.current} className="form-range" />
                            </div>
                        </div>
                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">
                            <button onClick={handleNextClick} className="btn btn-dark bi bi-chevron-right"></button>
                        </div>
                    </div>
                </div>
                <div className="card-footer text-center">
                    <button className="btn btn-success bi bi-play"></button>
                    <button className="btn btn-danger mx-2 bi bi-pause"></button>
                </div>
            </div>
        </div>
    );
}
 Summary Flow (Learning Order):
Event Binding → Learn all types: Mouse, Keyboard, Button, State.

Timer Events → setTimeout, clearTimeout, setInterval, clearInterval.

Throttle Concept → Use setInterval to control frequency.

useRef() Hook → Learn how to use useRef for timers or process control.

Stopwatch App → Apply useRef() and setInterval() for a timer UI.

API with useRef → Control API calls (e.g., carousel) using useRef().

4/08
=====

Ex: Throttle 

carousel-demo.jsx



import axios from "axios"

import { useEffect, useRef, useState } from "react"





export function CarouselDemo(){



    const [product, setProduct] = useState({id:0, title:null, description:null, image:null, category:null, price:0, rating:{rate:0, count:0}});

    const [status, setStatus] = useState(null);



    let productId = useRef(1);

    let thread = useRef(null);



    function LoadProductManually(id){

        axios.get(`https://fakestoreapi.com/products/${id}`)

        .then(response=>{

            setProduct(response.data);

        })

        setStatus('Slide Show - Manual');

    }



    function LoadProductAuto(){

        productId.current = productId.current + 1;

        axios.get(`https://fakestoreapi.com/products/${productId.current}`)

        .then(response=>{

            setProduct(response.data);

        })

        setStatus('Slide Show - Auto');

    }



    function handleNextClick(){

        productId.current = productId.current + 1;

        LoadProductManually(productId.current);

    }

    function handPreviousClick(){

        productId.current = productId.current - 1;

        LoadProductManually(productId.current);

    }

    function handleSeekbarChange(e){

         productId.current = parseInt(e.target.value);

         LoadProductManually(productId.current);

    }



    function handlePlayClick(){

        thread.current = setInterval(LoadProductAuto, 3000);

        setStatus('Slide Show - Auto');

    }

    function handlePauseClick(){

        clearInterval(thread.current);

        setStatus('Slide Show - Paused');

    }



    useEffect(()=>{

        LoadProductManually(1);

    },[])



    return(

        <div className="container-fluid d-flex justify-content-center">

            <div className="card w-50 p-2 mt-4">

                <div className="card-header text-center">

                    <div>{product.title}</div>

                    <div className="fw-bold">{status}</div>

                </div>

                <div className="card-body">

                    <div className="row">

                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">

                            <button onClick={handPreviousClick} className="btn btn-dark bi bi-chevron-left"></button>

                        </div>

                        <div className="col-10">

                            <img src={product.image} width="100%" height="400" />

                            <div className="mt-2">

                                <input type="range" onChange={handleSeekbarChange} min="1" max="20" value={productId.current} className="form-range" />

                            </div>

                        </div>

                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">

                            <button onClick={handleNextClick} className="btn btn-dark bi bi-chevron-right"></button>

                        </div>

                    </div>

                </div>

                <div className="card-footer text-center">

                    <button onClick={handlePlayClick} className="btn btn-success bi bi-play"></button>

                    <button onClick={handlePauseClick} className="btn btn-danger mx-2 bi bi-pause"></button>

                </div>

            </div>

        </div>

    )

}



Summary

1. Mouse Events

2. Keyboard Events

3. Button Events

4. Element State Events

5. Timer Events

6. Clipboard Events

       onCut

       onCopy

       onPaste



                                                   React Form Events

 - React requires various event binding techniques to handle forms.

 - React recommends to use 3rd party form libraries to design and validate forms.

 - The popular 3rd party form libraries are

           a) Formik

           b) React Hook Form

           c) Telerik Kendo Form  etc.



Ex: Handling Form without any 3rd party library



form-demo.jsx



import { useState } from "react";



export function FormDemo(){



    const [userDetails, setUserDetails] = useState({UserName:null, Mobile:null, City:null});



    function handleSubmit(e){

        e.preventDefault();

        alert('Form Submitted');

        console.log(userDetails);

    }



    function handleNameChange(e){

        setUserDetails(

            {

                UserName: e.target.value,

                Mobile: userDetails.Mobile,

                City: userDetails.City

            }

        )

    }



    function handleMobileChange(e){

        setUserDetails(

            {

                UserName: userDetails.UserName,

                Mobile: e.target.value,

                City: userDetails.City

            }

        )

    }



    function handleCityChange(e){

        setUserDetails(

            {

                UserName: userDetails.UserName,

                Mobile: userDetails.Mobile,

                City: e.target.value

            }

        )

    }



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={handleSubmit}>

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={handleNameChange} name="UserName" /></dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={handleMobileChange} name="Mobile" /></dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={handleCityChange}>

                            <option>Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}

 



Formik for React Forms: 

 - Formik is a 3rd party form library for React.

 - It provides pre-defined services using hooks and components.

 - It simplifies the form interactions and enables security. 



1. Install Formik 



       > npm install formik —save



2. Import “useFormik()” hook into component. 



   import  { useFormik }  from “formik”;



3. Configure the form using useFormik hook



    const formik = useFormik({ 

   

               initialValues: { },                  // refers to the form values that formik handles 

               onSubmit: ()=>{ },              // It defines actions to perform on submit

               validate: ()=>{ },                  // It uses a function to validate the form values.

               validationSchema:()=>{}, // It uses a function that returns validation schema. 

               enableReinitialize: true/fasle   // Allows reinitialization [two way binding]  

     })



4. Bind formik events with form elements



       <form  onSubmit={ formik.handleSubmit } > 



       <input type=“text”  onChange={ formik.handleChange } />

       <select onChange= { formik.handleChange } />



Note: Every form element requires a “name” attribute and it must map with formik initialValues. 



5. Formik provides built in event handlers like



           formik.handleChange

           formik.handleBlur

           formik.handleSubmit 

           etc.



   Event handler requires events like

   

           onSubmit

           onChange

           onBlur 

           etc.



Ex:

 form-demo.jsx



import { useState } from "react";

import { useFormik } from "formik";



export function FormDemo(){



    

    const formik = useFormik({

         initialValues: {

            UserName: null, 

            Mobile: null,

            City: null

         },

         onSubmit: (user)=>{

             console.log(user);

         }

    })



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={formik.handleSubmit} >

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={formik.handleChange}  name="UserName" /></dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={formik.handleChange} name="Mobile" /></dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={formik.handleChange} >

                            <option>Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}



Formik Validation: 

 - Validation is the process of verifying user input. 

 - Validation is required to ensure that contradictory and unauthorised data is not get stored into database. 

 - Formik allows to configure custom validation function, where developer have to define

   Validations manually. 

 - Formik supports validation schema, which provides built-in validation services.



Ex: Custom Validation Function



import { useState } from "react";

import { useFormik } from "formik";



export function FormDemo(){



    function ValidateUser(user){

        var errors = {UserName:'', Mobile:'', City:''};



        if(user.UserName.length===0) {

            errors.UserName = 'User Name Required';

        } else {

            if(user.UserName.length<4){

                errors.UserName = 'Name too short';

            }

        }



        if(user.Mobile.length===0){

            errors.Mobile = 'Mobile Required';

        } else {

            if(user.Mobile.match(/\+91\d{10}/)) {

                errors.Mobile = '';

            } else {

                errors.Mobile = 'Invalid Mobile';

            }

        }



        if(user.City === '-1') {

            errors.City = 'Please select your city';

        }



        return errors;

    }

    

    const formik = useFormik({

         initialValues: {

            UserName: '', 

            Mobile: '',

            City: ''

         },

         validate: ValidateUser,

         onSubmit: (user)=>{

             console.log(user);

         }

    })



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={formik.handleSubmit} >

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={formik.handleChange}  name="UserName" /></dd>

                    <dd className="text-danger">{formik.errors.UserName}</dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={formik.handleChange} name="Mobile" /></dd>

                    <dd className="text-danger">{formik.errors.Mobile}</dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={formik.handleChange} >

                            <option value="-1">Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                    <dd className="text-danger">{formik.errors.City}</dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}