?/07
=====

Features of React:
1. It uses "Virtual DOM".
	- It is a copy of actual DOM in memory.
	- Application update the virtual DOM and later commits with actual DOM.
	- It makes the rendering appear faster than normal. 

2. It is component based.
	- It enables easy reusability.
	- Easy to extend
	- Make loosely coupled and extensible.
	- Easy to test 

3. Modular Approach 
	- It uses only what is required for application.
	- Application specific framework or library.
	- It makes application light weight and faster.

4. Server Side Rendering with Framework like Next JS
	- Components can pre-render on server.
	- This makes server side interactions faster.

Issues with React:
1. It is not designed for what you are using.
2. Hence lot of GAP's.
3. You need lot of 3rd party plugins. 
4. Pace of development is very fast.
5. No proper documentation. 


Using React in existing web application:

1. Download and Install  Node JS on your PC

2. Download and Install Visual Studio Code Editor

3. Install Live Server plugin for VS code

4. Create a new project folder

		D:\web-app

5. Open in VS code

6. Create the file system for traditional web application

	> npm  init  -y			[ package.json ]

		D:\web-app
		|
		|_package.json
		|_public
		|_src
		|_readme.md

7. Add pages 

		index.html		// at root level
		home.html		// in public folder

8. React up to version 18x provides a legacy library to import and use in page.
	- React requires 3 basic libraries
		a) react
		b) react-dom
		c) babel
	- "react" is a core library that provides access to all react services.
	- "react-dom" is virtual DOM library.
	- "babel" is a JavaScript compiler used for React.

Note: You can use CDN links from official sources. 
	  You can also download using package managers.

Version 17x & 18x:

	- Visit  "https://legacy.reactjs.org/"
	- Go to "doc" [documentation]
	- Select CDN links
	- Copy CDN for production or development 

			react.development.js
			react-dom.development.js		=> add to your home page

	- Visit "https://babeljs.io/"
	- Go to "docs"
	- Go to "Integration Packages"
	- Select "@babel/standalone"
	- Copy CDN and paste into your page.

Ex:
1. index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Welcome to Web App</h1>
    React is working in <a href="./public/home.html"> Home page</a>.
</body>
</html>

2. home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script type="text/babel">
        /* 17x
         ReactDOM.render("Welcome to React JS", document.getElementById("root"));
         */
         var root = ReactDOM.createRoot(document.getElementById("root"));
         root.render("Hello ! React 18");
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>

?/07
=====

React in Existing Application [ React 18 ]
	- react
	- react-dom
	- babel

React up to 17x version:

	ReactDOM.render("Element|Markup", document.getElementById("root"));

React 18x version:

	const  root = ReactDOM.createRoot(document.getElementById("root"));
	root.render("Element | Markup");


Note: ReactDOM is a base for creating "Virtual DOM".

Download Libraries:

1. Open terminal in your project

2. Run the following commands

		> npm  install  react@18   react-dom@18   @babel/standalone  --save

3. All library files are copied into "node_modules".

4. Link the following files to your HTML page

   <script  src="../node_modules/react/umd/react.development.js"> </script>
   <script  src="../node_modules/react-dom/umd/react-dom.development.js"> </script>
   <script  src="../node_modules/@babel/standalone/babel.js"> </script>

Note: React uses JavaScript XML [ JSX ] as language. 
	  JSX can't be translated using JavaScript interpreter in browser.
	  Hence your script for React requires the MIME type as:

		a) text/jsx
		b) text/babel

	<script type="text/jsx  or text/babel">
	</script>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">
        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render("Welcome to React 18");
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>
		
					  React Components
- React is component based.
- Components enable easy reusability and extensibility. 
- A component comprises of 3 basic elements

	1. Presentation		[with HTML]
	2. Styles				[with CSS]
	3. Logic				[with JSX or TSX]

- React components are designed by using function or class. 
- Class components are still supported by React but not recommended in new code.

Function Components:

1. You can configure a function using declaration or expression. 

	Declaration:
		function Name()
		{
		}

	Expression:
		const Name = function(){ 

		}


2. Every component function name must start with uppercase letter.

3. Component function can't be void type.

4. Component function must always return a JSX element. 

Syntax:
		function  Login()
		{
		   return (<JSX></JSX>);
		}

5. Component function must return only one fragment. 

		function Login()
		{
		  return (
			      <h3>User Login </h3>		=> invalid
			      <p> Welcome </p>
			     );
		}


		function Login()
		{
		  return (
			     <div>
					... your content..		=> valid
			     </div>
			    )
		 }

6. JSX function component can't have elements with void syntax.
    Every element must have an end token. 
	
		<img> </img>		=> valid
		<img />			=> valid
		<img>			=> invalid
		<input type="text" />

7. JSX element can't have attributes, you have to configure only properties.

		<img class="" />		invalid
		<img className="" />	valid

8. Components are accessed and rendered as JSX elements

		function Login()
		{
		  render (<JSX></JSX>);
		}

		root.render(<Login> </Login>);
		root.render(<Login />);

Ex:
home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>React Page</title>
    <style>
        nav {
            display: flex;
            justify-content: space-between;
            border:1px solid gray;
            padding: 20px;
        }
    </style>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">

        function Login()
        {
            return(
                <div>
                    <h2>User Login</h2>
                    <dl>
                     <dt>User Name </dt>
                     <dd><input type="text" /></dd>    
                     <dt>Password </dt> 
                     <dd><input type="password" /></dd>
                    </dl>
                    <button>Login</button>
                </div>
            )
        }

        function SearchBar(){
            return(
                <div>
                    <input type="text" placeholder="Search Amazon.in" />
                    <button>Search</button>
                </div>
            )
        }
        function NavBar(){
            return(
                <nav>
                <span>Amazon </span>
                <SearchBar />
                <span>Home</span>
                <span>About</span>
                <span>Contact</span>
                </nav>
            )
        }

        const root = ReactDOM.createRoot(document.getElementById("root"));
        root.render(
             <div>
                <NavBar/>
                <Login />
             </div>
            );
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>



21/07
======

React Components
- Function Components
- JSX Rules

					Creating a new React SPA

- You can create a new web application manually or by using any bundling tool. 
- The popular bundling tools for Web are:
	 - Webpack
	 - Parcel
	 - Vite etc.

- Bundling tools provide a scaffold approach where application is configured and file system is designed according to developer requirements. 

Create React App with Vite: 

1. Open any location on your PC where you want to create react app.

2. Run the command [ from command prompt ]

		E:\> npm  create  vite@latest   app_name  -- --  template  react

    Note: The default language for "react" template is JavaScript.
	
		> Framework		:  React
		> Variant 			: JavaScript 

3. Change into project folder and run the command 

		E:\app_name> npm  install

     It will install all dependencies required for project.

4. Open project folder in VS code

5. You can view the following file system


	File / Folder		Description
	------------------------------------------------------------------------------------------------------
	node_modules 	comprises of all library files installed for project.

	public			comprises of all static resources like, html, images etc.

	src				comprises of all dynamic resources like .js, .jsx, .ts, .css, .scss..

	.gitignore			configures the resources to ignore while publishing to GIT.

	eslint.config.js		It is JavaScript language configuration & analysis tool. 

	index.html		It is the startup page for project.

	package.json		]  comprises of application meta data, you can configure
	package-lock.json	]  scripts, commands, versions etc.


	Readme.md		It is a help document by developers for developers. 

	vite.config.js		It is bundler configuration to plugin various external libraries
					or frameworks required for application.

6. Run application using the following command

	> npm  run dev			[for development]


    Application starts on local server   "http://localhost:5173/".

    You can request from browser.

React High Level Flow:
1. You can request react application from browser 

		http://localhost:5173

2. Browser uses the event "DOMContentLoaded", which loads static DOM of "Index.html".

3. Index page loads  "main.jsx", which is entry point for react application. 

4. "src/main.jsx" is create a virtual DOM and renders "App" component, which is the default component created for your application. 

	createRoot(document.getElementById("root")).render(
	   <React.Strict>
		<App />
	  </React.Strict>

	Note:  Alias of React.Strict is  <StrictMode>

Creating a custom component:

- Every component in development environment comprises of 3 files

	a) component.jsx		comprises of markup and logic
	b) component.css		comprises of styles
	c) component.test.jsx	comprises test cases used for testing component

- Create a new folder "components" and keep in "src".

- Add a folder by name "login" into components with files

		login.jsx
		login.css

- login.jsx   code

	export  function Login()
	{
	   return(
		   <>
			... your design ...
		   </>
		);
	}

- Go to "main.jsx" and import login 

	import  { Login } from  "../component/login/login.jsx";

	<StrictMode>
		<Login />
	</StrictMode>


?/07
=====

Creating React Application using Vite Bundler 
File System in React JavaScript Template
Execution Flow - High Level

	index.html => main.jsx => create virtual DOM => render "app" component

Note: You have to import CSS file into JSX component in order to use the styles.
	  It is always recommended not to use type selector for element styles, until you
	  want same across all components.

Syntax:
		login.jsx
		
		import  './login.css';

Enable bootstrap for React application:

1. Install bootstrap and icons for application

	> npm  install  bootstrap   bootstrap-icons --save

2. Go to main.jsx  and import following files 

	import '../node_modules/bootstrap/dist/css/bootstrap.css';
	import '../node_modules/bootstrap-icons/font/bootstrap-icons.css';

3. You can use icons and bootstrap classes

	<div className='bi bi-person-circle'> User Login </div>

	<input type="text"  className='form-control' />


Ex:
1. Add a new folder into  src/components  by name  "Netflix"

2. Add following component files into Netflix folder

		netflix-index.jsx
		netflix-header.jsx
		netflix-section.jsx
		netflix-main.jsx

		netflix-index.css
		netflix-section.css

3. Go to main.jsx and setup Netflix Index as startup 

	<StrictMode>
	   <NetflixIndex />
	</StrictMode>


netflix-index.css 

.banner {
    background-image: url("/public/netflix-banner.jpg");
    background-size: cover;
    height: 100vh;
}
.shade {
    background-color: rgba(0,0,0,0.7);
    height: 100vh;
}

netflix-index.jsx

import './netflix-index.css';
import { NetflixHeader } from './netflix-header';
import { NetflixSection } from './netflix-section';

export function NetflixIndex(){
    return(
        <div className="banner">
          <div className='shade'>
              <NetflixHeader />
              <NetflixSection />
          </div>
        </div>
    )
}

netflix-header.jsx


export function NetflixHeader(){
    return(
        <header className="d-flex justify-content-between p-4">
            <div className="h1 text-danger fw-bold">
                NETFLIX
            </div>
            <div className="d-flex align-items-center justify-content-center">
                <div>
                    <div className="input-group">
                   <span className="bi bi-translate input-group-text"></span> 
                   <select className="form-select">
                      <option>Language</option>
                   </select>
                    </div>
                </div>
                <button className="btn btn-danger mx-4">Sign In</button>
            </div>
        </header>
    )
}

netflix-section.css 

.section {
    padding-top: 50px;
    font-family: Arial;
}
.section-title {
    font-size: 60px;
    font-weight: bold;
}
.section-subtitle {
    font-size: 25px;
}

netflix-section.jsx

import { NetflixMain } from './netflix-main';
import './netflix-section.css';

export function NetflixSection(){
    return(
        <section className="text-white section text-center mt-4">
           <div className="section-title"> Unlimited movies, TV <br/> shows and more </div>
           <div className="section-subtitle"> Starts at ₹149. Cancel at any time. </div>
           <NetflixMain />
        </section>
    )
}

netflix-main.jsx



export function NetflixMain(){
    return(
        <main>
            <p>Ready to watch? Enter your email to create or restart your membership.</p>
            <div className="d-flex justify-content-center">
                <div className="mt-3">
                    <div className="input-group input-group-lg">
                    <input type="email" className="form-control mx-2" placeholder="Your email address" />
                    <button className="btn btn-danger"> Get Started <span className="bi bi-chevron-right"></span> </button>
                    </div>
                </div>
            </div>
        </main>
    )
}

					 Data Binding & State in Component
- Data Binding is the process of accessing data from source and binding to UI elements.
- It also includes identifying changes in data and update back to the source. 
		
		
		Fetching from source and bind to UI		=> One Way Binding
		Identify changes in UI and update back	=> Two Way Binding

- React implicitly supports only "One Way Binding".
- You have to explicitly configure "Two Way Binding". 
- React uses "{ }" as data binding expression. 

Syntax:
		var uname = "John";

		<p> Hello !  {uname} </p>

		<input type="text"  value={uname}  />

- You can bind dynamic values into a string along with JavaScript binding expression 
  "${ }". However it is supported only for string enclosed in backtick. 

Syntax:
		var bgstyle = "bg-danger";

		<p className={`text-white text-center ${bgstyle}`}>

		<p  className={ "text-white text-center " + bgstyle }>



23/07
======

Components Hierarchy 
Data Binding
One Way Binding
Binding Expressing { }   ${ } [backtick]

						    Component State

- Web application uses "http / https" as protocol.
- They are state less protocols. 
- They can't remember information between requests. 
- Hence various state management techniques are required. 
- It is always recommended to use a state for configuring data in a component. 
- Variables are immutable hence it is not recommended to handle data with variables. 
- State is mutable and there are various techniques in React 
		useState()
		useReducer()
		useContext()
		useRef()
		useMemo()
		useCallback()
		Local Storage
		Session Storage
		Cookies 
		Redux etc..

Component Local State:
 - Every React component is configured with a local state.
 - It is created while creating component. 
 - A component is create when you request the component.
 - It is destroyed automatically when you move from one component to another. 
 - It can be used across multiple requests of component, but can't be used across 
   components. 
 - React provides "useState()" hook to access and use the local state. 

FAQ: What is a hook in React?
Ans:   Hook is a service. It is a predefined business logic.
	  You can access, customize and implement according to requirements. 
	  It must be configured at high level in a component. 
	  You can't define inside any another block. 

useState() Hook:
 - It is a React hook used for accessing component local state.
 - It allows to access and use the local state with any type of data
		a) Primitive
		b) Non Primitive 
 - It requires a reference for accessing and initializing value into memory
		a) getter 	[ to access value ]
		b) setter	[ to initialize value] 

 - It returns a getter and setter, which you have to access using de-structure technique. 

Syntax:
		const  [getter, setter] = useState(value);

		{ getter }				// to access

		setter(newValue)		// to initialize new value 

		setter = value;			// invalid

FAQ's:
1. Can we use var and let to configure state?
A. Yes. But not recommended. 

2. Why developers prefer using "const" for state?
A. State must be initialized and should not allow assignment. 
    Hence "const" is good for state, as it will not allow assignment and require initialization.

3. If you use const, then how you will assign a new value into state?
A. We don't assign values into state, we reinitialize memory for storing a new value.


Component Mount Phase:
- A component is created when user requests the component. 
- State is configured while creating component. 
- You can initialize values into state while creating but can't reinitialize directly in 
  component.
- It requires a mount phase or any element event to reinitialize new values. 
- Component mount is configured by using "useEffect()" hook.

Syntax:
		useEffect(()=>{
		
			// actions to perform on mount

		},[ dependencies ]);

- Every component mounts only once, you can mount again by configuring the dependencies. 
- A component mounts again when ever the dependency detects a change.

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [price, setPrice] = useState(0);
    const [name, setName] = useState('');
    
    useEffect(()=>{
        setPrice(40500);
        setName('Samsung TV');
    },[]);

    return(
        <div className="container-fluid">
            <h2 className={`text-center text-warning p-3`}>Data Binding</h2>
            <dl>
                <dt>Product Name</dt>
                <dd>{name}</dd>
                <dt>Price</dt>
                <dd>{price}</dd>
            </dl>
        </div>
    )
}

Binding Various Data Types:

Primitive Types:

1. Number

	const [price] = useState(45000);

	- You can use all JavaScript number functions to handle numbers

		a) toFixed()
		b) toPrecision()
		c) toLocaleString()	 => regional language, style : currency, unit, precent 
		d) parseInt()
		e) parseFloat()
		f) isNaN()

Ex:
import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [price, setPrice] = useState(0);
    const [views] = useState(5600009);
    
    useEffect(()=>{
        setPrice(405000);
    },[]);

    return(
        <div className="container-fluid">
            <h2 className={`text-center text-warning p-3`}>Data Binding</h2>
            <dl>
                <dt>Price</dt>
                <dd>{price.toLocaleString('en-in', { style:'currency', currency:'INR'})}</dd>
                <dt>Views</dt>
                <dd>{views.toLocaleString('en-us', {notation:'compact'})}</dd>
            </dl>
        </div>
    )
}


24/07
======

- useState()
- useEffect()

1. Number

2. String
	" "
	'  '
	` `  ${ }

3. Boolean 
	- Boolean handles true or false as keywords.
	- JSX can't print boolean keywords.
	- It can't use decision making statements.
	- Hence you have to handle using operators and functions. 

Syntax:
	 const [stock] = useState(true);

	 {  (stock===true) ? 'true' : 'false' }

4. Undefined 

	- It specifies that value is not defined at compile time. 
	- It uses "undefined" keyword. 

Syntax:
	  const [price , setPrice]  = useState();

	  { (price) ? price : 'price not defined' }


5. Null

	- Null is a keyword returned when value is not provided at runtime of application.
	- It is verified by using null keyword.

Syntax:
	  const [price] = useState(prompt("Enter Price"));

	  {  (price===null) ? 'Not defined' : price }
 
Note: React application compiles and executes 2 times. One for development and
	  another for production, you can remove the <StrictMode> to execute only
	  for development.

Non Primitive Types:

1. Array
	- All array methods are same in React.
	- Configuration same as JavaScript.
	- To present array elements always use the implicit iterator functions.
		a) map()
		b) forEach()

	- React Fiber from react 19 recommends all async techniques.
	- Hence you have to use "map()" as iterator for reading elements.
	- JSX can dynamically create any element and append to page.
	- Every repeating element must have a unique "key".

Syntax:
	const [cities] = useState([ 'Delhi' , 'Hyd' ])


	<ol>
	  {
	    cities.map((city, index)=> <li key={index}> { city } </li>)
	  }

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [categories] = useState(['All','Electronics', 'Fashion','Footwear']);
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <header className="mt-4 p-4 d-flex justify-content-between border border-2">
                <div className="h3">Amazon</div>
                <nav>
                    {
                        categories.map((category, i)=> <span className="mx-4" key={i}><a href="#">{category}</a></span> )
                    }
                </nav>
                <div>
                    <span className="bi bi-heart"></span>
                    <span className="bi bi-cart3 mx-2"></span>
                </div>
            </header>
            <ol>
                {
                    categories.map((category,index)=><li key={index}>{category}</li>)
                }
            </ol>
            <select>
                {
                    categories.map((category, index)=><option key={index}>{category}</option>)
                }
            </select>
        </div>
    )
}

2. Object Type
	
	- Object is key and value collection. 
	- You can access the value with reference of key.
	- All object manipulations are same as in JavaScript.
		a) Object.keys()	returns all keys
		b) delete			removes a key
		c) in 			verifies key
		d) typeof			returns value type
		etc.

Ex:
data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [product] = useState({Name:'Samsung TV', Price: 45000, ShippedTo:['Delhi', 'Hyd'], Rating:{Rate:4.2, Count:600}});
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Product Details</h2>
            <dl>
                <dt>Name</dt>
                <dd>{product.Name}</dd>
                <dt>Price</dt>
                <dd>{product.Price}</dd>
                <dt>Shipped To</dt>
                <dd>
                    <ul>
                        {
                            product.ShippedTo.map(city=><li key={city}>{city}</li>)
                        }
                    </ul>
                </dd>
                <dt>Rating</dt>
                <dd>
                    {product.Rating.Rate} <span className="bi bi-star-fill text-success"></span> [{product.Rating.Count}]
                </dd>
            </dl>
        </div>
    )
}

Ex: Array of objects

data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [products] = useState([
         {Name: 'Samsung TV', Price: 45000},
         {Name: 'Mobile', Price: 23000},
         {Name: 'Nike Casuals', Price: 2560}
    ]);
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Products Table</h2>
            <table className="table table-hover">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        products.map((product,index)=><tr key={index}><td>{product.Name}</td><td>{product.Price}</td><td> <button className="btn btn-warning bi bi-pen-fill"></button> <button className="btn btn-danger bi bi-trash mx-2"></button> </td></tr>)
                    }
                </tbody>
            </table>
        </div>
    )
}


Ex: Nested Map

data-binding.jsx

import { useEffect, useState } from "react"

export function DataBinding(){
    
    const [data] = useState([
        {Category: 'Electronics', Products: ['Televisions', 'Mobiles']},
        {Category: 'Fashion', Products: ['Footwear', 'Jeans']}
    ])
    
    useEffect(()=>{
        
    },[]);

    return(
        <div className="container-fluid">
            <h2>Products</h2>
            <ol>
                {
                    data.map(item=>
                        <li key={item}>
                            {item.Category}
                            <ul>
                                {
                                    item.Products.map(product=><li key={product}>{product}</li>)
                                }
                            </ul>
                        </li>
                    )
                }
            </ol>
            <select>
                {
                    data.map(item=>
                    <optgroup key={item} label={item.Category}>
                        {
                            item.Products.map(product=><option key={product}>{product}</option>)
                        }
                    </optgroup>)
                }
            </select>
        </div>
    )
}


25/07
=======

Bind Data 
- map()
- key

Handling Date Type:
- JavaScript date type is configured using "Date()" constructor. 
- JavaScript uses a new dynamic memory to allocate date and time values.
- However React will not allow creating objects as React child.
- Hence you have to configure date using constructor without "new" operator. 

Syntax:
	  const  [dept] =  useState(Date());

- React will not allow to present date by using date functions of JavaScript like
	    toLocaleDateString()
	    toDateString()
	    toLocaleTimeString()
	    toTimeString()
	    etc..

- React requires 3rd party date libraries to manipulate date and time values
	a) moment
	b) dayjs
	c) luxon  etc.

Setup Moment:

1. Install moment for React

		> npm  install  moment --save

2. Import moment into component

		import   moment  from  "moment";

3. Apply format

	 const  [dept] = useState(Date());

	 {  moment(dept).format( 'string format' )  }

	 Date String Format:
	
			dddd		weekday name
			DD			date number
			MM			month number
			MMM		short month format
			MMMM		long month format
			yyyy			full year

Ex:
	       { moment(dept).format('dddd DD, MMMM yyyy) }


Regular Expression Type:
 - Regular expression is enclosed in "/  /".
 - It comprises of meta characters and quantifiers. 
 - It uses match() method to compare with a value. 

Ex:
data-binding.jsx

import { useEffect, useState } from "react";
import moment from "moment";

export function DataBinding(){
    
    const [mobile, setMobile] = useState('');
    
    useEffect(()=>{
        setMobile('+919876543210');
    },[]);

    return(
        <div className="container-fluid">
           <h2>Data Binding</h2>
           { (mobile.match(/\+91\d{10}/))?'Verified':'Invalid Mobile' }
        </div>
    )
}

			     React AJAX techniques for fetching data from API

- React can use JavaScript AJAX methods like
	a) XMLHttpRequest
	b) fetch() 

XMLHttpRequest:
 - It is the native browser object to make Ajax call from browser. 
 - It is default synchronous, you have to explicitly make it async. 
 - It returns only Text and XML response.
 - It requires explicit parsing methods for other data type.
 - It is not good in exceptions. 
 - It is not good in handling security. [ CORS, XSS, XSRF ]

Syntax:
 1. Create XMLHttpRequest object

	 var http = new XMLHttpRequest();

 2. Configure the request

	 http.open("method", "url", async:boolean);
	 http.send();

3. Execute the request

	http.onreadystatechange = function(){

	}

4. On Ready get the response 

	if (http.readyState === 4)
	{
		// http.responseText 
	}

Ex:
1. public/product.json

{
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79900,
    "image": "iphone-pink.jpg",
    "rating": {"rate":4.6, "ratings": 19560, "reviews": 5602},
    "offers": [
        "Bank Offer5% cashback on Flipkart Axis Bank Credit Card upto ₹4,000 per statement quarter",
        "Bank Offer5% cashback on Axis Bank Flipkart Debit Card up to ₹750",
        "Bank OfferFlat ₹10 Instant Cashback on Paytm UPI Trxns. Min Order Value ₹500. Valid once per Paytm account",
        "Special PriceGet extra ₹5000 off (price inclusive of cashback/coupon)"
    ]
}

2. component/databinding

	data-binding.jsx

import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

         var http = new XMLHttpRequest();
         http.open("get","product.json",true);
         http.send();

         http.onreadystatechange = function(){

               if(http.readyState===4){
                    setProduct(JSON.parse(http.responseText));
               }

         }

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}

Fetch Promise: 
 - It is JavaScript promise. 
 - Promise is by default async.
 - It returns the response in binary format. 
 - It requires explicit conversions. 
 - It is not good in security.

Syntax:
	
      fetch("url")
		.then(function(response){  convert to json })
		.then(function(data){  })
		.catch(function(error){ })
		.finally(function(){ })

Ex:
 data-binding.jsx

import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

          fetch('product.json')
          .then(response=> response.json())
          .then(product=>{
              setProduct(product);
          })

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}


28/07
======

3rd Party Services for API requests: Axios

- It is asynchronous.
- It returns data directly in the native format of its source. 
- Explicit conversions not required. 
- It is good in handling exceptions. 
- It returns various status codes. 
- It can cancel requests. 
- It is good in security, supports CORS, XSS, XSRF handling. 
     		CORS	- Cross Origin Resource Sharing
		XSS		- Cross Site Scripting Attacks
		XSRF	- Cross Site Request Forgery 
- It supports handling multiple requests simultaneously at the same time.


1. Install axios for project

	> npm  install  axios --save

2. Import axios into component

	import   axios  from  "axios";

3. Make axios request

	axios.get()
	axios.post()
	axios.put()	
	axios.delete() etc.

Syntax:
	 axios.get("url").then().catch().finally()

	then()		: It is a callback on resolve comprises of a response object with
				  various details like
					a) data
					b) statusCode
					c) statusText
					d) header etc.

Syntax:
	axios.get(url)
		 .then(function(response){
 			response.data;
			response.status;
			response.statusText;
			response.headers;
		})
		.catch(function(error){
			// returns error object
		})
		.finally(function(){
			// always 
		})

Ex:
1. public/product.json

{
    "title": "Apple iPhone 16 (Pink, 256 GB)",
    "price": 79900,
    "image": "iphone-pink.jpg",
    "rating": {"rate":4.6, "ratings": 19560, "reviews": 5602},
    "offers": [
        "Bank Offer5% cashback on Flipkart Axis Bank Credit Card upto ₹4,000 per statement quarter",
        "Bank Offer5% cashback on Axis Bank Flipkart Debit Card up to ₹750",
        "Bank OfferFlat ₹10 Instant Cashback on Paytm UPI Trxns. Min Order Value ₹500. Valid once per Paytm account",
        "Special PriceGet extra ₹5000 off (price inclusive of cashback/coupon)"
    ]
}

2. data-binding.jsx

import axios from "axios";
import { useEffect, useState } from "react";

export function DataBinding(){
    
    const [product, setProduct] = useState({title:'', price:0, image:'', rating:{rate:0, ratings:0, reviews:0}, offers:[]});
    
    function GetProduct(){

         axios.get('product.json').then(response=>{
              setProduct(response.data);
         })

    }


    useEffect(()=>{
        GetProduct();
    },[]);

    return(
        <div className="container-fluid">
            <div className="row mt-5">
                <div className="col-3">
                    <img src={product.image} width="100%" />
                </div>
                <div className="col-9">
                    <div className="fs-4">{product.title}</div>
                    <div className="mt-2">
                        <span className="badge bg-success rounded"> {product.rating.rate} <span className="bi bi-star-fill"></span> </span>
                        <span className="mx-4 fw-bold text-secondary"> {product.rating.ratings.toLocaleString()} ratings & {product.rating.reviews.toLocaleString()} reviews </span>
                    </div>
                    <div className="mt-3">
                        <div className="h1">{product.price.toLocaleString('en-in', { style:"currency", currency:"INR", minimumFractionDigits:0 })}</div>
                    </div>
                    <div className="mt-3">
                        <h5>Available Offers</h5>
                        <ul className="list-unstyled">
                            {
                                product.offers.map(offer=><li className="bi my-3 text-success bi-tag-fill" key={offer}> <span className="text-secondary">{offer}</span> </li>)
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    )
}

						 Class Binding
- It is the process of binding CSS classes to JSX elements.
- It requires className property.

Syntax:
	  <div  className={ `text-success ${dynamic-class}` }> </div>

	  const [dynamic-class] = useState('text-center');

					       Style Binding

- It is the process of binding inline styles to JSX elements.
- It requires "style" property.
- Style uses a JavaScript object with style attribute as key and style value as value.
- Style attribute is always camel case.
- Style value is always string.

			General				React Property
			----------------------------------------------------------
			font-size				fontSize
			text-align				textAlign
			color				color
			background-color		backgroundColor
			etc..
Syntax:
	 <h1  style={ { textAlign:'center', border:'2px solid red'} }>  Text </h1>

Ex:
	const [ styleObj ]  = useState( { textAlign: 'center', color: 'red' } );

	<h1  style={ styleObj } > Text </h1>


						Event Binding
- What is Event?
- What is Event Handler?
- What is Event Listener?
- Delegate and Observer.
- Sender and Subscriber.
- Event Propagation / Bubbling  [ stopPropagation() ]
- Prevent Default  [ preventDefault() ]
- Event Arguments 
	a) Default [this, event]
	b) Custom
- Event Looping 
- Event Profiling 

FAQ: What is Event Looping?
Ans:  It is the process of executing the tasks on specific event trigger.
	 Event uses a looping order to execute the given tasks.

	 Synchronous Task => Micro Task => Asynchronous Task
					     [ Promise ]		[ Async, Await ]

<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script>
          function ClickMe(){
               console.log("Start Request");
               setTimeout(function(){
                    console.log("Async Task");
               },0);
               Promise.resolve().then(function(){
                    console.log("Micro Task");
               })
               console.log("End Request");
          }
     </script>
</head>
<body>
     <button onclick="ClickMe()">Click</button>
</body>
</html>
						  Event Binding
					      [Synthetic Events]


29/07
======

React Synthetic Events:
- React Virtual DOM events are derived from Synthetic Event base.
- Synthetic Events map to actual DOM events.

	onClick [ Synthetic Event ]  => onclick [ Browser Event ]


Configuring Event:
 - Event uses "Delegate" mechanism.
 - Delegate is a function pointer.
 - Event follows a software design pattern called "Observer", which is a communication
   pattern.

Syntax:
		function  handleInsertClick()
		{
		}

		<button  onClick={ handleInsertClick }> Insert </button>

Event Arguments:
 - Every event can handle payload using default and custom arguments.
 - Payload is the data carried from one location to another. 
 - Actual DOM event can handle 
	a) Default Arguments [ this, event ]
	b) Custom Arguments 

- Virtual DOM event have a default "event" argument configured for event.
- It uses listener mechanism which provides "event" with both element and event details. 

Syntax:
	  function handleInsertClick(e)
	  {
		e.clientX;
		e.clientY;
		e.keyCode;
		e.which;
		e.ctrlKey; etc.

		e.target.id
		e.target.value 
		e.target.className etc.
	 }
	 
	<button onClick= {handleInsertClick }>

Ex:
event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    const [msg, setMsg] = useState(null);

    function handleInsertClick(e){
        setMsg('Inserted Successfully');
        console.log(`Button Value : ${e.target.value}\nButton Id : ${e.target.id}\nX Position : ${e.clientX}`)
    }
    return(
        <div className="container-fluid">
            <button value="Insert" id="btnInsert" onClick={handleInsertClick}>Insert</button>
            <p>{msg}</p>
        </div>
    )
}

- You can configure event to carry custom arguments along with default arguments.
- It requires a function in JSX to allocate memory on event trigger. 

Syntax:
	   <button  onClick={ (e) => handleInsertClick(e, custom_args) }>  


	    function handleInsertClick(e, ...args)
	    {
	    }

Ex:
 event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    const [msg, setMsg] = useState(null);

    function handleInsertClick(e,...product){
        setMsg('Inserted Successfully');
        let [id, name, stock, cities, rating] = product;
        console.log(`Id=${id}\nName=${name}\nStock=${stock}\nCities=${cities}\nRating=${rating.Rate}`);
        console.log(`Button Value=${e.target.value}\nX Position=${e.clientX}`);
    }
    return(
        <div className="container-fluid">
            <button value="Insert" id="btnInsert" onClick={(event)=> handleInsertClick(event, 1, 'TV', true, ['Delhi', 'Hyd'], {Rate:4.2})}>Insert</button>
            <p>{msg}</p>
        </div>
    )
}

Event Propagation & Prevent Default:

- Event propagation is a bubbling mechanism where the parent event is simulated on child trigger. 
- You can stop propagation by using event method "stopPropagation()".

Syntax:
	    function handleChildClick(e)		
	    {
		e.stopPropagation();
	    }

- Every generic element have a pre-defined functionality configured.  
- It executes along with the defined functionality. 
- You can stop default functionality by using event method "preventDefault()".

Syntax:
	  function handleSubmit(e)
	  {
		e.preventDefault();
	  }
	 <form  onSubmit={handleSubmit}>
	
Ex:
 event-binding.jsx

import { useState } from "react";

export function EventBinding(){

    function NavClick(){
        alert('Navbar Clicked - Navigate to Home');
    }
    function SearchClick(e){
        e.stopPropagation();
        alert('Search Clicked - Shows search results');
    }

    function SubmitClick(e){
        e.preventDefault();
        alert('Form Submitted');
    }
    
    return(
        <div className="container-fluid">
            <nav onClick={NavClick} className="p-2 border border-2 border-dark m-4">
                <h2>Amazon</h2>
                <button onClick={SearchClick} className="btn bi bi-search btn-warning"></button>
            </nav>
            <section className="m-4">
                <form onSubmit={SubmitClick}>
                    <h3>User Name</h3>
                    <input type="text" name="User" /> <button type="submit">Login</button> 
                </form>
            </section>
        </div>
    )
}

Event for Two Way Binding:
- React enables only One-Way-Binding implicitly. 
- It will not allow changes into element value.
- You can change element value only with "onChange" event.
- Two way data binding requires new value from element, which you can configure only with "onChange".

Syntax:
	 <input type="text"  onChange={handleNameChange}>
	 <select onChange={handleCityChange}>
	 <input type="checkbox" onChange={handleCheckChange}>

Ex:
 event-binding.jsx

 import { useState } from "react";

export function EventBinding(){

    const [uname, setUname] = useState('John');
    const [msg, setMsg] = useState(null);

    function handleNameChange(e){
        setUname(e.target.value);
    }
    function VerifyName(e){
        if(e.target.value==='David'){
            setMsg('Name Taken - Try another');
        } else {
            setMsg('Name Available');
        }
    }
    
    function handleBlur(){
        setMsg('');
    }


    return(
        <div className="container-fluid">
            <dl>
                <dt>User Name</dt>
                <dd><input type="text" onBlur={handleBlur} onKeyUp={VerifyName} onChange={handleNameChange} value={uname} /></dd>
                <dd>{msg}</dd>
            </dl>
            <h2>Hello ! {uname}</h2>
        </div>
    )
}

Synthetic Events
1. Mouse event
2. Keyboard 
3. Button
4. Touch
5. Timer
6. Form


30/07
=======

React Synthetic Events Notes
============================

1. Mouse Events
---------------
- onMouseOver
- onMouseOut
- onMouseDown
- onMouseUp
- onMouseMove

Example A: Image Preview on Mouse Over
---------------------------------------

File: public/mobiles.json
--------------------------
[
  { "img_src": "m1.png" },
  { "img_src": "m2.png" },
  { "img_src": "m3.png" },
  { "img_src": "m4.png" },
  { "img_src": "m5.png" }
]

File: src/components/mouse-demo/mouse-demo.jsx
----------------------------------------------
import axios from "axios";
import { useEffect, useState } from "react";
import './mouse-demo.css';

export function MouseDemo() {
  const [mobiles, setMobiles] = useState([{ img_src: null }]);
  const [previewSrc, setPreviewSrc] = useState('m1.png');

  useEffect(() => {
    axios.get('mobiles.json').then(response => {
      setMobiles(response.data);
    });
  }, []);

  function handleMouseOver(e) {
    setPreviewSrc(e.target.src);
  }

  return (
    <div className="container-fluid">
      <div className="row mt-5">
        <div className="col-1">
          {mobiles.map(mobile => (
            <div key={mobile.img_src} className="my-4 container-style">
              <img
                onMouseOver={handleMouseOver}
                src={mobile.img_src}
                width="50px"
                height="50px"
              />
            </div>
          ))}
        </div>
        <div className="col-11">
          <img width="400" height="400" src={previewSrc} />
        </div>
      </div>
    </div>
  );
}

File: src/components/mouse-demo/mouse-demo.css
----------------------------------------------
.container-style {
  border: 2px solid gray;
  width: 50px;
}

.container-style:hover {
  border: 2px solid blue;
  cursor: grab;
}

Example B: Mouse Animation on Click
------------------------------------

File: mouse-animation.css
--------------------------
@keyframes Spin {
  from {
    transform: rotate(0deg) scale(1);
  }
  to {
    transform: rotate(360deg) scale(2);
  }
}

File: mouse-animation.jsx
--------------------------
import { useState } from "react";
import './mouse-animation.css';

export function MouseAnimation() {
  const [styleObj, setStyleObj] = useState({
    animationName: 'Spin',
    animationDuration: '5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear'
  });

  function handleMouseDown() {
    setStyleObj({
      animationName: 'Spin',
      animationDuration: '1s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    });
  }

  function handleMouseUp() {
    setStyleObj({
      animationName: 'Spin',
      animationDuration: '5s',
      animationIterationCount: 'infinite',
      animationTimingFunction: 'linear'
    });
  }

  return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
      <div>
        <img
          onMouseDown={handleMouseDown}
          onMouseUp={handleMouseUp}
          style={styleObj}
          src="react.svg"
          width="200"
          height="200"
        />
      </div>
    </div>
  );
}

Example C: Image Follows Mouse Movement
----------------------------------------

File: mouse-move.jsx
---------------------
import { useState } from "react";

export function MouseMove() {
  const [imgPosition, setImgPosition] = useState({
    position: null,
    top: null,
    left: null
  });

  function handleMouseMove(e) {
    setImgPosition({
      position: 'fixed',
      left: e.clientX + 'px',
      top: e.clientY + 'px'
    });
  }

  return (
    <div onMouseMove={handleMouseMove}>
      <div style={{ height: '1000px' }}>
        <h1>Move your mouse pointer to test</h1>
      </div>
      <img style={imgPosition} width="50" height="50" src="flag.gif" />
    </div>
  );
}

2. Keyboard Events
-------------------
- onKeyUp
- onKeyDown
- onKeyPress

Notes:
------
* onKeyUp and onKeyDown are useful for detecting key interactions.
* onKeyPress is deprecated and should be avoided in modern apps.

Example: Username Validation
----------------------------

File: keydemo.jsx
------------------
import axios from "axios";
import { useEffect, useState } from "react";

export function KeyDemo() {
  const [users, setUsers] = useState([{ user_id: null }]);
  const [msg, setMsg] = useState(null);
  const [validationClass, setValidationClass] = useState(null);

  useEffect(() => {
    axios.get('users.json').then(response => {
      setUsers(response.data);
    });
  }, []);

  function VerifyUser(e) {
    for (let user of users) {
      if (user.user_id === e.target.value) {
        setMsg('User Id Taken - Try Another');
        setValidationClass('text-danger');
        return;
      }
    }
    setMsg('User Id Available');
    setValidationClass('text-success');
  }

  return (
    <div className="container">
      <h2>Register User</h2>
      <dl>
        <dt>User Id</dt>
        <dd><input type="text" onKeyUp={VerifyUser} /></dd>
        <dd className={validationClass}>{msg}</dd>
      </dl>
    </div>
  );
}


31/07
======

React Synthetic Events Notes
============================

1. Mouse Events
---------------
- onMouseOver
- onMouseOut
- onMouseDown
- onMouseUp
- onMouseMove

Example A: Image Preview on Mouse Over
--------------------------------------

File: public/mobiles.json
--------------------------
[
  { "img_src": "m1.png" },
  { "img_src": "m2.png" },
  { "img_src": "m3.png" },
  { "img_src": "m4.png" },
  { "img_src": "m5.png" }
]

File: src/components/mouse-demo/mouse-demo.jsx
----------------------------------------------
import axios from "axios";
import { useEffect, useState } from "react";
import './mouse-demo.css';

export function MouseDemo() {
  const [mobiles, setMobiles] = useState([{ img_src: null }]);
  const [previewSrc, setPreviewSrc] = useState('m1.png');

  useEffect(() => {
    axios.get('mobiles.json').then(response => {
      setMobiles(response.data);
    });
  }, []);

  function handleMouseOver(e) {
    setPreviewSrc(e.target.src);
  }

  return (
    <div className="container-fluid">
      <div className="row mt-5">
        <div className="col-1">
          {mobiles.map(mobile => (
            <div key={mobile.img_src} className="my-4 container-style">
              <img onMouseOver={handleMouseOver} src={mobile.img_src} width="50px" height="50px" />
            </div>
          ))}
        </div>
        <div className="col-11">
          <img width="400" height="400" src={previewSrc} />
        </div>
      </div>
    </div>
  );
}

File: src/components/mouse-demo/mouse-demo.css
----------------------------------------------
.container-style {
  border: 2px solid gray;
  width: 50px;
}

.container-style:hover {
  border: 2px solid blue;
  cursor: grab;
}

Example B: Mouse Animation on Click
-----------------------------------

File: mouse-animation.css
--------------------------
@keyframes Spin {
  from {
    transform: rotate(0deg) scale(1);
  }
  to {
    transform: rotate(360deg) scale(2);
  }
}

File: mouse-animation.jsx
--------------------------
import { useState } from "react";
import './mouse-animation.css';

export function MouseAnimation() {
  const [styleObj, setStyleObj] = useState({
    animationName: 'Spin',
    animationDuration: '5s',
    animationIterationCount: 'infinite',
    animationTimingFunction: 'linear'
  });

  function handleMouseDown() {
    setStyleObj({ ...styleObj, animationDuration: '1s' });
  }

  function handleMouseUp() {
    setStyleObj({ ...styleObj, animationDuration: '5s' });
  }

  return (
    <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
      <div>
        <img onMouseDown={handleMouseDown} onMouseUp={handleMouseUp} style={styleObj} src="react.svg" width="200" height="200" />
      </div>
    </div>
  );
}

Example C: Image Follows Mouse Movement
---------------------------------------

File: mouse-move.jsx
---------------------
import { useState } from "react";

export function MouseMove() {
  const [imgPosition, setImgPosition] = useState({
    position: null,
    top: null,
    left: null
  });

  function handleMouseMove(e) {
    setImgPosition({
      position: 'fixed',
      left: e.clientX + 'px',
      top: e.clientY + 'px'
    });
  }

  return (
    <div onMouseMove={handleMouseMove}>
      <div style={{ height: '1000px' }}>
        <h1>Move your mouse pointer to test</h1>
      </div>
      <img style={imgPosition} width="50" height="50" src="flag.gif" />
    </div>
  );
}

2. Keyboard Events
-------------------
- onKeyUp
- onKeyDown
- onKeyPress

Notes:
* onKeyUp and onKeyDown are useful for detecting key interactions.
* onKeyPress is deprecated and should be avoided in modern apps.

Example: Username Validation
----------------------------

File: keydemo.jsx
------------------
import axios from "axios";
import { useEffect, useState } from "react";

export function KeyDemo() {
  const [users, setUsers] = useState([{ user_id: null }]);
  const [msg, setMsg] = useState(null);
  const [validationClass, setValidationClass] = useState(null);

  useEffect(() => {
    axios.get('users.json').then(response => {
      setUsers(response.data);
    });
  }, []);

  function VerifyUser(e) {
    for (let user of users) {
      if (user.user_id === e.target.value) {
        setMsg('User Id Taken - Try Another');
        setValidationClass('text-danger');
        return;
      }
    }
    setMsg('User Id Available');
    setValidationClass('text-success');
  }

  return (
    <div className="container">
      <h2>Register User</h2>
      <dl>
        <dt>User Id</dt>
        <dd><input type="text" onKeyUp={VerifyUser} /></dd>
        <dd className={validationClass}>{msg}</dd>
      </dl>
    </div>
  );
}

3. Element State Events
------------------------
- onChange
- onBlur
- onFocus

Example: EMI Calculator
------------------------

File: emi-calculator.jsx
-------------------------
import { useState } from "react";

export function EMICalculator() {
  const [amount, setAmount] = useState(100000);
  const [years, setYears] = useState(1);
  const [rate, setRate] = useState(10.45);
  const [emi, setEmi] = useState(0);
  const [toggleResult, setToggleResult] = useState('d-none');

  function handleAmountChange(e) {
    setAmount(e.target.value);
  }

  function handleYearsChange(e) {
    setYears(e.target.value);
  }

  function handleRateChange(e) {
    setRate(e.target.value);
  }

  function handleCalculateClick() {
    var P = parseInt(amount);
    var N = parseInt(years) * 12;
    var R = parseFloat(rate) / 12 / 100;
    var EMI = P * R * (Math.pow(1 + R, N)) / (Math.pow(1 + R, N) - 1);
    setEmi(EMI);
    setToggleResult('d-block');
  }

  return (
    <div className="container-fluid">
      <div className="p-4 border border-2 mt-4">
        <h4 className="text-center">Personal Loan EMI Calculator</h4>

        <div className="row my-4">
          <div className="col">
            Amount you need ₹ <input onChange={handleAmountChange} type="text" value={amount} size="10" />
          </div>
          <div className="col">
            for <input type="text" onChange={handleYearsChange} size="2" value={years} /> years
          </div>
          <div className="col">
            interest rate <input onChange={handleRateChange} type="text" size="4" value={rate} /> %
          </div>
        </div>

        <div className="my-4 row">
          <div className="col">
            <input type="range" onChange={handleAmountChange} value={amount} className="form-range" step="10000" min="100000" max="1000000" />
            <div>
              <span>₹ 1,00,000/-</span>
              <span className="float-end">₹ 10,00,000/-</span>
            </div>
          </div>
          <div className="col">
            <input type="range" onChange={handleYearsChange} value={years} className="form-range" min="1" max="5" />
            <div>
              <span>1 Year</span>
              <span className="float-end">5 Years</span>
            </div>
          </div>
          <div className="col">
            <input type="range" onChange={handleRateChange} value={rate} className="form-range" step="0.01" min="10.45" max="18.45" />
            <div>
              <span>10.45%</span>
              <span className="float-end">18.45%</span>
            </div>
          </div>
        </div>

        <div className="row mt-5">
          <div className="col text-end">
            <button onClick={handleCalculateClick} className="btn btn-primary">Calculate</button>
          </div>
        </div>

        <div className={`row mt-5 ${toggleResult}`}>
          <div className="col">
            <div className="text-center fs-4">
              Your EMI amount is <span className="fw-bold">
                {emi.toLocaleString('en-in', {
                  style: 'currency',
                  currency: 'INR',
                  minimumFractionDigits: 2,
                  maximumFractionDigits: 2
                })}
              </span> for next {years * 12} months.
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

4. Button Events
-----------------
- onClick
- onDoubleClick
- onContextMenu

Note:
-----
- Synthetic events can’t disable real DOM behavior directly.
- Use native DOM event listeners (like `document.oncontextmenu`) to override.

Syntax:
-------
function syntheticEvent() {
  document.onactualDOMEvent = function() {
    return false;
  };
}

Example: Button Actions
------------------------

File: button-demo.jsx
----------------------
export function ButtonDemo() {
  function handleDoubleClick() {
    window.open('m1.png', 'Mobile', 'width=400 height=400');
  }

  function handleContextMenu() {
    document.oncontextmenu = function () {
      alert('Right Click Not Allowed');
      return false;
    };
  }

  return (
    <div onContextMenu={handleContextMenu} className="container-fluid">
      <h2>Button Events</h2>
      <img onDoubleClick={handleDoubleClick} src="m1.png" width="150" height="150" />
      <p>Double Click to view large</p>
    </div>
  );
}

5. Timer Events
----------------
- setTimeout()
- clearTimeout()
- setInterval()
- clearInterval()

Debounce:
---------
- Delays execution of a task.
- Task is stored in memory using setTimeout.
- Can be cancelled using clearTimeout.
- Use useRef() to store timeout ID reference.

Syntax:
-------
setTimeout(function() { }, interval);

// Use clearTimeout(ref.current) to cancel


1/08
=====

 1. Event Binding Types
Event Binding is the process of assigning an event (like a click, keypress, etc.) to a handler function. The common types of events are:

 Mouse Events
onClick

onMouseOver

onMouseOut

onMouseMove

 Keyboard Events
onKeyDown

onKeyUp

onKeyPress

 Button Events
onClick

onDoubleClick

onSubmit (if the button is in a form)

 Element State Events
onChange

onFocus

onBlur

 Timer Events
Used to delay or repeat tasks using JavaScript timers.

js
Copy
Edit
setTimeout(callback, delay);
clearTimeout(reference);

setInterval(callback, interval);
clearInterval(reference);
 2. Throttling in React (Using setInterval)
 What is Throttling?
Throttling is the process of invoking a function repeatedly at regular intervals to limit the execution rate.

Executes at fixed intervals using setInterval().

Can be stopped using clearInterval().

 Syntax:
js
Copy
Edit
let ref = setInterval(() => {
   // task
}, 1000);

clearInterval(ref);
Throttle Demo: throttle-demo.jsx
jsx
Copy
Edit
import { useEffect, useState } from "react"

export function ThrottleDemo() {
    const [clock, setClock] = useState();

    function GetTime() {
        var now = new Date();
        setClock(now.toLocaleTimeString());
    }

    useEffect(() => {
        setInterval(GetTime, 1000);
    }, [])

    return (
        <div>
            <h1 className="text-center">{clock}</h1>
        </div>
    );
}
 3. useRef() Hook
🔸 What is useRef()?
Used to create mutable values that persist across renders.

Commonly used to store timers, DOM references, or counters.

Do not use useRef() values for direct rendering in the UI.

🔸 Syntax:
js
Copy
Edit
const ref = useRef(null);
ref.current = value;
 4. Stopwatch Example using useRef()
stop-watch.jsx
jsx
Copy
Edit
import { useRef, useState } from "react"

export function StopWatch() {
    const [hrs, setHours] = useState(0);
    const [min, setMin] = useState(0);
    const [sec, setSec] = useState(0);
    const [milliSec, setMilliSec] = useState(0);

    let thread = useRef(null);

    var ms = 0, s = 0, m = 0, h = 0;

    function StartTimer() {
        ms++;
        setMilliSec(ms);
        if (ms === 999) {
            s++;
            setSec(s);
            ms = 0;
        }
    }

    function handleStartClick() {
        thread.current = setInterval(StartTimer, 1);
    }

    function handleClearClick() {
        clearInterval(thread.current);
        setMilliSec(0);
        setSec(0);
        setMin(0);
        setHours(0);
    }

    return (
        <div className="container-fluid p-4">
            <div className="d-flex justify-content-center">
                <div className="w-50 fs-4">
                    <div className="row">
                        <div className="col p-3 border border-1"><span>{hrs} h</span></div>
                        <div className="col p-3 border border-1"><span>{min} m</span></div>
                        <div className="col p-3 border border-1"><span>{sec} s</span></div>
                        <div className="col p-3 border border-1"><span>{milliSec} ms</span></div>
                    </div>
                    <div className="mt-3">
                        <button onClick={handleStartClick} className="btn btn-primary">Start</button>
                        <button onClick={handleClearClick} className="btn mx-2 btn-secondary">Clear</button>
                    </div>
                </div>
            </div>
        </div>
    );
}
 5. API Interaction with useRef(): Carousel Example
🔸 API Used:
https://fakestoreapi.com/products/1

carousel-demo.jsx
jsx
Copy
Edit
import axios from "axios"
import { useEffect, useRef, useState } from "react"

export function CarouselDemo() {
    const [product, setProduct] = useState({ id: 0, title: null, description: null, image: null, category: null, price: 0, rating: { rate: 0, count: 0 } });

    let productId = useRef(1);

    function LoadProductManually(id) {
        axios.get(`https://fakestoreapi.com/products/${id}`)
            .then(response => setProduct(response.data));
    }

    function handleNextClick() {
        productId.current += 1;
        LoadProductManually(productId.current);
    }

    function handPreviousClick() {
        productId.current -= 1;
        LoadProductManually(productId.current);
    }

    function handleSeekbarChange(e) {
        productId.current = e.target.value;
        LoadProductManually(productId.current);
    }

    useEffect(() => {
        LoadProductManually(1);
    }, []);

    return (
        <div className="container-fluid d-flex justify-content-center">
            <div className="card w-50 p-2 mt-4">
                <div className="card-header text-center">{product.title}</div>
                <div className="card-body">
                    <div className="row">
                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">
                            <button onClick={handPreviousClick} className="btn btn-dark bi bi-chevron-left"></button>
                        </div>
                        <div className="col-10">
                            <img src={product.image} width="100%" height="400" />
                            <div className="mt-2">
                                <input type="range" onChange={handleSeekbarChange} min="1" max="20" value={productId.current} className="form-range" />
                            </div>
                        </div>
                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">
                            <button onClick={handleNextClick} className="btn btn-dark bi bi-chevron-right"></button>
                        </div>
                    </div>
                </div>
                <div className="card-footer text-center">
                    <button className="btn btn-success bi bi-play"></button>
                    <button className="btn btn-danger mx-2 bi bi-pause"></button>
                </div>
            </div>
        </div>
    );
}
 Summary Flow (Learning Order):
Event Binding → Learn all types: Mouse, Keyboard, Button, State.

Timer Events → setTimeout, clearTimeout, setInterval, clearInterval.

Throttle Concept → Use setInterval to control frequency.

useRef() Hook → Learn how to use useRef for timers or process control.

Stopwatch App → Apply useRef() and setInterval() for a timer UI.

API with useRef → Control API calls (e.g., carousel) using useRef().

4/08
=====

Ex: Throttle 

carousel-demo.jsx



import axios from "axios"

import { useEffect, useRef, useState } from "react"





export function CarouselDemo(){



    const [product, setProduct] = useState({id:0, title:null, description:null, image:null, category:null, price:0, rating:{rate:0, count:0}});

    const [status, setStatus] = useState(null);



    let productId = useRef(1);

    let thread = useRef(null);



    function LoadProductManually(id){

        axios.get(`https://fakestoreapi.com/products/${id}`)

        .then(response=>{

            setProduct(response.data);

        })

        setStatus('Slide Show - Manual');

    }



    function LoadProductAuto(){

        productId.current = productId.current + 1;

        axios.get(`https://fakestoreapi.com/products/${productId.current}`)

        .then(response=>{

            setProduct(response.data);

        })

        setStatus('Slide Show - Auto');

    }



    function handleNextClick(){

        productId.current = productId.current + 1;

        LoadProductManually(productId.current);

    }

    function handPreviousClick(){

        productId.current = productId.current - 1;

        LoadProductManually(productId.current);

    }

    function handleSeekbarChange(e){

         productId.current = parseInt(e.target.value);

         LoadProductManually(productId.current);

    }



    function handlePlayClick(){

        thread.current = setInterval(LoadProductAuto, 3000);

        setStatus('Slide Show - Auto');

    }

    function handlePauseClick(){

        clearInterval(thread.current);

        setStatus('Slide Show - Paused');

    }



    useEffect(()=>{

        LoadProductManually(1);

    },[])



    return(

        <div className="container-fluid d-flex justify-content-center">

            <div className="card w-50 p-2 mt-4">

                <div className="card-header text-center">

                    <div>{product.title}</div>

                    <div className="fw-bold">{status}</div>

                </div>

                <div className="card-body">

                    <div className="row">

                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">

                            <button onClick={handPreviousClick} className="btn btn-dark bi bi-chevron-left"></button>

                        </div>

                        <div className="col-10">

                            <img src={product.image} width="100%" height="400" />

                            <div className="mt-2">

                                <input type="range" onChange={handleSeekbarChange} min="1" max="20" value={productId.current} className="form-range" />

                            </div>

                        </div>

                        <div className="col-1 d-flex flex-column justify-content-center align-items-center">

                            <button onClick={handleNextClick} className="btn btn-dark bi bi-chevron-right"></button>

                        </div>

                    </div>

                </div>

                <div className="card-footer text-center">

                    <button onClick={handlePlayClick} className="btn btn-success bi bi-play"></button>

                    <button onClick={handlePauseClick} className="btn btn-danger mx-2 bi bi-pause"></button>

                </div>

            </div>

        </div>

    )

}



Summary

1. Mouse Events

2. Keyboard Events

3. Button Events

4. Element State Events

5. Timer Events

6. Clipboard Events

       onCut

       onCopy

       onPaste



                                                   React Form Events

 - React requires various event binding techniques to handle forms.

 - React recommends to use 3rd party form libraries to design and validate forms.

 - The popular 3rd party form libraries are

           a) Formik

           b) React Hook Form

           c) Telerik Kendo Form  etc.



Ex: Handling Form without any 3rd party library



form-demo.jsx



import { useState } from "react";



export function FormDemo(){



    const [userDetails, setUserDetails] = useState({UserName:null, Mobile:null, City:null});



    function handleSubmit(e){

        e.preventDefault();

        alert('Form Submitted');

        console.log(userDetails);

    }



    function handleNameChange(e){

        setUserDetails(

            {

                UserName: e.target.value,

                Mobile: userDetails.Mobile,

                City: userDetails.City

            }

        )

    }



    function handleMobileChange(e){

        setUserDetails(

            {

                UserName: userDetails.UserName,

                Mobile: e.target.value,

                City: userDetails.City

            }

        )

    }



    function handleCityChange(e){

        setUserDetails(

            {

                UserName: userDetails.UserName,

                Mobile: userDetails.Mobile,

                City: e.target.value

            }

        )

    }



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={handleSubmit}>

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={handleNameChange} name="UserName" /></dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={handleMobileChange} name="Mobile" /></dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={handleCityChange}>

                            <option>Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}

 



Formik for React Forms: 

 - Formik is a 3rd party form library for React.

 - It provides pre-defined services using hooks and components.

 - It simplifies the form interactions and enables security. 



1. Install Formik 



       > npm install formik —save



2. Import “useFormik()” hook into component. 



   import  { useFormik }  from “formik”;



3. Configure the form using useFormik hook



    const formik = useFormik({ 

   

               initialValues: { },                  // refers to the form values that formik handles 

               onSubmit: ()=>{ },              // It defines actions to perform on submit

               validate: ()=>{ },                  // It uses a function to validate the form values.

               validationSchema:()=>{}, // It uses a function that returns validation schema. 

               enableReinitialize: true/fasle   // Allows reinitialization [two way binding]  

     })



4. Bind formik events with form elements



       <form  onSubmit={ formik.handleSubmit } > 



       <input type=“text”  onChange={ formik.handleChange } />

       <select onChange= { formik.handleChange } />



Note: Every form element requires a “name” attribute and it must map with formik initialValues. 



5. Formik provides built in event handlers like



           formik.handleChange

           formik.handleBlur

           formik.handleSubmit 

           etc.



   Event handler requires events like

   

           onSubmit

           onChange

           onBlur 

           etc.



Ex:

 form-demo.jsx



import { useState } from "react";

import { useFormik } from "formik";



export function FormDemo(){



    

    const formik = useFormik({

         initialValues: {

            UserName: null, 

            Mobile: null,

            City: null

         },

         onSubmit: (user)=>{

             console.log(user);

         }

    })



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={formik.handleSubmit} >

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={formik.handleChange}  name="UserName" /></dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={formik.handleChange} name="Mobile" /></dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={formik.handleChange} >

                            <option>Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}



Formik Validation: 

 - Validation is the process of verifying user input. 

 - Validation is required to ensure that contradictory and unauthorised data is not get stored into database. 

 - Formik allows to configure custom validation function, where developer have to define

   Validations manually. 

 - Formik supports validation schema, which provides built-in validation services.



Ex: Custom Validation Function



import { useState } from "react";

import { useFormik } from "formik";



export function FormDemo(){



    function ValidateUser(user){

        var errors = {UserName:'', Mobile:'', City:''};



        if(user.UserName.length===0) {

            errors.UserName = 'User Name Required';

        } else {

            if(user.UserName.length<4){

                errors.UserName = 'Name too short';

            }

        }



        if(user.Mobile.length===0){

            errors.Mobile = 'Mobile Required';

        } else {

            if(user.Mobile.match(/\+91\d{10}/)) {

                errors.Mobile = '';

            } else {

                errors.Mobile = 'Invalid Mobile';

            }

        }



        if(user.City === '-1') {

            errors.City = 'Please select your city';

        }



        return errors;

    }

    

    const formik = useFormik({

         initialValues: {

            UserName: '', 

            Mobile: '',

            City: ''

         },

         validate: ValidateUser,

         onSubmit: (user)=>{

             console.log(user);

         }

    })



    return(

        <div className="container-fluid">

            <h2>Register User</h2>

            <form onSubmit={formik.handleSubmit} >

                <dl>

                    <dt>User Name</dt>

                    <dd><input type="text" onChange={formik.handleChange}  name="UserName" /></dd>

                    <dd className="text-danger">{formik.errors.UserName}</dd>

                    <dt>Mobile</dt>

                    <dd><input type="text" onChange={formik.handleChange} name="Mobile" /></dd>

                    <dd className="text-danger">{formik.errors.Mobile}</dd>

                    <dt>City</dt>

                    <dd>

                        <select name="City" onChange={formik.handleChange} >

                            <option value="-1">Select City</option>

                            <option>Delhi</option>

                            <option>Hyd</option>

                        </select>

                    </dd>

                    <dd className="text-danger">{formik.errors.City}</dd>

                </dl>

                <button type="submit">Register</button>

            </form>

        </div>

    )

}

5/08
=====

- Formik Library
- useFormik()
- Collect data from form and submit to server
       handleChange
       handleSubmit
- Validation

Note: It is recommended to disable the default validations of HTML.
         By using form “novalidate” attribute.

         <form  method=“”  action=“”  novalidate> </form>
                                                           Yup Library
- It is a validation services library.
- It provides pre-defined business logic to verify and validate the input values.
- You can customize and implement according to requirements. 

1. Install yup library for project. 

       > npm install yup  -- save 

2. Import any specific validation service or you can import all services from “yup”. 

       import   { required, minlength }  from “yup”;
                                  (or)
       import  *  as  yup  from “yup”;

3. Configure the validation schema for formik 

       useFormik( {
               initialValues : { },
               validationSchema: yup.object({ 

                       fieldname: yup.dataType().required(“message”).minLength(number, “msg”)..,
                       fieldname: yup.dataType().required()..

               }),
               onSubmit : (values) => { }
          })

4. Binding & Displaying errors is same as you defined for formik.

       <input  type=“text”  onChange={formik.handleChange}>
       <div> { formik.errors.fieldname } </div>

Ex:
 form-demo.jsx

import { useState } from "react";
import { useFormik } from "formik";
import * as yup from "yup";

export function FormDemo(){  
    const formik = useFormik({
         initialValues: {
            UserName: '', 
            Mobile: '',
            City: ''
         },
         validationSchema: yup.object({
             UserName: yup.string().required('User Name Required').min(4,'Name too short'),
             Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/, 'Invalid Mobile')
         }) ,
         onSubmit: (user)=>{
             console.log(user);
         }
    })
    return(
        <div className="container-fluid">
            <h2>Register User</h2>
            <form onSubmit={formik.handleSubmit} >
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" onChange={formik.handleChange}  name="UserName" /></dd>
                    <dd className="text-danger">{formik.errors.UserName}</dd>
                    <dt>Mobile</dt>
                    <dd><input type="text" onChange={formik.handleChange} name="Mobile" /></dd>
                    <dd className="text-danger">{formik.errors.Mobile}</dd>
                    <dt>City</dt>
                    <dd>
                        <select name="City" onChange={formik.handleChange} >
                            <option value="-1">Select City</option>
                            <option>Delhi</option>
                            <option>Hyd</option>
                        </select>
                    </dd>
                    <dd className="text-danger">{formik.errors.City}</dd>
                </dl>
                <button type="submit">Register</button>
            </form>
        </div>
    )
}

Note: The default validations fireup when user submits a form. You can bind blur event to
          validate on blur. 

           <input  onChange={ formik.handleChange}  onBlur={ formik.handleBlur } />

           
- Formik provides a “rest” argument that allows to bind all events to any element. 
- It uses a formik method “getFieldProps()” to access all properties and bind with element.

           <input  type=“text” name=“UserName”  { …formik.getFieldProps(“UserName”) } />

Ex:
import { useState } from "react";
import { useFormik } from "formik";
import * as yup from "yup";

export function FormDemo(){    
    const formik = useFormik({
         initialValues: {
            UserName: '', 
            Mobile: '',
            City: ''
         },
         validationSchema: yup.object({
             UserName: yup.string().required('User Name Required').min(4,'Name too short'),
             Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/, 'Invalid Mobile')
         }) ,
         onSubmit: (user)=>{
             console.log(user);
         }
    })

    return(
        <div className="container-fluid">
            <h2>Register User</h2>
            <form onSubmit={formik.handleSubmit} >
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" {...formik.getFieldProps("UserName")}  name="UserName" /></dd>
                    <dd className="text-danger">{formik.errors.UserName}</dd>
                    <dt>Mobile</dt>
                    <dd><input type="text" {...formik.getFieldProps("Mobile")} name="Mobile" /></dd>
                    <dd className="text-danger">{formik.errors.Mobile}</dd>
                    <dt>City</dt>
                    <dd>
                        <select name="City" {...formik.getFieldProps("City")} >
                            <option value="-1">Select City</option>
                            <option>Delhi</option>
                            <option>Hyd</option>
                        </select>
                    </dd>
                    <dd className="text-danger">{formik.errors.City}</dd>
                </dl>
                <button type="submit">Register</button>
            </form>
        </div>
    )
}

- Formik provides validation at 2 levels

       a) Input State Validation
       b) Form State Validation

- Input state is used to verify every field individually. It uses “formik.errors” to access errors for any specific field. 

               { formik.errors.fieldName } 

- Form state is used to verify all fields in a form simultaneously at the same time. 
 Form state services are 
              a) touched                : got focus and blur
              b) dirty                    : modified [ any one field modified ]
              c) isValid                : all field are valid
              d) errors                    : returns all field errors. 
              e) values                    : returns all fields values. 

Syntax:
           <button disabled={ (formik.dirty) ? false : true }> 
Ex:
Form-demo.jsx

import { useState } from "react";
import { useFormik } from "formik";
import * as yup from "yup";

export function FormDemo(){
   const formik = useFormik({
        initialValues: {
           UserName: '', 
           Mobile: '',
           City: ''
        },
        validationSchema: yup.object({
            UserName: yup.string().required('User Name Required').min(4,'Name too short'),
            Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/, 'Invalid Mobile')
        }) ,
        onSubmit: (user)=>{
            console.log(user);
        }
   })
   return(
       <div className="container-fluid">
           <h2>Register User</h2>
           <form onSubmit={formik.handleSubmit} >
               <dl>
                  <dt>User Name</dt>
                   <dd><input type="text" {...formik.getFieldProps("UserName")}  name="UserName" /></dd>
                   <dd className="text-danger">{formik.errors.UserName}</dd>
                   <dt>Mobile</dt>
                   <dd><input type="text" {...formik.getFieldProps("Mobile")} name="Mobile" /></dd>
                   <dd className="text-danger">{formik.errors.Mobile}</dd>
                   <dt>City</dt>
                   <dd>
                       <select name="City" {...formik.getFieldProps("City")} >
                           <option value="-1">Select City</option>
                           <option>Delhi</option>
                           <option>Hyd</option>
                       </select>
                   </dd>
                   <dd className="text-danger">{formik.errors.City}</dd>
               </dl>
               <button disabled={(formik.isValid)?false:true} className="mx-2" type="submit">Register</button>
               <button  className={(formik.dirty)?'d-inline':'d-none'}  disabled={(formik.dirty)?false:true} type="submit">Save</button>
           </form>
       </div>
   )
}


                                                    Formik Components



6/08
======

Formik 

- useFormik()
- handleChange
- handleBlur
- handleSubmit
- dirty
- isValid
- touched
- errors
- values 
- yup [ for validation ]
- getFieldProps()

                                Formik Components
- Component have pre-defined design, styles and logic.
- You can customize and implement according to the requirements.
- Class components in React can’t use hooks, it requires components to configure a form. 
- Formik components include:
           <Formik>                    It configures a container for form
           <Form>                        It configures a container for elements
           <Field>                        It configures individual element
           <ErrorMessage>        It configures an error log for field.

Syntax:
          <Formik  initialValues={ }  onSubmit={ }  validate={ }  validationSchema={ }>
                <Form>
                      <Field type=“text | password | radio..”> </Field>
                      <ErrorMessage> </ErrorMessage>
               </Form>
           </Formik>

Ex: formik-demo.jsx

import { Formik, Form, Field, ErrorMessage } from "formik";
import * as yup from "yup";

export function FormikDemo(){
   return(
       <div className="container-fluid">
           <h2>Register User</h2>
           <Formik initialValues={{UserName:'', Mobile:''}} validationSchema={yup.object({UserName: yup.string().required('User Name Required').min(4, 'Name too short'), Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/,'Invalid Mobile')})} onSubmit={(values)=>{console.log(values)}} >
               <Form>
                   <dl>
                       <dt>User Name</dt>
                       <dd><Field type="text" name="UserName" /></dd>
                       <dd className="text-danger"> <ErrorMessage name="UserName" /> </dd>
                       <dt>Mobile</dt>
                       <dd><Field type="text" name="Mobile" /></dd>
                       <dd className="text-danger"> <ErrorMessage name="Mobile" /> </dd>
                   </dl>
                   <button type="submit">Submit</button>
               </Form>
           </Formik>
       </div>
   )
}
- You can configure the form state by accessing the form properties, It requires a reference for <Form> component. 

Syntax:
                  <Formik>
                      {
                         form => <Form> </Form>
                      }
                      { form.dirty,  form.isValid,  form.values, form.errors .. }
                  </Formik>

Ex: formik-demo.jsx
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as yup from "yup";

export function FormikDemo(){
   return(
       <div className="container-fluid">
           <h2>Register User</h2>
           <Formik initialValues={{UserName:'', Mobile:''}} validationSchema={yup.object({UserName: yup.string().required('User Name Required').min(4, 'Name too short'), Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/,'Invalid Mobile')})} onSubmit={(values)=>{console.log(values)}} >
               {
                   form => 
                   <Form>
                   <dl>
                       <dt>User Name</dt>
                       <dd><Field type="text" name="UserName" /></dd>
                       <dd className="text-danger"> <ErrorMessage name="UserName" /> </dd>
                       <dt>Mobile</dt>
                       <dd><Field type="text" name="Mobile" /></dd>
                       <dd className="text-danger"> <ErrorMessage name="Mobile" /> </dd>
                   </dl>
                   <button disabled={(form.isValid)?false:true} type="submit">Submit</button>
                   <div className="mt-4 text-danger" style={{display:(form.isValid)?'none':'block'}} >
                       <h4>Please check the following errors</h4>
                       <ul>
                          {
                              Object.keys(form.errors).map(key =>
                                <li key={key}> {form.errors[key]} </li>
                              )
                          }
                        </ul>
                    </div>
                   </Form>
                }
            </Formik>
        </div>
    )
}
                    React Hook Form
  - https://react-hook-form.com/
       1. What are the features of Hook Form?
       2. What are the issues with Hook Form? 
       3. How to configure a form?
       4. How to validate a form?
Summary
- Design Component
- Style Binding
- Class Binding
- Data Binding
- Event Binding
- Forms 

FAQ: What’s new in React 19 Forms?
Ans:
       a) form action    : It configures a server side function to execute on form submit. 
          Syntax:
                      <form  action={serverFunction} >
       b) FormData        : It is a new API to collect the form data without manually creating 
                                    reference for accessing data.
Ex: form-new.jsx

export function FormNew(){

   function handleSubmit(e){
       e.preventDefault();
       const data = new FormData(e.target);
       for(var item of data){
           console.log(item[1]);
       }
   }
   return(
       <div className="container-fluid">
           <h2>Register</h2>
           <form onSubmit={handleSubmit}>
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" name="UserName" /></dd>
                      <dt>Mobile</dt>
                    <dd><input type="text" name="Mobile" /></dd>
                </dl>
                <button type="submit">Submit</button>
            </form>
        </div>
    )
}